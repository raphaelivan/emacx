;; Object semantic.cache
;; SEMANTICDB Tags save file
(semanticdb-project-database "semantic.cache"
  :file "semantic.cache"
  :tables (list 
   (semanticdb-table "js2.el"
    :file "js2.el"
    :pointmax 436028
    :major-mode 'emacs-lisp-mode
    :tokens '(("eval-when-compile" code nil [4933 4968]) ("cc-mode" include nil nil nil [4990 5008]) ("cc-langs" include nil nil nil [5054 5073]) ("cc-engine" include nil nil nil [5106 5126]) ("js2-emacs22" variable nil (>= emacs-major-version 22) nil nil nil [5164 5212]) ("js2-highlight-level" variable nil 2 nil "Amount of syntax highlighting to perform.
nil, zero or negative means none.
1 adds basic syntax highlighting.
2 adds highlighting of some Ecma built-in properties.
3 adds highlighting of many Ecma built-in functions." nil [5214 5504]) ("js2-mode-dev-mode-p" variable nil nil nil "Non-nil if running in development mode.  Normally nil." nil [5506 5597]) ("defgroup" code nil [5599 5675]) ("js2-basic-offset" variable nil (if (and (boundp (quote c-basic-offset)) (numberp c-basic-offset)) c-basic-offset 2) nil "Number of spaces to indent nested statements.
Similar to `c-basic-offset'." nil [5677 5997]) ("make-variable-buffer-local" code nil [5998 6044]) ("js2-cleanup-whitespace" variable nil t nil "Non-nil to invoke `delete-trailing-whitespace' before saves." nil [6046 6183]) ("js2-move-point-on-right-click" variable nil t nil "Non-nil to move insertion point when you right-click.
This makes right-click context menu behavior a bit more intuitive,
since menu operations generally apply to the point.  The exception
is if there is a region selection, in which case the point does -not-
move, so cut/copy/paste etc. can work properly.

Note that IntelliJ moves the point, and Eclipse leaves it alone,
so this behavior is customizable." nil [6185 6674]) ("js2-mirror-mode" variable nil t nil "Non-nil to insert closing brackets, parens, etc. automatically." nil [6676 6809]) ("js2-auto-indent-flag" variable nil t nil "Automatic indentation with punctuation characters. If non-nil, the
current line is indented when certain punctuations are inserted." nil [6811 7017]) ("js2-bounce-indent-flag" variable nil t nil "Non-nil to have indent-line function choose among alternatives.
If nil, the indent-line function will indent to a predetermined column
based on heuristic guessing.  If non-nil, then if the current line is
already indented to that predetermined column, indenting will choose
another likely column and indent to that spot.  Repeated invocation of
the indent-line function will cycle among the computed alternatives.
See the function `js2-bounce-indent' for details." nil [7019 7559]) ("js2-indent-on-enter-key" variable nil nil nil "Non-nil to have Enter/Return key indent the line.
This is unusual for Emacs modes but common in IDEs like Eclipse." nil [7561 7755]) ("js2-enter-indents-newline" variable nil t nil "Non-nil to have Enter/Return key indent the newly-inserted line.
This is unusual for Emacs modes but common in IDEs like Eclipse." nil [7757 7966]) ("js2-rebind-eol-bol-keys" variable nil t nil "Non-nil to rebind beginning-of-line and end-of-line keys.
If non-nil, bounce between bol/eol and first/last non-whitespace char." nil [7968 8174]) ("js2-electric-keys" variable nil (quote ("{" "}" "(" ")" "[" "]" ":" ";" "," "*")) nil "Keys that auto-indent when `js2-auto-indent-flag' is non-nil.
Each value in the list is passed to `define-key'." nil [8176 8397]) ("js2-idle-timer-delay" variable nil 0.2 nil "Delay in secs before re-parsing after user makes changes.
Multiplied by `js2-dynamic-idle-timer-adjust', which see." nil [8399 8590]) ("make-variable-buffer-local" code nil [8591 8641]) ("js2-dynamic-idle-timer-adjust" variable nil 0 nil "Positive to adjust `js2-idle-timer-delay' based on file size.
The idea is that for short files, parsing is faster so we can be
more responsive to user edits without interfering with editing.
The buffer length in characters (typically bytes) is divided by
this value and used to multiply `js2-idle-timer-delay' for the
buffer.  For example, a 21k file and 10k adjust yields 21k/10k
== 2, so js2-idle-timer-delay is multiplied by 2.
If `js2-dynamic-idle-timer-adjust' is 0 or negative,
`js2-idle-timer-delay' is not dependent on the file size." nil [8643 9267]) ("js2-mode-escape-quotes" variable nil t nil "Non-nil to disable automatic quote-escaping inside strings." nil [9269 9405]) ("js2-mode-squeeze-spaces" variable nil t nil "Non-nil to normalize whitespace when filling in comments.
Multiple runs of spaces are converted to a single space." nil [9407 9599]) ("js2-mode-show-parse-errors" variable nil t nil "True to highlight parse errors." nil [9601 9713]) ("js2-mode-show-strict-warnings" variable nil t nil "Non-nil to emit Ecma strict-mode warnings.
Some of the warnings can be individually disabled by other flags,
even if this flag is non-nil." nil [9715 9937]) ("js2-strict-trailing-comma-warning" variable nil t nil "Non-nil to warn about trailing commas in array literals.
Ecma-262 forbids them, but many browsers permit them.  IE is the
big exception, and can produce bugs if you have trailing commas." nil [9939 10213]) ("js2-strict-missing-semi-warning" variable nil t nil "Non-nil to warn about semicolon auto-insertion after statement.
Technically this is legal per Ecma-262, but some style guides disallow
depending on it." nil [10215 10452]) ("js2-missing-semi-one-line-override" variable nil nil nil "Non-nil to permit missing semicolons in one-line functions.
In one-liner functions such as `function identity(x) {return x}'
people often omit the semicolon for a cleaner look.  If you are
such a person, you can suppress the missing-semicolon warning
by setting this variable to t." nil [10454 10826]) ("js2-strict-inconsistent-return-warning" variable nil t nil "Non-nil to warn about mixing returns with value-returns.
It's perfectly legal to have a `return' and a `return foo' in the
same function, but it's often an indicator of a bug, and it also
interferes with type inference (in systems that support it.)" nil [10828 11169]) ("js2-strict-cond-assign-warning" variable nil t nil "Non-nil to warn about expressions like if (a = b).
This often should have been '==' instead of '='.  If the warning
is enabled, you can suppress it on a per-expression basis by
parenthesizing the expression, e.g. if ((a = b)) ..." nil [11171 11485]) ("js2-strict-cond-assign-warning" variable nil t nil "Non-nil to warn about expressions like if (a = b).
This often should have been '==' instead of '='.  If the warning
is enabled, you can suppress it on a per-expression basis by
parenthesizing the expression, e.g. if ((a = b)) ..." nil [11487 11801]) ("js2-strict-var-redeclaration-warning" variable nil t nil "Non-nil to warn about redeclaring variables in a script or function." nil [11803 11962]) ("js2-strict-var-hides-function-arg-warning" variable nil t nil "Non-nil to warn about a var decl hiding a function argument." nil [11964 12120]) ("js2-skip-preprocessor-directives" variable nil nil nil "Non-nil to treat lines beginning with # as comments.
Useful for viewing Mozilla JavaScript source code." nil [12122 12314]) ("js2-basic-offset" variable nil c-basic-offset nil "Functions like `c-basic-offset' in js2-mode buffers." nil [12316 12452]) ("make-variable-buffer-local" code nil [12453 12499]) ("js2-language-version" variable nil 170 nil "Configures what JavaScript language version to recognize.
Currently only 150, 160 and 170 are supported, corresponding
to JavaScript 1.5, 1.6 and 1.7, respectively.  In a nutshell,
1.6 adds E4X support, and 1.7 adds let, yield, and Array
comprehensions." nil [12501 12831]) ("js2-allow-keywords-as-property-names" variable nil t nil "If non-nil, you can use JavaScript keywords as object property names.
Examples:

  var foo = {int: 5, while: 6, continue: 7};
  foo.return = 8;

Ecma-262 forbids this syntax, but many browsers support it." nil [12833 13128]) ("js2-instanceof-has-side-effects" variable nil nil nil "If non-nil, treats the instanceof operator as having side effects.
This is useful for xulrunner apps." nil [13130 13319]) ("js2-allow-rhino-new-expr-initializer" variable nil nil nil "Non-nil to support a Rhino's experimental syntactic construct.

Rhino supports the ability to follow a `new' expression with an object
literal, which is used to set additional properties on the new object
after calling its constructor.  Syntax:

  new <expr> [ ( arglist ) ] [initializer]

Hence, this expression:

  new Object {a: 1, b: 2}

results in an Object with properties a=1 and b=2.  This syntax is
apparently not configurable in Rhino - it's currently always enabled,
as of Rhino version 1.7R2." nil [13321 13918]) ("js2-allow-member-expr-as-function-name" variable nil nil nil "Non-nil to support experimental Rhino syntax for function names.

Rhino supports an experimental syntax configured via the Rhino Context
setting `allowMemberExprAsFunctionName'.  The experimental syntax is:

  function <member-expr> ( [ arg-list ] ) { <body> }

Where member-expr is a non-parenthesized 'member expression', which
is anything at the grammar level of a new-expression or lower, meaning
any expression that does not involve infix or unary operators.

When <member-expr> is not a simple identifier, then it is syntactic
sugar for assigning the anonymous function to the <member-expr>.  Hence,
this code:

  function a.b().c[2] (x, y) { ... }

is rewritten as:

  a.b().c[2] = function(x, y) {...}

which doesn't seem particularly useful, but Rhino permits it." nil [13920 14787]) ("js2-mode-version" variable nil 20080616 nil "Release number for `js2-mode'." nil [14789 14858]) ("js2-token-beg" variable nil 1 nil nil nil [14937 14961]) ("make-variable-buffer-local" code nil [14962 15005]) ("js2-token-end" variable nil -1 nil nil nil [15006 15031]) ("make-variable-buffer-local" code nil [15032 15075]) ("js2-EOF_CHAR" variable nil -1 nil "Represents end of stream.  Distinct from js2-EOF token type." nil [15077 15166]) ("js2-ERROR" variable nil -1 nil nil nil [15366 15387]) ("js2-EOF" variable nil 0 nil nil nil [15388 15406]) ("js2-EOL" variable nil 1 nil nil nil [15407 15425]) ("js2-ENTERWITH" variable nil 2 nil nil nil [15426 15450]) ("js2-LEAVEWITH" variable nil 3 nil nil nil [15487 15511]) ("js2-RETURN" variable nil 4 nil nil nil [15512 15533]) ("js2-GOTO" variable nil 5 nil nil nil [15534 15553]) ("js2-IFEQ" variable nil 6 nil nil nil [15554 15573]) ("js2-IFNE" variable nil 7 nil nil nil [15574 15593]) ("js2-SETNAME" variable nil 8 nil nil nil [15594 15616]) ("js2-BITOR" variable nil 9 nil nil nil [15617 15637]) ("js2-BITXOR" variable nil 10 nil nil nil [15638 15660]) ("js2-BITAND" variable nil 11 nil nil nil [15661 15683]) ("js2-EQ" variable nil 12 nil nil nil [15684 15702]) ("js2-NE" variable nil 13 nil nil nil [15703 15721]) ("js2-LT" variable nil 14 nil nil nil [15722 15740]) ("js2-LE" variable nil 15 nil nil nil [15741 15759]) ("js2-GT" variable nil 16 nil nil nil [15760 15778]) ("js2-GE" variable nil 17 nil nil nil [15779 15797]) ("js2-LSH" variable nil 18 nil nil nil [15798 15817]) ("js2-RSH" variable nil 19 nil nil nil [15818 15837]) ("js2-URSH" variable nil 20 nil nil nil [15838 15858]) ("js2-ADD" variable nil 21 nil nil nil [15859 15878]) ("js2-SUB" variable nil 22 nil nil nil [15903 15922]) ("js2-MUL" variable nil 23 nil nil nil [15948 15967]) ("js2-DIV" variable nil 24 nil nil nil [15968 15987]) ("js2-MOD" variable nil 25 nil nil nil [15988 16007]) ("js2-NOT" variable nil 26 nil nil nil [16008 16027]) ("js2-BITNOT" variable nil 27 nil nil nil [16028 16050]) ("js2-POS" variable nil 28 nil nil nil [16051 16070]) ("js2-NEG" variable nil 29 nil nil nil [16095 16114]) ("js2-NEW" variable nil 30 nil nil nil [16140 16159]) ("js2-DELPROP" variable nil 31 nil nil nil [16160 16183]) ("js2-TYPEOF" variable nil 32 nil nil nil [16184 16206]) ("js2-GETPROP" variable nil 33 nil nil nil [16207 16230]) ("js2-GETPROPNOWARN" variable nil 34 nil nil nil [16231 16260]) ("js2-SETPROP" variable nil 35 nil nil nil [16261 16284]) ("js2-GETELEM" variable nil 36 nil nil nil [16285 16308]) ("js2-SETELEM" variable nil 37 nil nil nil [16309 16332]) ("js2-CALL" variable nil 38 nil nil nil [16333 16353]) ("js2-NAME" variable nil 39 nil nil nil [16354 16374]) ("js2-NUMBER" variable nil 40 nil nil nil [16401 16423]) ("js2-STRING" variable nil 41 nil nil nil [16424 16446]) ("js2-NULL" variable nil 42 nil nil nil [16447 16467]) ("js2-THIS" variable nil 43 nil nil nil [16468 16488]) ("js2-FALSE" variable nil 44 nil nil nil [16489 16510]) ("js2-TRUE" variable nil 45 nil nil nil [16511 16531]) ("js2-SHEQ" variable nil 46 nil nil nil [16532 16552]) ("js2-SHNE" variable nil 47 nil nil nil [16588 16608]) ("js2-REGEXP" variable nil 48 nil nil nil [16646 16668]) ("js2-BINDNAME" variable nil 49 nil nil nil [16669 16693]) ("js2-THROW" variable nil 50 nil nil nil [16694 16715]) ("js2-RETHROW" variable nil 51 nil nil nil [16716 16739]) ("js2-IN" variable nil 52 nil nil nil [16797 16815]) ("js2-INSTANCEOF" variable nil 53 nil nil nil [16816 16842]) ("js2-LOCAL_LOAD" variable nil 54 nil nil nil [16843 16869]) ("js2-GETVAR" variable nil 55 nil nil nil [16870 16892]) ("js2-SETVAR" variable nil 56 nil nil nil [16893 16915]) ("js2-CATCH_SCOPE" variable nil 57 nil nil nil [16916 16943]) ("js2-ENUM_INIT_KEYS" variable nil 58 nil nil nil [16944 16974]) ("js2-ENUM_INIT_VALUES" variable nil 59 nil nil nil [16975 17007]) ("js2-ENUM_INIT_ARRAY" variable nil 60 nil nil nil [17008 17039]) ("js2-ENUM_NEXT" variable nil 61 nil nil nil [17040 17065]) ("js2-ENUM_ID" variable nil 62 nil nil nil [17066 17089]) ("js2-THISFN" variable nil 63 nil nil nil [17090 17112]) ("js2-RETURN_RESULT" variable nil 64 nil nil nil [17113 17142]) ("js2-ARRAYLIT" variable nil 65 nil nil nil [17188 17212]) ("js2-OBJECTLIT" variable nil 66 nil nil nil [17235 17260]) ("js2-GET_REF" variable nil 67 nil nil nil [17283 17306]) ("js2-SET_REF" variable nil 68 nil nil nil [17327 17350]) ("js2-DEL_REF" variable nil 69 nil nil nil [17383 17406]) ("js2-REF_CALL" variable nil 70 nil nil nil [17433 17457]) ("js2-REF_SPECIAL" variable nil 71 nil nil nil [17499 17526]) ("js2-YIELD" variable nil 72 nil nil nil [17578 17599]) ("js2-DEFAULTNAMESPACE" variable nil 73 nil nil nil [17655 17687]) ("js2-ESCXMLATTR" variable nil 74 nil nil nil [17688 17714]) ("js2-ESCXMLTEXT" variable nil 75 nil nil nil [17715 17741]) ("js2-REF_MEMBER" variable nil 76 nil nil nil [17742 17768]) ("js2-REF_NS_MEMBER" variable nil 77 nil nil nil [17805 17834]) ("js2-REF_NAME" variable nil 78 nil nil nil [17875 17899]) ("js2-REF_NS_NAME" variable nil 79 nil nil nil [17936 17963]) ("js2-first-bytecode" variable nil js2-ENTERWITH nil nil nil [18007 18048]) ("js2-last-bytecode" variable nil js2-REF_NS_NAME nil nil nil [18049 18091]) ("js2-TRY" variable nil 80 nil nil nil [18093 18112]) ("js2-SEMI" variable nil 81 nil nil nil [18113 18133]) ("js2-LB" variable nil 82 nil nil nil [18156 18174]) ("js2-RB" variable nil 83 nil nil nil [18213 18231]) ("js2-LC" variable nil 84 nil nil nil [18232 18250]) ("js2-RC" variable nil 85 nil nil nil [18293 18311]) ("js2-LP" variable nil 86 nil nil nil [18312 18330]) ("js2-RP" variable nil 87 nil nil nil [18367 18385]) ("js2-COMMA" variable nil 88 nil nil nil [18386 18407]) ("js2-ASSIGN" variable nil 89 nil nil nil [18435 18457]) ("js2-ASSIGN_BITOR" variable nil 90 nil nil nil [18490 18518]) ("js2-ASSIGN_BITXOR" variable nil 91 nil nil nil [18526 18555]) ("js2-ASSIGN_BITAND" variable nil 92 nil nil nil [18562 18591]) ("js2-ASSIGN_LSH" variable nil 93 nil nil nil [18598 18624]) ("js2-ASSIGN_RSH" variable nil 94 nil nil nil [18635 18661]) ("js2-ASSIGN_URSH" variable nil 95 nil nil nil [18672 18699]) ("js2-ASSIGN_ADD" variable nil 96 nil nil nil [18710 18736]) ("js2-ASSIGN_SUB" variable nil 97 nil nil nil [18746 18772]) ("js2-ASSIGN_MUL" variable nil 98 nil nil nil [18782 18808]) ("js2-ASSIGN_DIV" variable nil 99 nil nil nil [18818 18844]) ("js2-ASSIGN_MOD" variable nil 100 nil nil nil [18854 18881]) ("js2-first-assign" variable nil js2-ASSIGN nil nil nil [18891 18927]) ("js2-last-assign" variable nil js2-ASSIGN_MOD nil nil nil [18928 18967]) ("js2-HOOK" variable nil 101 nil nil nil [18969 18990]) ("js2-COLON" variable nil 102 nil nil nil [19019 19041]) ("js2-OR" variable nil 103 nil nil nil [19042 19061]) ("js2-AND" variable nil 104 nil nil nil [19091 19111]) ("js2-INC" variable nil 105 nil nil nil [19141 19161]) ("js2-DEC" variable nil 106 nil nil nil [19202 19222]) ("js2-DOT" variable nil 107 nil nil nil [19223 19243]) ("js2-FUNCTION" variable nil 108 nil nil nil [19276 19301]) ("js2-EXPORT" variable nil 109 nil nil nil [19326 19349]) ("js2-IMPORT" variable nil 110 nil nil nil [19374 19397]) ("js2-IF" variable nil 111 nil nil nil [19422 19441]) ("js2-ELSE" variable nil 112 nil nil nil [19466 19487]) ("js2-SWITCH" variable nil 113 nil nil nil [19512 19535]) ("js2-CASE" variable nil 114 nil nil nil [19560 19581]) ("js2-DEFAULT" variable nil 115 nil nil nil [19606 19630]) ("js2-WHILE" variable nil 116 nil nil nil [19655 19677]) ("js2-DO" variable nil 117 nil nil nil [19702 19721]) ("js2-FOR" variable nil 118 nil nil nil [19746 19766]) ("js2-BREAK" variable nil 119 nil nil nil [19791 19813]) ("js2-CONTINUE" variable nil 120 nil nil nil [19838 19863]) ("js2-VAR" variable nil 121 nil nil nil [19888 19908]) ("js2-WITH" variable nil 122 nil nil nil [19933 19954]) ("js2-CATCH" variable nil 123 nil nil nil [19979 20001]) ("js2-FINALLY" variable nil 124 nil nil nil [20026 20050]) ("js2-VOID" variable nil 125 nil nil nil [20075 20096]) ("js2-RESERVED" variable nil 126 nil nil nil [20121 20146]) ("js2-EMPTY" variable nil 127 nil nil nil [20173 20195]) ("js2-BLOCK" variable nil 128 nil nil nil [20260 20282]) ("js2-LABEL" variable nil 129 nil nil nil [20309 20331]) ("js2-TARGET" variable nil 130 nil nil nil [20348 20371]) ("js2-LOOP" variable nil 131 nil nil nil [20372 20393]) ("js2-EXPR_VOID" variable nil 132 nil nil nil [20394 20420]) ("js2-EXPR_RESULT" variable nil 133 nil nil nil [20461 20489]) ("js2-JSR" variable nil 134 nil nil nil [20526 20546]) ("js2-SCRIPT" variable nil 135 nil nil nil [20547 20570]) ("js2-TYPEOFNAME" variable nil 136 nil nil nil [20613 20640]) ("js2-USE_STACK" variable nil 137 nil nil nil [20670 20696]) ("js2-SETPROP_OP" variable nil 138 nil nil nil [20697 20724]) ("js2-SETELEM_OP" variable nil 139 nil nil nil [20748 20775]) ("js2-LOCAL_BLOCK" variable nil 140 nil nil nil [20800 20828]) ("js2-SET_REF_OP" variable nil 141 nil nil nil [20829 20856]) ("js2-DOTDOT" variable nil 142 nil nil nil [20908 20931]) ("js2-COLONCOLON" variable nil 143 nil nil nil [20962 20989]) ("js2-XML" variable nil 144 nil nil nil [21011 21031]) ("js2-DOTQUERY" variable nil 145 nil nil nil [21053 21078]) ("js2-XMLATTR" variable nil 146 nil nil nil [21128 21152]) ("js2-XMLEND" variable nil 147 nil nil nil [21163 21186]) ("js2-TO_OBJECT" variable nil 148 nil nil nil [21213 21239]) ("js2-TO_DOUBLE" variable nil 149 nil nil nil [21240 21266]) ("js2-GET" variable nil 150 nil nil nil [21268 21288]) ("js2-SET" variable nil 151 nil nil nil [21327 21347]) ("js2-LET" variable nil 152 nil nil nil [21386 21406]) ("js2-CONST" variable nil 153 nil nil nil [21445 21467]) ("js2-SETCONST" variable nil 154 nil nil nil [21468 21493]) ("js2-SETCONSTVAR" variable nil 155 nil nil nil [21494 21522]) ("js2-ARRAYCOMP" variable nil 156 nil nil nil [21523 21549]) ("js2-LETEXPR" variable nil 157 nil nil nil [21550 21574]) ("js2-WITHEXPR" variable nil 158 nil nil nil [21575 21600]) ("js2-DEBUGGER" variable nil 159 nil nil nil [21601 21626]) ("js2-COMMENT" variable nil 160 nil nil nil [21628 21652]) ("js2-num-tokens" variable nil (1+ js2-COMMENT) nil nil nil [21674 21714]) ("js2-debug-print-trees" variable nil nil ((const . t)) nil nil [21716 21752]) ("deflocal" function nil ("name" "value" "comment") nil (\` (progn (defvar (\, name) (\, value) (\, comment)) (make-variable-buffer-local (quote (\, name))))) nil [21975 22103]) ("deflocal" code nil [22249 22380]) ("deflocal" code nil [22382 22456]) ("deflocal" code nil [22458 22546]) ("deflocal" code nil [22548 22645]) ("deflocal" code nil [22647 22716]) ("deflocal" code nil [22718 22788]) ("deflocal" code nil [22790 22856]) ("deflocal" code nil [22858 22932]) ("deflocal" code nil [22934 23054]) ("deflocal" code nil [23056 23134]) ("deflocal" code nil [23136 23216]) ("deflocal" code nil [23218 23297]) ("deflocal" code nil [23299 23428]) ("deflocal" code nil [23430 23504]) ("js2-parsed-errors" variable nil nil nil "List of errors produced during scanning/parsing." nil [23528 23611]) ("make-variable-buffer-local" code nil [23612 23659]) ("js2-parsed-warnings" variable nil nil nil "List of warnings produced during scanning/parsing." nil [23661 23748]) ("make-variable-buffer-local" code nil [23749 23798]) ("js2-recover-from-parse-errors" variable nil t nil "Non-nil to continue parsing after a syntax error.

In recovery mode, the AST will be built in full, and any error
nodes will be flagged with appropriate error information.  If
this flag is nil, a syntax error will result in an error being
signaled.

The variable is automatically buffer-local, because different
modes that use the parser will need different settings." nil [23800 24212]) ("make-variable-buffer-local" code nil [24213 24272]) ("js2-parse-hook" variable nil nil nil "List of callbacks for receiving parsing progress." nil [24274 24355]) ("make-variable-buffer-local" code nil [24356 24400]) ("js2-parse-finished-hook" variable nil nil nil "List of callbacks to notify when parsing finishes.
Not called if parsing was interrupted." nil [24402 24532]) ("js2-is-eval-code" variable nil nil nil "True if we're evaluating code in a string.
If non-nil, the tokenizer will record the token text, and the AST nodes
will record their source text.  Off by default for IDE modes, since the
text is available in the buffer." nil [24534 24787]) ("make-variable-buffer-local" code nil [24788 24834]) ("js2-parse-ide-mode" variable nil t nil "Non-nil if the parser is being used for `js2-mode'.
If non-nil, the parser will set text properties for fontification
and the syntax-table.  The value should be nil when using the
parser as a frontend to an interpreter or byte compiler." nil [24836 25106]) ("js2-clear-ti-mask" variable nil 65535 ((const . t)) "Mask to clear token information bits." nil [25173 25250]) ("js2-ti-after-eol" variable nil (lsh 1 16) ((const . t)) "Flag:  first token of the source line." nil [25252 25333]) ("js2-ti-check-label" variable nil (lsh 1 17) ((const . t)) "Flag:  indicates to check for label." nil [25335 25416]) ("js2-compiler-generate-debug-info" variable nil t nil nil nil [25477 25520]) ("make-variable-buffer-local" code nil [25521 25583]) ("js2-compiler-use-dynamic-scope" variable nil nil nil nil nil [25585 25628]) ("make-variable-buffer-local" code nil [25629 25689]) ("js2-compiler-reserved-keywords-as-identifier" variable nil nil nil nil nil [25691 25748]) ("make-variable-buffer-local" code nil [25749 25823]) ("js2-compiler-xml-available" variable nil t nil nil nil [25825 25862]) ("make-variable-buffer-local" code nil [25863 25919]) ("js2-compiler-optimization-level" variable nil 0 nil nil nil [25921 25963]) ("make-variable-buffer-local" code nil [25964 26025]) ("js2-compiler-generating-source" variable nil t nil nil nil [26027 26068]) ("make-variable-buffer-local" code nil [26069 26129]) ("js2-compiler-strict-mode" variable nil nil nil nil nil [26131 26168]) ("make-variable-buffer-local" code nil [26169 26223]) ("js2-compiler-report-warning-as-error" variable nil nil nil nil nil [26225 26274]) ("make-variable-buffer-local" code nil [26275 26341]) ("js2-compiler-generate-observer-count" variable nil nil nil nil nil [26343 26392]) ("make-variable-buffer-local" code nil [26393 26459]) ("js2-compiler-activation-names" variable nil nil nil nil nil [26461 26503]) ("make-variable-buffer-local" code nil [26504 26563]) ("js2-called-by-compile-function" variable nil nil nil "True if `js2-parse' was called by `js2-compile-function'.
Will only be used when we finish implementing the interpreter." nil [26653 26821]) ("make-variable-buffer-local" code nil [26822 26882]) ("js2-current-flagged-token" variable nil js2-EOF nil nil nil [26950 26992]) ("make-variable-buffer-local" code nil [26993 27048]) ("js2-current-token" variable nil js2-EOF nil nil nil [27050 27084]) ("make-variable-buffer-local" code nil [27085 27132]) ("js2-nesting-of-function" variable nil 0 nil nil nil [27251 27285]) ("make-variable-buffer-local" code nil [27286 27339]) ("js2-recorded-assignments" variable nil nil nil nil nil [27341 27378]) ("make-variable-buffer-local" code nil [27379 27435]) ("js2-current-script-or-fn" variable nil nil nil nil nil [27580 27617]) ("make-variable-buffer-local" code nil [27618 27672]) ("js2-current-scope" variable nil nil nil nil nil [27674 27704]) ("make-variable-buffer-local" code nil [27705 27752]) ("js2-nesting-of-with" variable nil 0 nil nil nil [27754 27784]) ("make-variable-buffer-local" code nil [27785 27834]) ("js2-label-set" variable nil nil nil "An alist mapping label names to nodes." nil [27836 27905]) ("make-variable-buffer-local" code nil [27906 27949]) ("js2-loop-set" variable nil nil nil nil nil [27951 27976]) ("make-variable-buffer-local" code nil [27977 28019]) ("js2-loop-and-switch-set" variable nil nil nil nil nil [28021 28057]) ("make-variable-buffer-local" code nil [28058 28111]) ("js2-has-return-value" variable nil nil nil nil nil [28113 28146]) ("make-variable-buffer-local" code nil [28147 28197]) ("js2-end-flags" variable nil 0 nil nil nil [28199 28223]) ("make-variable-buffer-local" code nil [28224 28267]) ("js2-prev-name-token-start" variable nil nil nil nil nil [28488 28526]) ("js2-prev-name-token-string" variable nil nil nil nil nil [28527 28566]) ("js2-save-name-token-data" function nil ("pos" "name") nil (setq js2-prev-name-token-start pos js2-prev-name-token-string name) nil [28568 28693]) ("js2-end-unreached" variable nil 0 ((const . t)) nil nil [29503 29539]) ("js2-end-drops-off" variable nil 1 ((const . t)) nil nil [29540 29576]) ("js2-end-returns" variable nil 2 ((const . t)) nil nil [29577 29613]) ("js2-end-returns-value" variable nil 4 ((const . t)) nil nil [29614 29650]) ("js2-end-yields" variable nil 8 ((const . t)) nil nil [29651 29687]) ("js2-labeled-stmt" variable nil nil nil nil nil [29948 29977]) ("make-variable-buffer-local" code nil [30010 30056]) ("js2-in-for-init" variable nil nil nil nil nil [30318 30346]) ("make-variable-buffer-local" code nil [30347 30392]) ("js2-temp-name-counter" variable nil 0 nil nil nil [30394 30426]) ("make-variable-buffer-local" code nil [30427 30478]) ("js2-parse-stmt-count" variable nil 0 nil nil nil [30480 30511]) ("make-variable-buffer-local" code nil [30512 30562]) ("js2-get-next-temp-name" function nil nil nil (format "$%d" (incf js2-temp-name-counter)) nil [30564 30646]) ("js2-parse-interruptable-p" variable nil t nil "Set this to nil to force parse to continue until finished.
This will mostly be useful for interpreters." nil [30648 30792]) ("js2-statements-per-pause" variable nil 50 nil "Pause after this many statements to check for user input.
If user input is pending, stop the parse and discard the tree.
This makes for a smoother user experience for large files.
You may have to wait a second or two before the highlighting
and error-reporting appear, but you can always type ahead if
you wish.  This appears to be more or less how Eclipse, IntelliJ
and other editors work." nil [30794 31225]) ("js2-record-comments" variable nil t nil "Instructs the scanner to record comments in `js2-scanned-comments'." nil [31227 31329]) ("make-variable-buffer-local" code nil [31330 31379]) ("js2-scanned-comments" variable nil nil nil "List of all comments from the current parse." nil [31381 31463]) ("make-variable-buffer-local" code nil [31464 31514]) ("js2-underline-color" function nil ("color") nil "Return a legal value for the :underline face attribute based on COLOR." nil [31516 31792]) ("js2-mode-indent-inhibit-undo" variable nil nil nil "Non-nil to disable collection of Undo information when indenting lines.
Some users have requested this behavior.  It's nil by default because
other Emacs modes don't work this way." nil [31794 32059]) ("js2-mode-indent-ignore-first-tab" variable nil nil nil "If non-nil, ignore first TAB keypress if we look indented properly.
It's fairly common for users to navigate to an already-indented line
and press TAB for reassurance that it's been indented.  For this class
of users, we want the first TAB press on a line to be ignored if the
line is already indented to one of the precomputed alternatives.

This behavior is only partly implemented.  If you TAB-indent a line,
navigate to another line, and then navigate back, it fails to clear
the last-indented variable, so it thinks you've already hit TAB once,
and performs the indent.  A full solution would involve getting on the
point-motion hooks for the entire buffer.  If we come across another
use cases that requires watching point motion, I'll consider doing it.

If you set this variable to nil, then the TAB key will always change
the indentation of the current line, if more than one alternative
indentation spot exists." nil [32061 33071]) ("js2-indent-hook" variable nil nil nil "A hook for user-defined indentation rules.

Functions on this hook should expect two arguments:    (LIST INDEX)
The LIST argument is the list of computed indentation points for
the current line.  INDEX is the list index of the indentation point
that `js2-bounce-indent' plans to use.  If INDEX is nil, then the
indent function is not going to change the current line indentation.

If a hook function on this list returns a non-nil value, then
`js2-bounce-indent' assumes the hook function has performed its own
indentation, and will do nothing.  If all hook functions on the list
return nil, then `js2-bounce-indent' will use its computed indentation
and reindent the line.

When hook functions on this hook list are called, the variable
`js2-mode-ast' may or may not be set, depending on whether the
parse tree is available.  If the variable is nil, you can pass a
callback to `js2-mode-wait-for-parse', and your callback will be
called after the new parse tree is built.  This can take some time
in large files." nil [33073 34119]) ("js2-warning-face" variable nil (\` ((((class color) (background light)) (:underline (\, (js2-underline-color "orange")))) (((class color) (background dark)) (:underline (\, (js2-underline-color "orange")))) (t (:underline t)))) nil "Face for JavaScript warnings." nil [34121 34405]) ("js2-error-face" variable nil (\` ((((class color) (background light)) (:foreground "red")) (((class color) (background dark)) (:foreground "red")) (t (:foreground "red")))) nil "Face for JavaScript errors." nil [34407 34642]) ("js2-jsdoc-tag-face" variable nil (quote ((t :foreground "SlateGray"))) nil "Face used to highlight @whatever tags in jsdoc comments." nil [34644 34785]) ("js2-jsdoc-type-face" variable nil (quote ((t :foreground "SteelBlue"))) nil "Face used to highlight {FooBar} types in jsdoc comments." nil [34787 34929]) ("js2-jsdoc-value-face" variable nil (quote ((t :foreground "PeachPuff3"))) nil "Face used to highlight tag values in jsdoc comments." nil [34931 35071]) ("js2-function-param-face" variable nil (quote ((t :foreground "SeaGreen"))) nil "Face used to highlight function parameters in javascript." nil [35073 35219]) ("js2-instance-member-face" variable nil (quote ((t :foreground "DarkOrchid"))) nil "Face used to highlight instance variables in javascript.
Not currently used." nil [35221 35389]) ("js2-private-member-face" variable nil (quote ((t :foreground "PeachPuff3"))) nil "Face used to highlight calls to private methods in javascript.
Not currently used." nil [35391 35564]) ("js2-private-function-call-face" variable nil (quote ((t :foreground "goldenrod"))) nil "Face used to highlight calls to private functions in javascript.
Not currently used." nil [35566 35747]) ("js2-jsdoc-html-tag-name-face" variable nil (if js2-emacs22 (quote ((((class color) (min-colors 88) (background light)) (:foreground "rosybrown")) (((class color) (min-colors 8) (background dark)) (:foreground "yellow")) (((class color) (min-colors 8) (background light)) (:foreground "magenta")))) (quote ((((type tty pc) (class color) (background light)) (:foreground "magenta")) (((type tty pc) (class color) (background dark)) (:foreground "yellow")) (t (:foreground "RosyBrown"))))) nil "Face used to highlight jsdoc html tag names" nil [35749 36367]) ("js2-jsdoc-html-tag-delimiter-face" variable nil (if js2-emacs22 (quote ((((class color) (min-colors 88) (background light)) (:foreground "dark khaki")) (((class color) (min-colors 8) (background dark)) (:foreground "green")) (((class color) (min-colors 8) (background light)) (:foreground "green")))) (quote ((((type tty pc) (class color) (background light)) (:foreground "green")) (((type tty pc) (class color) (background dark)) (:foreground "green")) (t (:foreground "dark khaki"))))) nil "Face used to highlight brackets in jsdoc html tags." nil [36369 36994]) ("js2-external-variable-face" variable nil (quote ((t :foreground "orange"))) nil "Face used to highlight assignments to undeclared variables.
An undeclared variable is any variable not declared with var or let
in the current scope or any lexically enclosing scope.  If you assign
to such a variable, then you are either expecting it to originate from
another file, or you've got a potential bug." nil [36996 37399]) ("js2-highlight-external-variables" variable nil t nil "Non-nil to higlight assignments to undeclared variables." nil [37401 37544]) ("js2-mode-map" variable nil (let ((map (make-sparse-keymap)) keys) (define-key map [mouse-1] (function js2-mode-show-node)) (define-key map "" (function js2-enter-key)) (when js2-rebind-eol-bol-keys (define-key map "" (function js2-beginning-of-line)) (define-key map "" (function js2-end-of-line))) (define-key map "" (function js2-mode-hide-element)) (define-key map "" (function js2-mode-show-element)) (define-key map "" (function js2-mode-show-all)) (define-key map "" (function js2-mode-toggle-hide-functions)) (define-key map "" (function js2-mode-toggle-hide-comments)) (define-key map "" (function js2-mode-toggle-element)) (define-key map "" (function js2-mode-toggle-warnings-and-errors)) (define-key map (kbd "C-c C-'") (function js2-next-error)) (if (setq keys (where-is-internal (function next-error))) (define-key map (car keys) (function js2-next-error))) (define-key map (or (car (where-is-internal (function mark-defun))) (kbd "M-C-h")) (function js2-mark-defun)) (define-key map (or (car (where-is-internal (function narrow-to-defun))) (kbd "C-x nd")) (function js2-narrow-to-defun)) (define-key map [down-mouse-3] (function js2-mouse-3)) (when js2-auto-indent-flag (mapc (lambda (key) (define-key map key (function js2-insert-and-indent))) js2-electric-keys)) (define-key map [menu-bar javascript] (cons "JavaScript" (make-sparse-keymap "JavaScript"))) (define-key map [menu-bar javascript customize-js2-mode] (quote (menu-item "Customize js2-mode" js2-mode-customize :help "Customize the behavior of this mode"))) (define-key map [menu-bar javascript js2-force-refresh] (quote (menu-item "Force buffer refresh" js2-mode-reset :help "Re-parse the buffer from scratch"))) (define-key map [menu-bar javascript separator-2] (quote ("--"))) (define-key map [menu-bar javascript next-error] (quote (menu-item "Next warning or error" js2-next-error :enabled (and js2-mode-ast (or (js2-ast-root-errors js2-mode-ast) (js2-ast-root-warnings js2-mode-ast))) :help "Move to next warning or error"))) (define-key map [menu-bar javascript display-errors] (quote (menu-item "Show errors and warnings" js2-mode-display-warnings-and-errors :visible (not js2-mode-show-parse-errors) :help "Turn on display of warnings and errors"))) (define-key map [menu-bar javascript hide-errors] (quote (menu-item "Hide errors and warnings" js2-mode-hide-warnings-and-errors :visible js2-mode-show-parse-errors :help "Turn off display of warnings and errors"))) (define-key map [menu-bar javascript separator-1] (quote ("--"))) (define-key map [menu-bar javascript js2-toggle-function] (quote (menu-item "Show/collapse element" js2-mode-toggle-element :help "Hide or show function body or comment"))) (define-key map [menu-bar javascript show-comments] (quote (menu-item "Show block comments" js2-mode-toggle-hide-comments :visible js2-mode-comments-hidden :help "Expand all hidden block comments"))) (define-key map [menu-bar javascript hide-comments] (quote (menu-item "Hide block comments" js2-mode-toggle-hide-comments :visible (not js2-mode-comments-hidden) :help "Show block comments as /*...*/"))) (define-key map [menu-bar javascript show-all-functions] (quote (menu-item "Show function bodies" js2-mode-toggle-hide-functions :visible js2-mode-functions-hidden :help "Expand all hidden function bodies"))) (define-key map [menu-bar javascript hide-all-functions] (quote (menu-item "Hide function bodies" js2-mode-toggle-hide-functions :visible (not js2-mode-functions-hidden) :help "Show {...} for all top-level function bodies"))) map) nil "Keymap used in `js2-mode' buffers." nil [37546 41691]) ("js2-mode-identifier-re" variable nil "[a-zA-Z_$][a-zA-Z0-9_$]*" ((const . t)) nil nil [41693 41753]) ("js2-mode-//-comment-re" variable nil "^\\(\\s-*\\)//.+" nil "Matches a //-comment line.  Must be first non-whitespace on line.
First match-group is the leading whitespace." nil [41755 41920]) ("js2-mode-ast" variable nil nil nil "Private variable." nil [41922 41967]) ("make-variable-buffer-local" code nil [41968 42010]) ("js2-mode-hook" variable nil nil nil nil nil [42012 42038]) ("js2-mode-parse-timer" variable nil nil nil "Private variable." nil [42040 42093]) ("make-variable-buffer-local" code nil [42094 42144]) ("js2-mode-buffer-dirty-p" variable nil nil nil "Private variable." nil [42146 42202]) ("make-variable-buffer-local" code nil [42203 42256]) ("js2-mode-parsing" variable nil nil nil "Private variable." nil [42258 42307]) ("make-variable-buffer-local" code nil [42308 42354]) ("js2-mode-node-overlay" variable nil nil nil nil nil [42356 42390]) ("make-variable-buffer-local" code nil [42391 42442]) ("js2-mode-show-overlay" variable nil js2-mode-dev-mode-p nil "Debug:  Non-nil to highlight AST nodes on mouse-down." nil [42444 42552]) ("js2-mode-fontifications" variable nil nil nil "Private variable" nil [42554 42609]) ("make-variable-buffer-local" code nil [42610 42663]) ("js2-mode-deferred-properties" variable nil nil nil "Private variable" nil [42665 42725]) ("make-variable-buffer-local" code nil [42726 42784]) ("js2-imenu-recorder" variable nil nil nil "Private variable" nil [42786 42836]) ("make-variable-buffer-local" code nil [42837 42885]) ("js2-imenu-function-map" variable nil nil nil "Private variable" nil [42887 42941]) ("make-variable-buffer-local" code nil [42942 42994]) ("js2-paragraph-start" variable nil "\\(@[a-zA-Z]+\\>\\|$\\)" nil nil nil [42996 43052]) ("js2-syntactic-ws-start" variable nil "\\s \\|/[*/]\\|[
]\\|\\\\[
]\\|\\s!\\|<!--\\|^\\s-*-->" nil nil nil [43186 43282]) ("js2-syntactic-ws-end" variable nil "\\s \\|[
/]\\|\\s!" nil nil nil [43284 43339]) ("js2-syntactic-eol" variable nil (concat "\\s *\\(/\\*[^*
]*" "\\(\\*+[^*
/][^*
]*\\)*" "\\*+/\\s *\\)*" "\\(//\\|/\\*[^*
]*" "\\(\\*+[^*
/][^*
]*\\)*$" "\\|\\\\$\\|$\\)") nil "Copied from java-mode.  Needed for some cc-engine functions." nil [43341 43641]) ("js2-comment-prefix-regexp" variable nil "//+\\|\\**" nil nil nil [43643 43692]) ("js2-comment-start-skip" variable nil "\\(//+\\|/\\*+\\)\\s *" nil nil nil [43694 43752]) ("js2-mode-verbose-parse-p" variable nil js2-mode-dev-mode-p nil "Non-nil to emit status messages during parsing." nil [43754 43859]) ("js2-mode-functions-hidden" variable nil nil nil "private variable" nil [43861 43918]) ("js2-mode-comments-hidden" variable nil nil nil "private variable" nil [43919 43975]) ("js2-mode-syntax-table" variable nil (let ((table (make-syntax-table))) (c-populate-syntax-table table) table) nil "Syntax table used in js2-mode buffers." nil [43977 44134]) ("js2-mode-abbrev-table" variable nil nil nil "Abbrev table in use in `js2-mode' buffers." nil [44136 44217]) ("define-abbrev-table" code nil [44218 44265]) ("js2-mode-must-byte-compile" variable nil (not js2-mode-dev-mode-p) nil "Non-nil to have `js2-mode' signal an error if not byte-compiled." nil [44267 44397]) ("js2-mode-pending-parse-callbacks" variable nil nil nil "List of functions waiting to be notified that parse is finished." nil [44399 44513]) ("js2-mode-last-indented-line" variable nil -1 nil nil nil [44515 44554]) ("eval-when-compile" code nil [44556 44839]) ("eval-when-compile" code nil [44841 44943]) ("js2-vars" package nil nil nil [44945 44964]) ("eval-when-compile" code nil [45127 45162]) ("unless" code nil [45242 46476]) ("unless" code nil [46478 46940]) ("unless" code nil [46942 48094]) ("js2-delete-if" function nil ("predicate" "list") nil "Remove all items satisfying PREDICATE in LIST." nil [48204 48382]) ("js2-position" function nil ("element" "list") nil "Find 0-indexed position of ELEMENT in LIST comparing with `eq'.
Returns nil if element is not found in the list." nil [48384 48748]) ("js2-find-if" function nil ("predicate" "list") nil "Find first item satisfying PREDICATE in LIST." nil [48750 49006]) ("js2-time" function nil ("form") nil "Evaluate FORM, discard result, and return elapsed time in sec" nil [49033 49435]) ("def-edebug-spec" code nil [49437 49465]) ("neq" function nil ("expr1" "expr2") nil "Return (not (eq expr1 expr2))." nil [49467 49555]) ("js2-same-line" function nil ("pos") nil "Return t if POS is on the same line as current point." nil [49557 49708]) ("js2-same-line-2" function nil ("p1" "p2") nil "Return t if p1 is on the same line as p2." nil [49710 49851]) ("js2-code-bug" function nil nil nil "Signal an error when we encounter an unexpected code path." nil [49853 49968]) ("js2-record-parse-error" function nil ("msg" "&optional" "arg" "pos" "len") nil (push (list (list msg arg) (or pos js2-token-beg) (or len (- js2-token-end js2-token-beg))) js2-parsed-errors) nil [50098 50308]) ("js2-report-error" function nil ("msg" "&optional" "msg-arg" "pos" "len") nil "Signal a syntax error or record a parse error." nil [50310 50731]) ("js2-report-warning" function nil ("msg" "&optional" "msg-arg" "pos" "len") nil (if js2-compiler-report-warning-as-error (js2-report-error msg msg-arg pos len) (push (list (list msg msg-arg) (or pos js2-token-beg) (or len (- js2-token-end js2-token-beg))) js2-parsed-warnings)) nil [50733 51046]) ("js2-add-strict-warning" function nil ("msg-id" "&optional" "msg-arg" "beg" "end") nil (if js2-compiler-strict-mode (js2-report-warning msg-id msg-arg beg (and beg end (- end beg)))) nil [51048 51246]) ("put" code nil [51248 51333]) ("put" code nil [51334 51387]) ("put" code nil [51389 51471]) ("put" code nil [51472 51523]) ("js2-clear-flag" function nil ("flags" "flag") nil (\` (setq (\, flags) (logand (\, flags) (lognot (\, flag))))) nil [51525 51611]) ("js2-set-flag" function nil ("flags" "flag") nil "Logical-or FLAG into FLAGS." nil [51613 51720]) ("js2-flag-set-p" function nil ("flags" "flag") nil (/= 0 (logand flags flag)) nil [51722 51789]) ("js2-flag-not-set-p" function nil ("flags" "flag") nil (zerop (logand flags flag)) nil [51791 51863]) ("js2-with-unmodifying-text-property-changes" function nil ("&rest" "body") nil "Evaluate BODY without any text property changes modifying the buffer.
Any text properties changes happen as usual but the changes are not treated as
modifications to the buffer." nil [51917 52579]) ("put" code nil [52581 52654]) ("def-edebug-spec" code nil [52655 52717]) ("js2-with-underscore-as-word-syntax" function nil ("&rest" "body") nil "Evaluate BODY with the _ character set to be word-syntax." nil [52719 53125]) ("put" code nil [53127 53192]) ("def-edebug-spec" code nil [53193 53247]) ("with-buffer" function nil ("buf" "form") nil "Executes FORM in buffer BUF.
BUF can be a buffer name or a buffer object.
If the buffer doesn't exist, it's created." nil [53249 53575]) ("char-is-uppercase" function nil ("c") nil "Return t if C is an uppercase character.
Handles unicode and latin chars properly." nil [53577 53718]) ("char-is-lowercase" function nil ("c") nil "Return t if C is an uppercase character.
Handles unicode and latin chars properly." nil [53720 53859]) ("put" code nil [53861 53903]) ("def-edebug-spec" code nil [53904 53935]) ("js2-util" package nil nil nil [53937 53956]) ("eval-when-compile" code nil [54239 54274]) ("js2-tokens" variable nil nil nil "List of all defined token names." nil [54276 54336]) ("js2-token-names" variable nil (let* ((names (make-vector js2-num-tokens -1)) (case-fold-search nil) (syms (apropos-internal "^js2-\\(?:[A-Z_]+\\)"))) (loop for sym in syms for i from 0 do (unless (or (memq sym (quote (js2-EOF_CHAR js2-ERROR))) (not (boundp sym))) (aset names (symbol-value sym) (substring (symbol-name sym) 4)) (push sym js2-tokens))) names) nil "Vector mapping int values to token string names, sans `js2-' prefix." nil [54358 54972]) ("js2-token-name" function nil ("tok") nil "Return a string name for TOK, a token symbol or code.
Signals an error if it's not a recognized token." nil [54974 55415]) ("js2-token-sym" function nil ("tok") nil "Return symbol for TOK given its code, e.g. 'js2-LP for code 86." nil [55417 55547]) ("js2-token-codes" variable nil (let ((table (make-hash-table :test (quote eq) :size 256))) (loop for name across js2-token-names for sym = (intern (concat "js2-" name)) do (puthash sym (symbol-value sym) table)) (puthash (quote js2-DELETE) js2-DELPROP table) table) nil "Hashtable mapping token symbols to their bytecodes." nil [55549 55956]) ("js2-token-code" function nil ("sym") nil "Return code for token symbol SYM, e.g. 86 for 'js2-LP." nil [55958 56131]) ("js2-report-scan-error" function nil ("msg" "&optional" "no-throw" "beg" "len") nil (setq js2-token-end js2-ts-cursor) nil [56152 56437]) ("js2-get-string-from-buffer" function nil nil nil "Reverse the char accumulator and return it as a string." nil [56439 56666]) ("js2-add-to-string" function nil ("c") nil (push c js2-ts-string-buffer) nil [56770 56834]) ("js2-unget-char" function nil nil nil (decf js2-ts-cursor) nil [57110 57161]) ("js2-get-char" function nil nil nil "Read and return the next character from the input buffer.
Increments `js2-ts-lineno' if the return value is a newline char.
Updates `js2-ts-cursor' to the point after the returned char.
Returns `js2-EOF_CHAR' if we hit the end of the buffer.
Also updates `js2-ts-hit-eof' and `js2-ts-line-start' as needed." nil [57293 58142]) ("js2-read-unicode-escape" function nil nil nil "Read a \\uNNNN sequence from the input.
Assumes the ?and ?u have already been read.
Returns the unicode character, or nil if it wasn't a valid character.
Doesn't change the values of any scanner variables." nil [58144 58915]) ("js2-match-char" function nil ("test") nil "Consume and return next character if it matches TEST, a character.
Returns nil and consumes nothing if TEST is not the next character." nil [58917 59181]) ("js2-peek-char" function nil nil nil (prog1 (js2-get-char) (js2-unget-char)) nil [59183 59262]) ("js2-java-identifier-start-p" function nil ("c") nil (or (memq c (quote (36 95))) (char-is-uppercase c) (char-is-lowercase c)) nil [59264 59384]) ("js2-java-identifier-part-p" function nil ("c") nil "Implementation of java.lang.Character.isJavaIdentifierPart()" nil [59386 59658]) ("js2-alpha-p" function nil ("c") nil (if (<= c 90) (<= 65 c) (and (<= 97 c) (<= c 122))) nil [59660 59777]) ("js2-digit-p" function nil ("c") nil (and (<= 48 c) (<= c 57)) nil [59779 59833]) ("js2-js-space-p" function nil ("c") nil (if (<= c 127) (memq c (quote (32 9 12 11))) (or (eq c 160) nil)) nil [59835 60020]) ("js2-skip-line" function nil nil nil "Skip to end of line" nil [60022 60232]) ("js2-init-scanner" function nil ("&optional" "buf" "line") nil "Create token stream for BUF starting on LINE.
BUF defaults to current-buffer and line defaults to 1.

A buffer can only have one scanner active at a time, which yields
dramatically simpler code than using a defstruct.  If you need to
have simultaneous scanners in a buffer, copy the regions to scan
into temp buffers." nil [60234 61097]) ("js2-token-to-string" function nil ("token") nil (if (not js2-debug-print-trees) "" (let ((name (js2-token-name token))) (cond ((memq token (list js2-STRING js2-REGEXP js2-NAME)) (concat name " `" js2-ts-string "'")) ((eq token js2-NUMBER) (format "NUMBER %g" js2-ts-number)) (t name)))) nil [61290 61692]) ("js2-keywords" variable nil (quote (break case catch const continue debugger default delete do else enum false finally for function if in instanceof import let new null return switch this throw true try typeof var void while with yield)) ((const . t)) nil nil [61694 61974]) ("js2-kwd-tokens" variable nil (let ((table (make-vector js2-num-tokens nil)) (tokens (list js2-BREAK js2-CASE js2-CATCH js2-CONST js2-CONTINUE js2-DEBUGGER js2-DEFAULT js2-DELPROP js2-DO js2-ELSE js2-FALSE js2-FINALLY js2-FOR js2-FUNCTION js2-IF js2-IN js2-INSTANCEOF js2-IMPORT js2-LET js2-NEW js2-NULL js2-RETURN js2-SWITCH js2-THIS js2-THROW js2-TRUE js2-TRY js2-TYPEOF js2-VAR js2-WHILE js2-WITH js2-YIELD))) (dolist (i tokens) (aset table i (quote font-lock-keyword-face))) (aset table js2-STRING (quote font-lock-string-face)) (aset table js2-REGEXP (quote font-lock-string-face)) (aset table js2-COMMENT (quote font-lock-comment-face)) (aset table js2-THIS (quote font-lock-builtin-face)) (aset table js2-VOID (quote font-lock-constant-face)) (aset table js2-NULL (quote font-lock-constant-face)) (aset table js2-TRUE (quote font-lock-constant-face)) (aset table js2-FALSE (quote font-lock-constant-face)) table) ((const . t)) "Vector whose values are non-nil for tokens that are keywords.
The values are default faces to use for highlighting the keywords." nil [62108 63353]) ("js2-reserved-words" variable nil (quote (abstract boolean byte char class double enum extends final float goto implements int interface long native package private protected public short static super synchronized throws transient volatile)) ((const . t)) nil nil [63355 63639]) ("js2-keyword-names" variable nil (let ((table (make-hash-table :test (quote equal)))) (loop for k in js2-keywords do (puthash (symbol-name k) (intern (concat "js2-" (upcase (symbol-name k)))) table)) table) ((const . t)) "JavaScript keywords by name, mapped to their symbols." nil [63641 64043]) ("js2-reserved-word-names" variable nil (let ((table (make-hash-table :test (quote equal)))) (loop for k in js2-reserved-words do (puthash (symbol-name k) (quote js2-RESERVED) table)) table) ((const . t)) "JavaScript reserved words by name, mapped to 'js2-RESERVED." nil [64045 64310]) ("js2-collect-string" function nil ("buf") nil "Convert BUF, a list of chars, to a string.
Reverses BUF before converting." nil [64312 64576]) ("js2-string-to-keyword" function nil ("s") nil "Return token for S, a string, if S is a keyword or reserved word.
Returns a symbol such as 'js2-BREAK, or nil if not keyword/reserved." nil [64578 64829]) ("js2-ts-set-char-token-bounds" function nil nil nil "Used when next token is one character." nil [64831 64994]) ("js2-ts-return" function nil ("token") nil "Return an N-character TOKEN from `js2-get-token'.
Updates `js2-token-end' accordingly." nil [64996 65180]) ("js2-x-digit-to-int" function nil ("c" "accumulator") nil "Build up a hex number.
If C is a hexadecimal digit, return ACCUMULATOR * 16 plus
corresponding number.  Otherwise return -1." nil [65182 65794]) ("js2-get-token" function nil nil nil "Return next JavaScript token, an int such as js2-RETURN." nil [65796 83280]) ("js2-read-regexp" function nil ("start-token") nil "Called by parser when it gets / or /= in literal context." nil [83282 85124]) ("js2-get-first-xml-token" function nil nil nil (setq js2-ts-xml-open-tags-count 0 js2-ts-is-xml-attribute nil js2-ts-xml-is-tag-content nil) nil [85126 85318]) ("js2-xml-discard-string" function nil nil nil "Throw away the string in progress and flag an XML parse error." nil [85320 85530]) ("js2-get-next-xml-token" function nil nil nil (setq js2-ts-string-buffer nil js2-token-beg js2-ts-cursor) nil [85532 90550]) ("js2-read-quoted-string" function nil ("quote") nil (let (c) (catch (quote return) (while (/= (setq c (js2-get-char)) js2-EOF_CHAR) (js2-add-to-string c) (if (eq c quote) (throw (quote return) t))) (js2-xml-discard-string) nil)) nil [90552 90839]) ("js2-read-xml-comment" function nil nil nil (let ((c (js2-get-char))) (catch (quote return) (while (/= c js2-EOF_CHAR) (catch (quote continue) (js2-add-to-string c) (when (and (eq c 45) (eq 45 (js2-peek-char))) (setq c (js2-get-char)) (js2-add-to-string c) (if (eq (js2-peek-char) 62) (progn (setq c (js2-get-char)) (js2-add-to-string c) (throw (quote return) t)) (throw (quote continue) nil))) (setq c (js2-get-char)))) (js2-xml-discard-string) nil)) nil [90841 91444]) ("js2-read-cdata" function nil nil nil (let ((c (js2-get-char))) (catch (quote return) (while (/= c js2-EOF_CHAR) (catch (quote continue) (js2-add-to-string c) (when (and (eq c 93) (eq (js2-peek-char) 93)) (setq c (js2-get-char)) (js2-add-to-string c) (if (eq (js2-peek-char) 62) (progn (setq c (js2-get-char)) (js2-add-to-string c) (throw (quote return) t)) (throw (quote continue) nil))) (setq c (js2-get-char)))) (js2-xml-discard-string) nil)) nil [91446 92045]) ("js2-read-entity" function nil nil nil (let ((decl-tags 1) c) (catch (quote return) (while (/= js2-EOF_CHAR (setq c (js2-get-char))) (js2-add-to-string c) (case c (60 (incf decl-tags)) (62 (decf decl-tags) (if (zerop decl-tags) (throw (quote return) t))))) (js2-xml-discard-string) nil)) nil [92047 92424]) ("js2-read-PI" function nil nil nil "Scan an XML processing instruction." nil [92426 92807]) ("js2-scanner-get-line" function nil nil nil "Return the text of the current scan line." nil [92809 92937]) ("js2-scan" package nil nil nil [92939 92958]) ("js2-message-table" variable nil (make-hash-table :test (quote equal) :size 250) nil "Contains localized messages for js2-mode." nil [93430 93545]) ("js2-msg" function nil ("key" "&rest" "strings") nil (\` (puthash (\, key) (funcall (function concat) (\,@ strings)) js2-message-table)) nil [93599 93714]) ("js2-get-msg" function nil ("msg-key") nil "Look up a localized message.
MSG-KEY is a list of (MSG ARGS).  If the message takes parameters,
the correct number of ARGS must be provided." nil [93716 94105]) ("js2-msg" code nil [94137 94204]) ("js2-msg" code nil [94206 94287]) ("js2-msg" code nil [94289 94384]) ("js2-msg" code nil [94386 94499]) ("js2-msg" code nil [94501 94611]) ("js2-msg" code nil [94624 94697]) ("js2-msg" code nil [94699 94761]) ("js2-msg" code nil [94781 95026]) ("js2-msg" code nil [95028 95242]) ("js2-msg" code nil [95244 95327]) ("js2-msg" code nil [95329 95413]) ("js2-msg" code nil [95415 95504]) ("js2-msg" code nil [95506 95603]) ("js2-msg" code nil [95605 95692]) ("js2-msg" code nil [95694 95768]) ("js2-msg" code nil [95784 95865]) ("js2-msg" code nil [95867 95947]) ("js2-msg" code nil [95949 96093]) ("js2-msg" code nil [96095 96162]) ("js2-msg" code nil [96164 96241]) ("js2-msg" code nil [96243 96306]) ("js2-msg" code nil [96308 96370]) ("js2-msg" code nil [96372 96437]) ("js2-msg" code nil [96439 96525]) ("js2-msg" code nil [96543 96687]) ("js2-msg" code nil [96689 96879]) ("js2-msg" code nil [96881 97037]) ("js2-msg" code nil [97039 97123]) ("js2-msg" code nil [97139 97229]) ("js2-msg" code nil [97231 97305]) ("js2-msg" code nil [97325 97424]) ("js2-msg" code nil [97426 97528]) ("js2-msg" code nil [97546 97612]) ("js2-msg" code nil [97630 97681]) ("js2-msg" code nil [97683 97751]) ("js2-msg" code nil [97753 97810]) ("js2-msg" code nil [97812 97869]) ("js2-msg" code nil [97871 97920]) ("js2-msg" code nil [97922 97981]) ("js2-msg" code nil [97983 98042]) ("js2-msg" code nil [98044 98106]) ("js2-msg" code nil [98108 98172]) ("js2-msg" code nil [98174 98237]) ("js2-msg" code nil [98239 98309]) ("js2-msg" code nil [98311 98390]) ("js2-msg" code nil [98392 98460]) ("js2-msg" code nil [98462 98549]) ("js2-msg" code nil [98551 98713]) ("js2-msg" code nil [98725 98808]) ("js2-msg" code nil [98810 98883]) ("js2-msg" code nil [98885 98962]) ("js2-msg" code nil [98964 99042]) ("js2-msg" code nil [99044 99131]) ("js2-msg" code nil [99133 99210]) ("js2-msg" code nil [99212 99315]) ("js2-msg" code nil [99336 99389]) ("js2-msg" code nil [99391 99445]) ("js2-msg" code nil [99447 99530]) ("js2-msg" code nil [99532 99604]) ("js2-msg" code nil [99606 99702]) ("js2-msg" code nil [99704 99835]) ("js2-msg" code nil [99837 99916]) ("js2-msg" code nil [99918 99977]) ("js2-msg" code nil [99979 100060]) ("js2-msg" code nil [100062 100135]) ("js2-msg" code nil [100137 100213]) ("js2-msg" code nil [100215 100282]) ("js2-msg" code nil [100284 100356]) ("js2-msg" code nil [100358 100424]) ("js2-msg" code nil [100426 100491]) ("js2-msg" code nil [100493 100567]) ("js2-msg" code nil [100569 100651]) ("js2-msg" code nil [100653 100731]) ("js2-msg" code nil [100733 100803]) ("js2-msg" code nil [100805 100878]) ("js2-msg" code nil [100880 100957]) ("js2-msg" code nil [100959 101041]) ("js2-msg" code nil [101043 101116]) ("js2-msg" code nil [101118 101180]) ("js2-msg" code nil [101182 101254]) ("js2-msg" code nil [101256 101349]) ("js2-msg" code nil [101351 101422]) ("js2-msg" code nil [101424 101483]) ("js2-msg" code nil [101485 101560]) ("js2-msg" code nil [101562 101640]) ("js2-msg" code nil [101642 101707]) ("js2-msg" code nil [101709 101786]) ("js2-msg" code nil [101788 101867]) ("js2-msg" code nil [101869 101953]) ("js2-msg" code nil [101955 102020]) ("js2-msg" code nil [102022 102091]) ("js2-msg" code nil [102093 102162]) ("js2-msg" code nil [102164 102216]) ("js2-msg" code nil [102218 102291]) ("js2-msg" code nil [102293 102343]) ("js2-msg" code nil [102345 102401]) ("js2-msg" code nil [102403 102474]) ("js2-msg" code nil [102476 102552]) ("js2-msg" code nil [102554 102623]) ("js2-msg" code nil [102625 102695]) ("js2-msg" code nil [102697 102752]) ("js2-msg" code nil [102754 102822]) ("js2-msg" code nil [102824 102894]) ("js2-msg" code nil [102896 102958]) ("js2-msg" code nil [102960 103028]) ("js2-msg" code nil [103030 103110]) ("js2-msg" code nil [103112 103182]) ("js2-msg" code nil [103184 103293]) ("js2-msg" code nil [103295 103363]) ("js2-msg" code nil [103365 103447]) ("js2-msg" code nil [103449 103530]) ("js2-msg" code nil [103532 103617]) ("js2-msg" code nil [103619 103716]) ("js2-msg" code nil [103718 103817]) ("js2-msg" code nil [103819 103914]) ("js2-msg" code nil [103916 104021]) ("js2-msg" code nil [104023 104069]) ("js2-msg" code nil [104071 104135]) ("js2-msg" code nil [104137 104204]) ("js2-msg" code nil [104206 104276]) ("js2-msg" code nil [104278 104363]) ("js2-msg" code nil [104365 104432]) ("js2-msg" code nil [104434 104543]) ("js2-msg" code nil [104545 104649]) ("js2-msg" code nil [104651 104808]) ("js2-msg" code nil [104810 104877]) ("js2-msg" code nil [104879 104968]) ("js2-msg" code nil [104987 105049]) ("js2-msg" code nil [105051 105117]) ("js2-msg" code nil [105119 105204]) ("js2-msg" code nil [105206 105288]) ("js2-msg" code nil [105290 105372]) ("js2-msg" code nil [105374 105438]) ("js2-msg" code nil [105440 105515]) ("js2-msg" code nil [105517 105603]) ("js2-msg" code nil [105605 105709]) ("js2-msg" code nil [105711 105786]) ("js2-msg" code nil [105788 105869]) ("js2-msg" code nil [105871 105939]) ("js2-msg" code nil [105941 106003]) ("js2-msg" code nil [106005 106081]) ("js2-msg" code nil [106083 106165]) ("js2-msg" code nil [106167 106245]) ("js2-msg" code nil [106247 106321]) ("js2-msg" code nil [106323 106386]) ("js2-msg" code nil [106388 106460]) ("js2-msg" code nil [106462 106589]) ("js2-msg" code nil [106591 106661]) ("js2-msg" code nil [106663 106749]) ("js2-msg" code nil [106751 106818]) ("js2-msg" code nil [106820 106907]) ("js2-msg" code nil [106909 107001]) ("js2-msg" code nil [107003 107165]) ("js2-msg" code nil [107167 107265]) ("js2-msg" code nil [107267 107353]) ("js2-msg" code nil [107355 107451]) ("js2-msg" code nil [107453 107507]) ("js2-msg" code nil [107529 107607]) ("js2-msg" code nil [107609 107713]) ("js2-msg" code nil [107715 107867]) ("js2-msg" code nil [107869 107977]) ("js2-msg" code nil [107979 108141]) ("js2-msg" code nil [108143 108275]) ("js2-msg" code nil [108277 108377]) ("js2-msg" code nil [108379 108457]) ("js2-msg" code nil [108459 108585]) ("js2-msg" code nil [108587 108667]) ("js2-msg" code nil [108669 108775]) ("js2-msg" code nil [108777 108866]) ("js2-msg" code nil [108868 108958]) ("js2-msg" code nil [108960 109043]) ("js2-msg" code nil [109045 109136]) ("js2-msg" code nil [109138 109227]) ("js2-msg" code nil [109229 109308]) ("js2-msg" code nil [109325 109385]) ("js2-msg" code nil [109387 109444]) ("js2-msg" code nil [109446 109524]) ("js2-msg" code nil [109526 109594]) ("js2-msg" code nil [109596 109682]) ("js2-msg" code nil [109684 109764]) ("js2-msg" code nil [109766 109824]) ("js2-msg" code nil [109826 109888]) ("js2-msg" code nil [109890 109963]) ("js2-msg" code nil [109965 110105]) ("js2-msg" code nil [110132 110255]) ("js2-msg" code nil [110257 110396]) ("js2-msg" code nil [110398 110487]) ("js2-msg" code nil [110499 110569]) ("js2-msg" code nil [110581 110677]) ("js2-msg" code nil [110686 110744]) ("js2-msg" code nil [110756 110823]) ("js2-msg" code nil [110844 110926]) ("js2-msg" code nil [110928 110999]) ("js2-msg" code nil [111001 111106]) ("js2-msg" code nil [111123 111192]) ("js2-messages" package nil nil nil [111194 111217]) ("cl" include nil nil nil [111393 111406]) ("js2-property-flag" variable nil 1 nil "property access: element is valid name" nil [111479 111553]) ("js2-attribute-flag" variable nil 2 nil "x.@y or x..@y" nil [111554 111603]) ("js2-descendants-flag" variable nil 4 nil "x..y or x..@i" nil [111604 111653]) ("js2-relpos" function nil ("pos" "anchor") nil "Convert POS to be relative to ANCHOR.
If POS is nil, returns nil." nil [111655 111786]) ("js2-make-pad" function nil ("indent") nil (if (zerop indent) "" (make-string (* indent js2-basic-offset) 32)) nil [111788 111900]) ("js2-visit-ast" function nil ("node" "callback") nil "Visit every node in ast NODE with visitor CALLBACK.

CALLBACK is a function that takes two arguments:  (NODE END-P).  It is
called twice:  once to visit the node, and again after all the node's
children have been processed.  The END-P argument is nil on the first
call and non-nil on the second call.  The return value of the callback
affects the traversal:  if non-nil, the children of NODE are processed.
If the callback returns nil, or if the node has no children, then the
callback is called immediately with a non-nil END-P argument.

The node traversal is approximately lexical-order, although there
are currently no guarantees around this." nil [111902 113239]) ("js2-node" type "struct" ("\"Base AST node type.\"" "type" "pos" "len" "props" "parent") nil nil (pos -1) nil [113241 113532]) ("js2-node-get-prop" function nil ("node" "prop" "&optional" "default") nil (or (cadr (assoc prop (js2-node-props node))) default) nil [113574 113689]) ("js2-node-set-prop" function nil ("node" "prop" "value") nil (setf (js2-node-props node) (cons (list prop value) (js2-node-props node))) nil [113691 113823]) ("js2-fixup-starts" function nil ("n" "nodes") nil "Adjust the start positions of NODES to be relative to N.
Any node in the list may be nil, for convenience." nil [113825 114122]) ("js2-node-add-children" function nil ("parent" "&rest" "nodes") nil "Set parent node of NODES to PARENT, and return PARENT.
Does nothing if we're not recording parent links.
If any given node in NODES is nil, doesn't record that link." nil [114124 114466]) ("js2-node-abs-pos" function nil ("n") nil (let ((pos (js2-node-pos n))) (while (setq n (js2-node-parent n)) (setq pos (+ pos (js2-node-pos n)))) pos) nil [114534 114689]) ("js2-node-abs-end" function nil ("n") nil "Return absolute buffer position of end of N." nil [114691 114815]) ("js2-block-node" type "struct" ("\"A block of statements.\"" "kids") nil nil nil nil [115059 115498]) ("put" code nil [115544 115605]) ("put" code nil [115606 115667]) ("js2-visit-block" function nil ("ast" "callback") nil "Visit the `js2-block-node' children of AST." nil [115669 115834]) ("js2-print-block" function nil ("n" "i") nil (let ((pad (js2-make-pad i))) (insert pad "{
") (dolist (kid (js2-block-node-kids n)) (js2-print-ast kid (1+ i))) (insert pad "}")) nil [115836 116018]) ("js2-scope" type "struct" ("symbol-table" "parent-scope" "top") nil nil top nil [116020 116827]) ("put" code nil [116880 116935]) ("put" code nil [116936 116991]) ("js2-scope-set-parent-scope" function nil ("scope" "parent") nil (setf (js2-scope-parent-scope scope) parent (js2-scope-top scope) (if (null parent) scope (js2-scope-top parent))) nil [116993 117233]) ("js2-node-get-enclosing-scope" function nil ("node") nil "Return the innermost `js2-scope' node surrounding NODE.
Returns nil if there is no enclosing scope node." nil [117235 117524]) ("js2-get-defining-scope" function nil ("scope" "name") nil "Search up scope chain from SCOPE looking for NAME, a string or symbol.
Returns `js2-scope' in which NAME is defined, or nil if not found." nil [117526 118096]) ("js2-scope-get-symbol" function nil ("scope" "name") nil "Return symbol table entry for NAME in SCOPE.
NAME can be a string or symbol.   Returns a `js2-symbol' or nil if not found." nil [118098 118458]) ("js2-scope-put-symbol" function nil ("scope" "name" "symbol") nil "Enter SYMBOL into symbol-table for SCOPE under NAME.
NAME can be a lisp symbol or string.  SYMBOL is a `js2-symbol'." nil [118460 118889]) ("js2-symbol" type "struct" ("\"A symbol table entry.\"" "decl-type" "name" "ast-node") nil nil name nil [118891 119178]) ("js2-error-node" type "struct" ("\"AST node representing a parse error.\"") nil nil nil nil [119195 119558]) ("put" code nil [119560 119620]) ("put" code nil [119621 119681]) ("js2-script-node" type "struct" ("functions" "regexps" "symbols" "param-count" "var-names" "consts" "temp-number") nil nil symbols nil [119683 120374]) ("put" code nil [120409 120471]) ("put" code nil [120472 120535]) ("js2-print-script" function nil ("node" "indent") nil (dolist (kid (js2-block-node-kids node)) (js2-print-ast kid indent)) nil [120537 120650]) ("js2-ast-root" type "struct" ("\"The root node of a js2 AST.\"" "buffer" "comments" "errors" "warnings" "node-count") nil nil comments nil [120652 121308]) ("put" code nil [121363 121425]) ("put" code nil [121426 121486]) ("js2-visit-ast-root" function nil ("ast" "callback") nil (dolist (kid (js2-ast-root-kids ast)) (js2-visit-ast kid callback)) nil [121488 121689]) ("js2-comment-node" type "struct" ("format") nil nil nil nil [121691 122083]) ("put" code nil [122119 122181]) ("put" code nil [122182 122247]) ("js2-print-comment" function nil ("n" "i") nil (insert (js2-make-pad i) (js2-node-string n)) nil [122249 122461]) ("js2-expr-stmt-node" type "struct" ("\"An expression statement.\"" "expr") nil nil nil nil [122463 122870]) ("js2-expr-stmt-node-set-has-result" function nil ("node") nil "Change the node type to `js2-EXPR_RESULT'.  Used for code generation." nil [122872 123043]) ("put" code nil [123045 123119]) ("put" code nil [123120 123194]) ("js2-visit-expr-stmt-node" function nil ("n" "v") nil (js2-visit-ast (js2-expr-stmt-node-expr n) v) nil [123196 123282]) ("js2-print-expr-stmt-node" function nil ("n" "indent") nil (js2-print-ast (js2-expr-stmt-node-expr n) indent) nil [123284 123397]) ("js2-loop-node" type "struct" ("\"Abstract supertype of loop nodes.\"" "body" "lp" "rp") nil nil lp nil [123399 123619]) ("js2-do-node" type "struct" ("\"AST node for do-loop.\"" "condition" "while-pos") nil nil while-pos nil [123669 124297]) ("put" code nil [124336 124396]) ("put" code nil [124397 124457]) ("js2-visit-do-node" function nil ("n" "v") nil (js2-visit-ast (js2-do-node-body n) v) nil [124459 124577]) ("js2-print-do-node" function nil ("n" "i") nil (let ((pad (js2-make-pad i))) (insert pad "do {
") (dolist (kid (js2-block-node-kids (js2-do-node-body n))) (js2-print-ast kid (1+ i))) (insert pad "} while (") (js2-print-ast (js2-do-node-condition n) 0) (insert ");
")) nil [124579 124861]) ("js2-while-node" type "struct" ("\"AST node for while-loop.\"" "condition") nil nil nil nil [124863 125428]) ("put" code nil [125451 125517]) ("put" code nil [125518 125584]) ("js2-visit-while-node" function nil ("n" "v") nil (js2-visit-ast (js2-while-node-condition n) v) nil [125586 125713]) ("js2-print-while-node" function nil ("n" "i") nil (let ((pad (js2-make-pad i))) (insert pad "while (") (js2-print-ast (js2-while-node-condition n) 0) (insert ") {
") (js2-print-body (js2-while-node-body n) (1+ i)) (insert pad "}
")) nil [125715 125956]) ("js2-for-node" type "struct" ("\"AST node for a C-style for-loop.\"" "init" "condition" "update") nil nil condition nil [125958 126693]) ("put" code nil [126714 126776]) ("put" code nil [126777 126839]) ("js2-visit-for-node" function nil ("n" "v") nil (js2-visit-ast (js2-for-node-init n) v) nil [126841 127048]) ("js2-print-for-node" function nil ("n" "i") nil (let ((pad (js2-make-pad i))) (insert pad "for (") (js2-print-ast (js2-for-node-init n) 0) (insert "; ") (js2-print-ast (js2-for-node-condition n) 0) (insert "; ") (js2-print-ast (js2-for-node-update n) 0) (insert ") {
") (js2-print-body (js2-for-node-body n) (1+ i)) (insert pad "}
")) nil [127050 127409]) ("js2-for-in-node" type "struct" ("\"AST node for a for..in loop.\"" "iterator" "object" "in-pos" "each-pos" "foreach-p") nil nil object nil [127411 128417]) ("put" code nil [128447 128515]) ("put" code nil [128516 128584]) ("js2-visit-for-in-node" function nil ("n" "v") nil (js2-visit-ast (js2-for-in-node-iterator n) v) nil [128586 128762]) ("js2-print-for-in-node" function nil ("n" "i") nil (let ((pad (js2-make-pad i)) (foreach (js2-for-in-node-foreach-p n))) (insert pad "for ") (if foreach (insert "each ")) (insert "(") (js2-print-ast (js2-for-in-node-iterator n) 0) (insert " in ") (js2-print-ast (js2-for-in-node-object n) 0) (insert ") {
") (js2-print-body (js2-for-in-node-body n) (1+ i)) (insert pad "}
")) nil [128764 129180]) ("js2-return-node" type "struct" ("\"AST node for a return statement.\"" "retval") nil nil nil nil [129182 129583]) ("put" code nil [129624 129692]) ("put" code nil [129693 129761]) ("js2-visit-return-node" function nil ("n" "v") nil (if (js2-return-node-retval n) (js2-visit-ast (js2-return-node-retval n) v)) nil [129763 129883]) ("js2-print-return-node" function nil ("n" "i") nil (insert (js2-make-pad i) "return") nil [129885 130076]) ("js2-if-node" type "struct" ("\"AST node for an if-statement.\"" "condition" "then-part" "else-pos" "else-part" "lp" "rp") nil nil then-part nil [130078 130951]) ("put" code nil [131003 131063]) ("put" code nil [131064 131124]) ("js2-visit-if-node" function nil ("n" "v") nil (js2-visit-ast (js2-if-node-condition n) v) nil [131126 131332]) ("js2-print-if-node" function nil ("n" "i") nil (let ((pad (js2-make-pad i)) (then-part (js2-if-node-then-part n)) (else-part (js2-if-node-else-part n))) (insert pad "if (") (js2-print-ast (js2-if-node-condition n) 0) (insert ") {
") (js2-print-body then-part (1+ i)) (insert pad "}") (cond ((not else-part) (insert "
")) ((js2-if-node-p else-part) (insert " else ") (js2-print-body else-part i)) (t (insert " else {
") (js2-print-body else-part (1+ i)) (insert pad "}
")))) nil [131334 131889]) ("js2-try-node" type "struct" ("\"AST node for a try-statement.\"" "try-block" "catch-clauses" "finally-block") nil nil catch-clauses nil [131891 132472]) ("put" code nil [132497 132559]) ("put" code nil [132560 132622]) ("js2-visit-try-node" function nil ("n" "v") nil (js2-visit-ast (js2-try-node-try-block n) v) nil [132624 132876]) ("js2-print-try-node" function nil ("n" "i") nil (let ((pad (js2-make-pad i)) (catches (js2-try-node-catch-clauses n)) (finally (js2-try-node-finally-block n))) (insert pad "try {
") (js2-print-body (js2-try-node-try-block n) (1+ i)) (insert pad "}") (when catches (dolist (catch catches) (js2-print-ast catch i))) (if finally (js2-print-ast finally i) (insert "
"))) nil [132878 133297]) ("js2-catch-node" type "struct" ("\"AST node for a catch clause.\"" "var-name" "guard-kwd" "guard-expr" "block" "lp" "rp") nil nil guard-kwd nil [133299 134241]) ("put" code nil [134300 134366]) ("put" code nil [134367 134433]) ("js2-visit-catch-node" function nil ("n" "v") nil (js2-visit-ast (js2-catch-node-var-name n) v) nil [134435 134652]) ("js2-print-catch-node" function nil ("n" "i") nil (let ((pad (js2-make-pad i)) (guard-kwd (js2-catch-node-guard-kwd n)) (guard-expr (js2-catch-node-guard-expr n))) (insert " catch (") (js2-print-ast (js2-catch-node-var-name n) 0) (when guard-kwd (insert " if ") (js2-print-ast guard-expr 0)) (insert ") {
") (js2-print-body (js2-catch-node-block n) (1+ i)) (insert pad "}")) nil [134654 135068]) ("js2-finally-node" type "struct" ("\"AST node for a finally clause.\"" "body") nil nil nil nil [135070 135471]) ("put" code nil [135524 135594]) ("put" code nil [135595 135665]) ("js2-visit-finally-node" function nil ("n" "v") nil (js2-visit-ast (js2-finally-node-body n) v) nil [135667 135749]) ("js2-print-finally-node" function nil ("n" "i") nil (let ((pad (js2-make-pad i))) (insert " finally {
") (js2-print-body (js2-finally-node-body n) (1+ i)) (insert pad "}
")) nil [135751 135925]) ("js2-switch-node" type "struct" ("\"AST node for a switch statement.\"" "discriminant" "cases" "lp" "rp") nil nil cases nil [135927 136661]) ("put" code nil [136725 136793]) ("put" code nil [136794 136862]) ("js2-visit-switch-node" function nil ("n" "v") nil (js2-visit-ast (js2-switch-node-discriminant n) v) nil [136864 137017]) ("js2-print-switch-node" function nil ("n" "i") nil (let ((pad (js2-make-pad i)) (cases (js2-switch-node-cases n))) (insert pad "switch (") (js2-print-ast (js2-switch-node-discriminant n) 0) (insert ") {
") (dolist (case cases) (js2-print-ast case i)) (insert pad "}
")) nil [137019 137311]) ("js2-case-node" type "struct" ("\"AST node for a case clause of a switch statement.\"" "expr") nil nil nil nil [137313 137777]) ("put" code nil [137821 137885]) ("put" code nil [137886 137950]) ("js2-visit-case-node" function nil ("n" "v") nil (if (js2-case-node-expr n) (js2-visit-ast (js2-case-node-expr n) v)) nil [137952 138111]) ("js2-print-case-node" function nil ("n" "i") nil (let ((pad (js2-make-pad i)) (expr (js2-case-node-expr n))) (insert pad) (if (null expr) (insert "default:
") (insert "case ") (js2-print-ast expr 0) (insert ":
")) (dolist (kid (js2-case-node-kids n)) (js2-print-ast kid (1+ i)))) nil [138113 138433]) ("js2-throw-node" type "struct" ("\"AST node for a throw statement.\"" "expr") nil nil nil nil [138435 138825]) ("put" code nil [138855 138921]) ("put" code nil [138922 138988]) ("js2-visit-throw-node" function nil ("n" "v") nil (js2-visit-ast (js2-throw-node-expr n) v) nil [138990 139068]) ("js2-print-throw-node" function nil ("n" "i") nil (insert (js2-make-pad i) "throw ") nil [139070 139202]) ("js2-with-node" type "struct" ("\"AST node for a with-statement.\"" "object" "body" "lp" "rp") nil nil body nil [139204 139837]) ("put" code nil [139904 139968]) ("put" code nil [139969 140033]) ("js2-visit-with-node" function nil ("n" "v") nil (js2-visit-ast (js2-with-node-object n) v) nil [140035 140156]) ("js2-print-with-node" function nil ("n" "i") nil (let ((pad (js2-make-pad i))) (insert pad "with (") (js2-print-ast (js2-with-node-object n) 0) (insert ") {
") (js2-print-body (js2-with-node-body n) (1+ i)) (insert pad "}
")) nil [140158 140392]) ("js2-label-node" type "struct" ("\"AST node for a statement label or case label.\"" "name" "loop") nil nil loop nil [140394 140818]) ("put" code nil [140876 140936]) ("put" code nil [140937 140998]) ("js2-print-label" function nil ("n" "i") nil (insert (js2-make-pad i) (js2-label-node-name n) ":
") nil [141000 141107]) ("js2-labeled-stmt-node" type "struct" ("\"AST node for a statement with one or more labels.
Multiple labels for a statement are collapsed into the labels field.\"" "labels" "stmt") nil nil stmt nil [141109 141880]) ("put" code nil [141921 141996]) ("put" code nil [141997 142072]) ("js2-get-label-by-name" function nil ("lbl-stmt" "name") nil "Return a `js2-label-node' by NAME from LBL-STMT's labels list.
Returns nil if no such label is in the list." nil [142074 142511]) ("js2-visit-labeled-stmt" function nil ("n" "v") nil (dolist (label (js2-labeled-stmt-node-labels n)) (js2-visit-ast label v)) nil [142513 142680]) ("js2-print-labeled-stmt" function nil ("n" "i") nil (dolist (label (js2-labeled-stmt-node-labels n)) (js2-print-ast label i)) nil [142682 142854]) ("js2-labeled-stmt-node-contains" function nil ("node" "label") nil "Return t if NODE contains LABEL in its label set.
NODE is a `js2-labels-node'.  LABEL is an identifier." nil [142856 143168]) ("js2-labeled-stmt-node-add-label" function nil ("node" "label") nil "Add a `js2-label-node' to the label set for this statement." nil [143170 143399]) ("js2-jump-node" type "struct" ("\"Abstract supertype of break and continue nodes.\"" "label" "target") nil nil target nil [143401 143625]) ("js2-visit-jump-node" function nil ("n" "v") nil (if (js2-jump-node-label n) (js2-visit-ast (js2-jump-node-label n) v)) nil [143677 143844]) ("js2-break-node" type "struct" ("\"AST node for a break statement.
The label field is a `js2-name-node', possibly nil, for the named label
if provided.  E.g. in 'break foo', it represents 'foo'.  The target field
is the target of the break - a label node or enclosing loop/switch statement.\"") nil nil nil nil [143846 144518]) ("put" code nil [144520 144585]) ("put" code nil [144586 144652]) ("js2-print-break-node" function nil ("n" "i") nil (insert (js2-make-pad i) "break") nil [144654 144839]) ("js2-continue-node" type "struct" ("\"AST node for a continue statement.
The label field is the user-supplied enclosing label name, a `js2-name-node'.
It is nil if continue specifies no label.  The target field is the jump target:
a `js2-label-node' or the innermost enclosing loop.\"") nil nil nil nil [144841 145523]) ("put" code nil [145525 145593]) ("put" code nil [145594 145666]) ("js2-print-continue-node" function nil ("n" "i") nil (insert (js2-make-pad i) "continue") nil [145668 145865]) ("js2-function-node" type "struct" ("\"AST node for a function declaration.
The `params' field is a lisp list of nodes.  Each node is either a simple
`js2-name-node', or if it's a destructuring-assignment parameter, a
`js2-array-node' or `js2-object-node'.\"" "ftype" "form" "name" "params" "body" "lp" "rp" "ignore-dynamic" "needs-activation" "is-generator" "member-expr") nil nil form nil [145867 147539]) ("put" code nil [147585 147657]) ("put" code nil [147658 147730]) ("js2-visit-function-node" function nil ("n" "v") nil (if (js2-function-node-name n) (js2-visit-ast (js2-function-node-name n) v)) nil [147732 147969]) ("js2-print-function-node" function nil ("n" "i") nil (let ((pad (js2-make-pad i)) (getter (js2-node-get-prop n (quote GETTER_SETTER))) (name (js2-function-node-name n)) (params (js2-function-node-params n)) (body (js2-function-node-body n)) (expr (eq (js2-function-node-form n) (quote FUNCTION_EXPRESSION)))) (unless getter (insert pad "function")) (when name (insert " ") (js2-print-ast name 0)) (insert "(") (loop with len = (length params) for param in params for count from 1 do (js2-print-ast param 0) (if (< count len) (insert ", "))) (insert ") {") (unless expr (insert "
")) (js2-print-body body (1+ i)) (insert pad "}") (unless expr (insert "
"))) nil [147971 148835]) ("js2-function-name" function nil ("node") nil "Return function name for NODE, a `js2-function-node', or nil if anonymous." nil [148837 149047]) ("js2-var-decl-node" type "struct" ("\"AST node for a variable declaration list (VAR, CONST or LET).
The node bounds differ depending on the declaration type.  For VAR or
CONST declarations, the bounds include the var/const keyword.  For LET
declarations, the node begins at the position of the first child.\"" "kids" "decl-type") nil nil decl-type nil [149406 150176]) ("put" code nil [150211 150278]) ("put" code nil [150279 150346]) ("js2-visit-var-decl" function nil ("n" "v") nil (dolist (kid (js2-var-decl-node-kids n)) (js2-visit-ast kid v)) nil [150348 150450]) ("js2-print-var-decl" function nil ("n" "i") nil (let ((pad (js2-make-pad i)) (tt (js2-var-decl-node-decl-type n))) (insert pad) (insert (cond ((= tt js2-VAR) "var ") ((= tt js2-LET) "") ((= tt js2-CONST) "const ") (t (error "malformed var-decl node")))) (loop with kids = (js2-var-decl-node-kids n) with len = (length kids) for kid in kids for count from 1 do (js2-print-ast kid 0) (if (< count len) (insert ", ")))) nil [150452 151052]) ("js2-var-init-node" type "struct" ("\"AST node for a variable declaration.
The type field will be js2-CONST for a const decl.\"" "target" "initializer") nil nil initializer nil [151054 151663]) ("put" code nil [151705 151777]) ("put" code nil [151778 151850]) ("js2-visit-var-init-node" function nil ("n" "v") nil (js2-visit-ast (js2-var-init-node-target n) v) nil [151852 152037]) ("js2-print-var-init-node" function nil ("n" "i") nil (let ((pad (js2-make-pad i)) (name (js2-var-init-node-target n)) (init (js2-var-init-node-initializer n))) (insert pad) (js2-print-ast name 0) (when init (insert " = ") (js2-print-ast init 0))) nil [152039 152312]) ("js2-cond-node" type "struct" ("\"AST node for the ternary operator\"" "test-expr" "true-expr" "false-expr" "q-pos" "c-pos") nil nil true-expr nil [152314 153013]) ("put" code nil [153039 153103]) ("put" code nil [153104 153168]) ("js2-visit-cond-node" function nil ("n" "v") nil (js2-visit-ast (js2-cond-node-test-expr n) v) nil [153170 153348]) ("js2-print-cond-node" function nil ("n" "i") nil (let ((pad (js2-make-pad i))) (insert pad) (js2-print-ast (js2-cond-node-test-expr n) 0) (insert " ? ") (js2-print-ast (js2-cond-node-true-expr n) 0) (insert " : ") (js2-print-ast (js2-cond-node-false-expr n) 0)) nil [153350 153622]) ("js2-infix-node" type "struct" ("\"Represents infix expressions.
Includes assignment ops like `|=', and the comma operator.
The type field inherited from `js2-node' holds the operator.\"" "op-pos" "left" "right") nil nil left nil [153624 154319]) ("put" code nil [154341 154407]) ("put" code nil [154408 154474]) ("js2-visit-infix-node" function nil ("n" "v") nil (when (js2-infix-node-left n) (js2-visit-ast (js2-infix-node-left n) v)) nil [154476 154670]) ("js2-operator-tokens" variable nil (let ((table (make-hash-table :test (quote eq))) (tokens (list (cons js2-IN "in") (cons js2-TYPEOF "typeof") (cons js2-INSTANCEOF "instanceof") (cons js2-DELPROP "delete") (cons js2-COMMA ",") (cons js2-COLON ":") (cons js2-OR "||") (cons js2-AND "&&") (cons js2-INC "++") (cons js2-DEC "--") (cons js2-BITOR "|") (cons js2-BITXOR "^") (cons js2-BITAND "&") (cons js2-EQ "==") (cons js2-NE "!=") (cons js2-LT "<") (cons js2-LE "<=") (cons js2-GT ">") (cons js2-GE ">=") (cons js2-LSH "<<") (cons js2-RSH ">>") (cons js2-URSH ">>>") (cons js2-ADD "+") (cons js2-SUB "-") (cons js2-MUL "*") (cons js2-DIV "/") (cons js2-MOD "%") (cons js2-NOT "!") (cons js2-BITNOT "~") (cons js2-POS "+") (cons js2-NEG "-") (cons js2-SHEQ "===") (cons js2-SHNE "!==") (cons js2-ASSIGN "=") (cons js2-ASSIGN_BITOR "|=") (cons js2-ASSIGN_BITXOR "^=") (cons js2-ASSIGN_BITAND "&=") (cons js2-ASSIGN_LSH "<<=") (cons js2-ASSIGN_RSH ">>=") (cons js2-ASSIGN_URSH ">>>=") (cons js2-ASSIGN_ADD "+=") (cons js2-ASSIGN_SUB "-=") (cons js2-ASSIGN_MUL "*=") (cons js2-ASSIGN_DIV "/=") (cons js2-ASSIGN_MOD "%=")))) (loop for (k . v) in tokens do (puthash k v table)) table) ((const . t)) nil nil [154672 156660]) ("js2-print-infix-node" function nil ("n" "i") nil (let* ((tt (js2-node-type n)) (op (gethash tt js2-operator-tokens))) (unless op (error "unrecognized infix operator %s" (js2-node-type n))) (insert (js2-make-pad i)) (js2-print-ast (js2-infix-node-left n) 0) (unless (= tt js2-COMMA) (insert " ")) (insert op) (insert " ") (js2-print-ast (js2-infix-node-right n) 0)) nil [156662 157063]) ("js2-assign-node" type "struct" ("\"Represents any assignment.
The type field holds the actual assignment operator.\"") nil nil nil nil [157065 157614]) ("put" code nil [157616 157683]) ("put" code nil [157684 157751]) ("js2-unary-node" type "struct" ("\"AST node type for unary operator nodes.
The type field can be NOT, BITNOT, POS, NEG, INC, DEC,
TYPEOF, or DELPROP.  For INC or DEC, a 'postfix node
property is added if the operator follows the operand.\"" "operand") nil nil nil nil [157753 158319]) ("put" code nil [158348 158414]) ("put" code nil [158415 158481]) ("js2-visit-unary-node" function nil ("n" "v") nil (js2-visit-ast (js2-unary-node-operand n) v) nil [158483 158564]) ("js2-print-unary-node" function nil ("n" "i") nil (let* ((tt (js2-node-type n)) (op (gethash tt js2-operator-tokens)) (postfix (js2-node-get-prop n (quote postfix)))) (unless op (error "unrecognized unary operator %s" tt)) (insert (js2-make-pad i)) (unless postfix (insert op)) (if (or (= tt js2-TYPEOF) (= tt js2-DELPROP)) (insert " ")) (js2-print-ast (js2-unary-node-operand n) 0) (when postfix (insert op))) nil [158566 159036]) ("js2-let-node" type "struct" ("\"AST node for a let expression or a let statement.
Note that a let declaration such as let x=6, y=7 is a `js2-var-decl-node'.\"" "vars" "body" "lp" "rp") nil nil body nil [159038 159777]) ("put" code nil [159779 159841]) ("put" code nil [159842 159904]) ("js2-visit-let-node" function nil ("n" "v") nil (when (js2-let-node-vars n) (js2-visit-ast (js2-let-node-vars n) v)) nil [159906 160088]) ("js2-print-let-node" function nil ("n" "i") nil (insert (js2-make-pad i) "let (") nil [160090 160258]) ("js2-keyword-node" type "struct" ("\"AST node representing a literal keyword such as `null'.
Used for `null', `this', `true', `false' and `debugger'.
The node type is set to js2-NULL, js2-THIS, etc.\"") nil nil nil nil [160260 160736]) ("put" code nil [160738 160800]) ("put" code nil [160801 160871]) ("js2-print-keyword-node" function nil ("n" "i") nil (insert (js2-make-pad i) (let ((tt (js2-node-type n))) (cond ((= tt (quote js2-THIS)) "this") ((= tt (quote js2-NULL)) "null") ((= tt (quote js2-TRUE)) "true") ((= tt (quote js2-FALSE)) "false") ((= tt (quote js2-DEBUGGER)) "debugger") (t (error "Invalid keyword literal type: %d" tt))))) nil [160873 161265]) ("js2-this-node-p" function nil ("node") nil "Return t if this node is a `js2-literal-node' of type js2-THIS." nil [161267 161405]) ("js2-new-node" type "struct" ("\"AST node for new-expression such as new Foo().\"" "target" "args" "lp" "rp" "initializer") nil nil args nil [161407 162216]) ("put" code nil [162275 162337]) ("put" code nil [162338 162400]) ("js2-visit-new-node" function nil ("n" "v") nil (js2-visit-ast (js2-new-node-target n) v) nil [162402 162632]) ("js2-print-new-node" function nil ("n" "i") nil (insert (js2-make-pad i) "new ") nil [162634 162918]) ("js2-name-node" type "struct" ("\"AST node for a JavaScript identifier\"" "name" "scope") nil nil scope nil [162920 163439]) ("put" code nil [163486 163545]) ("put" code nil [163546 163610]) ("js2-print-name-node" function nil ("n" "i") nil (insert (js2-make-pad i) (js2-name-node-name n)) nil [163612 163706]) ("js2-name-node-length" function nil ("node") nil "Return identifier length of NODE, a `js2-name-node'.
Returns 0 if NODE is nil or its identifier field is nil." nil [163708 163919]) ("js2-number-node" type "struct" ("\"AST node for a number literal.\"" "value" "num-value") nil nil num-value nil [163921 164563]) ("put" code nil [164591 164652]) ("put" code nil [164653 164721]) ("js2-print-number-node" function nil ("n" "i") nil (insert (js2-make-pad i) (number-to-string (js2-number-node-value n))) nil [164723 164841]) ("js2-regexp-node" type "struct" ("\"AST node for a regular expression literal.\"" "value" "flags") nil nil flags nil [164843 165458]) ("put" code nil [165492 165553]) ("put" code nil [165554 165617]) ("js2-print-regexp" function nil ("n" "i") nil (insert (js2-make-pad i) "/" (js2-regexp-node-value n) "/") nil [165619 165815]) ("js2-string-node" type "struct" ("\"String literal.
Escape characters are not evaluated; e.g. 
 is 2 chars in value field.
You can tell the quote type by looking at the first character.\"" "value") nil nil nil nil [165817 166445]) ("put" code nil [166500 166561]) ("put" code nil [166562 166630]) ("js2-print-string-node" function nil ("n" "i") nil (insert (js2-make-pad i) (js2-node-string n)) nil [166632 166725]) ("js2-array-node" type "struct" ("\"AST node for an array literal.\"" "elems") nil nil nil nil [166727 167121]) ("put" code nil [167188 167254]) ("put" code nil [167255 167321]) ("js2-visit-array-node" function nil ("n" "v") nil (dolist (e (js2-array-node-elems n)) (when e (js2-visit-ast e v))) nil [167323 167464]) ("js2-print-array-node" function nil ("n" "i") nil (insert (js2-make-pad i) "[") nil [167466 167591]) ("js2-object-node" type "struct" ("\"AST node for an object literal expression.\"" "elems") nil nil nil nil [167593 168005]) ("put" code nil [168048 168116]) ("put" code nil [168117 168185]) ("js2-visit-object-node" function nil ("n" "v") nil (dolist (e (js2-object-node-elems n)) (js2-visit-ast e v)) nil [168187 168287]) ("js2-print-object-node" function nil ("n" "i") nil (insert (js2-make-pad i) "{") nil [168289 168416]) ("js2-object-prop-node" type "struct" ("\"AST node for an object literal prop:value entry.
The `left' field is the property:  a name node, string node or number node.
The `right' field is a `js2-node' representing the initializer value.\"") nil nil nil nil [168418 169129]) ("put" code nil [169131 169203]) ("put" code nil [169204 169282]) ("js2-print-object-prop-node" function nil ("n" "i") nil (insert (js2-make-pad i)) nil [169284 169468]) ("js2-getter-setter-node" type "struct" ("\"AST node for a getter/setter property in an object literal.
The `left' field is the `js2-name-node' naming the getter/setter prop.
The `right' field is always an anonymous `js2-function-node' with a node
property `GETTER_SETTER' set to js2-GET or js2-SET. \"") nil nil nil nil [169470 170191]) ("put" code nil [170193 170267]) ("put" code nil [170268 170345]) ("js2-print-getter-setter" function nil ("n" "i") nil (let ((pad (js2-make-pad i)) (left (js2-getter-setter-node-left n)) (right (js2-getter-setter-node-right n))) (insert pad) (insert (if (= (js2-node-type n) js2-GET) "get " "set ")) (js2-print-ast left 0) (js2-print-ast right 0)) nil [170347 170647]) ("js2-prop-get-node" type "struct" ("\"AST node for a dotted property reference, e.g. foo.bar or foo().bar\"") nil nil nil nil [170649 171152]) ("put" code nil [171154 171226]) ("put" code nil [171227 171299]) ("js2-visit-prop-get-node" function nil ("n" "v") nil (when (js2-prop-get-node-left n) (js2-visit-ast (js2-prop-get-node-left n) v)) nil [171301 171510]) ("js2-print-prop-get-node" function nil ("n" "i") nil (insert (js2-make-pad i)) nil [171512 171687]) ("js2-elem-get-node" type "struct" ("\"AST node for an array index expression such as foo[bar].\"" "target" "element" "lb" "rb") nil nil element nil [171689 172467]) ("put" code nil [172517 172589]) ("put" code nil [172590 172662]) ("js2-visit-elem-get-node" function nil ("n" "v") nil (when (js2-elem-get-node-target n) (js2-visit-ast (js2-elem-get-node-target n) v)) nil [172664 172881]) ("js2-print-elem-get-node" function nil ("n" "i") nil (insert (js2-make-pad i)) nil [172883 173077]) ("js2-call-node" type "struct" ("\"AST node for a JavaScript function call.\"" "target" "args" "lp" "rp") nil nil args nil [173079 173794]) ("put" code nil [173843 173907]) ("put" code nil [173908 173972]) ("js2-visit-call-node" function nil ("n" "v") nil (js2-visit-ast (js2-call-node-target n) v) nil [173974 174118]) ("js2-print-call-node" function nil ("n" "i") nil (insert (js2-make-pad i)) nil [174120 174298]) ("js2-yield-node" type "struct" ("\"AST node for yield statement or expression.\"" "value") nil nil nil nil [174300 174704]) ("put" code nil [174739 174805]) ("put" code nil [174806 174872]) ("js2-visit-yield-node" function nil ("n" "v") nil (js2-visit-ast (js2-yield-node-value n) v) nil [174874 174953]) ("js2-print-yield-node" function nil ("n" "i") nil (insert (js2-make-pad i)) nil [174955 175134]) ("js2-paren-node" type "struct" ("\"AST node for a parenthesized expression.
In particular, used when the parens are syntactically optional,
as opposed to required parens such as those enclosing an if-conditional.\"" "expr") nil nil nil nil [175136 175669]) ("put" code nil [175686 175752]) ("put" code nil [175753 175819]) ("js2-visit-paren-node" function nil ("n" "v") nil (js2-visit-ast (js2-paren-node-expr n) v) nil [175821 175899]) ("js2-print-paren-node" function nil ("n" "i") nil (insert (js2-make-pad i)) nil [175901 176037]) ("js2-array-comp-node" type "struct" ("\"AST node for an Array comprehension such as [[x,y] for (x in foo) for (y in bar)].\"" "result" "loops" "filter" "if-pos" "lp" "rp") nil nil loops nil [176039 177102]) ("put" code nil [177173 177249]) ("put" code nil [177250 177326]) ("js2-visit-array-comp-node" function nil ("n" "v") nil (js2-visit-ast (js2-array-comp-node-result n) v) nil [177328 177580]) ("js2-print-array-comp-node" function nil ("n" "i") nil (let ((pad (js2-make-pad i)) (result (js2-array-comp-node-result n)) (loops (js2-array-comp-node-loops n)) (filter (js2-array-comp-node-filter n))) (insert pad "[") (js2-print-ast result 0) (dolist (l loops) (insert " ") (js2-print-ast l 0)) (when filter (insert " if (") (js2-print-ast filter 0)) (insert ")]")) nil [177582 178004]) ("js2-array-comp-loop-node" type "struct" ("\"AST subtree for each 'for (foo in bar)' loop in an array comprehension.\"") nil nil nil nil [178006 178899]) ("put" code nil [178901 178982]) ("put" code nil [178983 179064]) ("js2-visit-array-comp-loop" function nil ("n" "v") nil (js2-visit-ast (js2-array-comp-loop-node-iterator n) v) nil [179066 179219]) ("js2-print-array-comp-loop" function nil ("n" "i") nil (insert "for (") nil [179221 179426]) ("js2-empty-expr-node" type "struct" ("\"AST node for an empty expression.\"") nil nil nil nil [179428 179776]) ("put" code nil [179778 179843]) ("put" code nil [179844 179909]) ("js2-xml-node" type "struct" ("\"AST node for initial parse of E4X literals.
The kids field is a list of XML fragments, each a `js2-string-node' or
a `js2-xml-js-expr-node'.  Equivalent to Rhino's XmlLiteral node.\"") nil nil nil nil [179911 180437]) ("put" code nil [180439 180498]) ("put" code nil [180499 180561]) ("js2-print-xml-node" function nil ("n" "i") nil (dolist (kid (js2-xml-node-kids n)) (js2-print-ast kid i)) nil [180563 180660]) ("js2-xml-js-expr-node" type "struct" ("\"AST node for an embedded JavaScript {expression} in an E4X literal.
The start and end fields correspond to the curly-braces.\"" "expr") nil nil nil nil [180662 181177]) ("put" code nil [181213 181286]) ("put" code nil [181287 181360]) ("js2-visit-xml-js-expr" function nil ("n" "v") nil (js2-visit-ast (js2-xml-js-expr-node-expr n) v) nil [181362 181447]) ("js2-print-xml-js-expr" function nil ("n" "i") nil (insert (js2-make-pad i)) nil [181449 181592]) ("js2-xml-dot-query-node" type "struct" ("\"AST node for an E4X foo.(bar) filter expression.
Note that the left-paren is automatically the character immediately
following the dot (.) in the operator.  No whitespace is permitted
between the dot and the lp by the scanner.\"" "rp") nil nil nil nil [181594 182422]) ("put" code nil [182424 182498]) ("put" code nil [182499 182576]) ("js2-print-xml-dot-query" function nil ("n" "i") nil (insert (js2-make-pad i)) nil [182578 182779]) ("js2-xml-ref-node" type "struct" ("\"Base type for E4X XML attribute-access or property-get expressions.
Such expressions can take a variety of forms.  The general syntax has
three parts:

  - (optional) an @ (specifying an attribute access)
  - (optional) a namespace (a `js2-name-node') and double-colon
  - (required) either a `js2-name-node' or a bracketed [expression]

The property-name expressions (examples:  ns::name, @name) are
represented as `js2-xml-prop-ref' nodes.  The bracketed-expression
versions (examples:  ns::[name], @[name]) become `js2-xml-elem-ref' nodes.

This node type (or more specifically, its subclasses) will sometimes
be the right-hand child of a `js2-prop-get-node' or a
`js2-infix-node' of type `js2-DOTDOT', the .. xml-descendants operator.
The `js2-xml-ref-node' may also be a standalone primary expression with
no explicit target, which is valid in certain expression contexts such as

  company..employee.(@id < 100)

in this case, the @id is a `js2-xml-ref' that is part of an infix '<'
expression whose parent is a `js2-xml-dot-query-node'.\"" "namespace" "at-pos" "colon-pos") nil nil at-pos nil [182781 183967]) ("js2-xml-ref-node-attr-access-p" function nil ("node") nil "Return non-nil if this expression began with an @-token." nil [183969 184173]) ("js2-xml-prop-ref-node" type "struct" ("\"AST node for an E4X XML [expr] property-ref expression.
The JavaScript syntax is an optional @, an optional ns::, and a name.

  [ '@' ] [ name '::' ] name

Examples include name, ns::name, ns::*, *::name, *::*, @attr, @ns::attr,
@ns::*, @*::attr, @*::*, and @*.

The node starts at the @ token, if present.  Otherwise it starts at the
namespace name.  The node bounds extend through the closing right-bracket,
or if it is missing due to a syntax error, through the end of the index
expression.\"" "propname") nil nil nil nil [184175 185286]) ("put" code nil [185288 185368]) ("put" code nil [185369 185449]) ("js2-visit-xml-prop-ref-node" function nil ("n" "v") nil (if (js2-xml-prop-ref-node-namespace n) (js2-visit-ast (js2-xml-prop-ref-node-namespace n) v)) nil [185451 185696]) ("js2-print-xml-prop-ref-node" function nil ("n" "i") nil (insert (js2-make-pad i)) nil [185698 186050]) ("js2-xml-elem-ref-node" type "struct" ("\"AST node for an E4X XML [expr] member-ref expression.
Syntax:

 [ '@' ] [ name '::' ] '[' expr ']'

Examples include ns::[expr], @ns::[expr], @[expr], *::[expr] and @*::[expr].

Note that the form [expr] (i.e. no namespace or attribute-qualifier)
is not a legal E4X XML element-ref expression, since it's already used
for standard JavaScript element-get array indexing.  Hence, a
`js2-xml-elem-ref-node' always has either the attribute-qualifier, a
non-nil namespace node, or both.

The node starts at the @ token, if present.  Otherwise it starts
at the namespace name.  The node bounds extend through the closing
right-bracket, or if it is missing due to a syntax error, through the
end of the index expression.\"" "expr" "lb" "rb") nil nil lb nil [186052 187544]) ("put" code nil [187546 187626]) ("put" code nil [187627 187707]) ("js2-visit-xml-elem-ref-node" function nil ("n" "v") nil (if (js2-xml-elem-ref-node-namespace n) (js2-visit-ast (js2-xml-elem-ref-node-namespace n) v)) nil [187709 187946]) ("js2-print-xml-elem-ref-node" function nil ("n" "i") nil (insert (js2-make-pad i)) nil [187948 188322]) ("js2-xml-start-tag-node" type "struct" ("\"AST node for an XML start-tag.  Not currently used.
The `kids' field is a lisp list of child content nodes.\"" "name" "attrs" "empty-p") nil nil attrs nil [188402 189197]) ("put" code nil [189257 189334]) ("put" code nil [189335 189412]) ("js2-visit-xml-start-tag" function nil ("n" "v") nil (js2-visit-ast (js2-xml-start-tag-node-name n) v) nil [189414 189605]) ("js2-print-xml-start-tag" function nil ("n" "i") nil (insert (js2-make-pad i) "<") nil [189607 189860]) ("js2-xml-end-tag-node" type "struct" ("\"AST node for an XML end-tag.  Not currently used.\"" "name") nil nil nil nil [190001 190441]) ("put" code nil [190468 190541]) ("put" code nil [190542 190615]) ("js2-visit-xml-end-tag" function nil ("n" "v") nil (js2-visit-ast (js2-xml-end-tag-node-name n) v) nil [190617 190702]) ("js2-print-xml-end-tag" function nil ("n" "i") nil (insert (js2-make-pad i)) nil [190704 190848]) ("js2-xml-name-node" type "struct" ("\"AST node for an E4X XML name.  Not currently used.
Any XML name can be qualified with a namespace, hence the namespace field.
Further, any E4X name can be comprised of arbitrary JavaScript {} expressions.
The kids field is a list of `js2-name-node' and `js2-xml-js-expr-node'.
For a simple name, the kids list has exactly one node, a `js2-name-node'.\"" "namespace") nil nil nil nil [190850 191646]) ("put" code nil [191671 191743]) ("put" code nil [191744 191816]) ("js2-visit-xml-name-node" function nil ("n" "v") nil (js2-visit-ast (js2-xml-name-node-namespace n) v) nil [191818 191907]) ("js2-print-xml-name-node" function nil ("n" "i") nil (insert (js2-make-pad i)) nil [191909 192157]) ("js2-xml-pi-node" type "struct" ("\"AST node for an E4X XML processing instruction.  Not currently used.\"" "name" "attrs") nil nil attrs nil [192159 192686]) ("put" code nil [192720 192788]) ("put" code nil [192789 192857]) ("js2-visit-xml-pi-node" function nil ("n" "v") nil (js2-visit-ast (js2-xml-pi-node-name n) v) nil [192859 193010]) ("js2-print-xml-pi-node" function nil ("n" "i") nil (insert (js2-make-pad i) "<?") nil [193012 193238]) ("js2-xml-cdata-node" type "struct" ("\"AST node for a CDATA escape section.  Not currently used.\"" "content") nil nil nil nil [193240 193684]) ("put" code nil [193747 193821]) ("put" code nil [193822 193896]) ("js2-visit-xml-cdata-node" function nil ("n" "v") nil (js2-visit-ast (js2-xml-cdata-node-content n) v) nil [193898 193987]) ("js2-print-xml-cdata-node" function nil ("n" "i") nil (insert (js2-make-pad i)) nil [193989 194104]) ("js2-xml-attr-node" type "struct" ("\"AST node representing a foo='bar' XML attribute value.  Not yet used.\"" "name" "value" "eq-pos" "quote-type") nil nil value nil [194106 194823]) ("put" code nil [194846 194918]) ("put" code nil [194919 194991]) ("js2-visit-xml-attr-node" function nil ("n" "v") nil (js2-visit-ast (js2-xml-attr-node-name n) v) nil [194993 195125]) ("js2-print-xml-attr-node" function nil ("n" "i") nil (let ((quote (if (eq (js2-xml-attr-node-quote-type n) (quote single)) "'" "\""))) (insert (js2-make-pad i)) (js2-print-ast (js2-xml-attr-node-name n) 0) (insert "=" quote) (js2-print-ast (js2-xml-attr-node-value n) 0) (insert quote)) nil [195127 195449]) ("js2-xml-text-node" type "struct" ("\"AST node for an E4X XML text node.  Not currently used.\"" "content") nil nil nil nil [195451 195872]) ("put" code nil [195937 196009]) ("put" code nil [196010 196082]) ("js2-visit-xml-text-node" function nil ("n" "v") nil (js2-visit-ast (js2-xml-text-node-content n) v) nil [196084 196171]) ("js2-print-xml-text-node" function nil ("n" "i") nil (insert (js2-make-pad i)) nil [196173 196309]) ("js2-xml-comment-node" type "struct" ("\"AST node for E4X XML comment.  Not currently used.\"") nil nil nil nil [196311 196682]) ("put" code nil [196684 196750]) ("put" code nil [196751 196824]) ("js2-print-xml-comment" function nil ("n" "i") nil (insert (js2-make-pad i) (js2-node-string n)) nil [196826 196919]) ("js2-node-line" function nil ("n") nil "Fetch the source line number at the start of node N.
This is O(n) in the length of the source buffer; use prudently." nil [196941 197144]) ("js2-block-node-kid" function nil ("n" "i") nil "Return child I of node N, or nil if there aren't that many." nil [197146 197279]) ("js2-block-node-first" function nil ("n") nil "Return first child of block node N, or nil if there is none." nil [197281 197415]) ("js2-node-root" function nil ("n") nil "Return the root of the AST containing N.
If N has no parent pointer, returns N." nil [197417 197620]) ("js2-node-position-in-parent" function nil ("node" "&optional" "parent") nil "Return the position of NODE in parent's block-kids list.
PARENT can be supplied if known.  Positioned returned is zero-indexed.
Returns 0 if NODE is not a child of a block statement, or if NODE
is not a statement node." nil [197622 198080]) ("js2-node-short-name" function nil ("n") nil "Return the short name of node N as a string, e.g. `js2-if-node'." nil [198082 198259]) ("js2-node-child-list" function nil ("node") nil "Return the child list for NODE, a lisp list of nodes.
Works for block nodes, array nodes, obj literals, funarg lists,
var decls and try nodes (for catch clauses).  Note that you should call
`js2-block-node-kids' on the function body for the body statements.
Returns nil for zero-length child lists or unsupported nodes." nil [198261 199143]) ("js2-node-set-child-list" function nil ("node" "kids") nil "Set the child list for NODE to KIDS." nil [199145 199935]) ("js2-paren-expr-nodes" variable nil (quote (cl-struct-js2-array-comp-loop-node cl-struct-js2-array-comp-node cl-struct-js2-call-node cl-struct-js2-catch-node cl-struct-js2-do-node cl-struct-js2-elem-get-node cl-struct-js2-for-in-node cl-struct-js2-for-node cl-struct-js2-function-node cl-struct-js2-if-node cl-struct-js2-let-node cl-struct-js2-new-node cl-struct-js2-paren-node cl-struct-js2-switch-node cl-struct-js2-while-node cl-struct-js2-with-node cl-struct-js2-xml-dot-query-node)) ((const . t)) "Node types that can have a parenthesized child expression.
In particular, nodes that respond to `js2-node-lp' and `js2-node-rp'." nil [200017 200692]) ("js2-paren-expr-node-p" function nil ("node") nil "Return t for nodes that typically have a parenthesized child expression.
Useful for computing the indentation anchors for arg-lists and conditions.
Note that it may return a false positive, for instance when NODE is
a `js2-new-node' and there are no arguments or parentheses." nil [200694 201057]) ("js2-node-lp" function nil ("node") nil "Return relative left-paren position for NODE, if applicable.
For `js2-elem-get-node' structs, returns left-bracket position.
Note that the position may be nil in the case of a parse error." nil [201089 202164]) ("js2-node-rp" function nil ("node") nil "Return relative right-paren position for NODE, if applicable.
For `js2-elem-get-node' structs, returns right-bracket position.
Note that the position may be nil in the case of a parse error." nil [202197 203302]) ("js2-node-first-child" function nil ("node") nil "Returns the first element of `js2-node-child-list' for NODE." nil [203304 203442]) ("js2-node-last-child" function nil ("node") nil "Returns the last element of `js2-node-last-child' for NODE." nil [203444 203587]) ("js2-node-prev-sibling" function nil ("node") nil "Return the previous statement in parent.
Works for parents supported by `js2-node-child-list'.
Returns nil if NODE is not in the parent, or PARENT is
not a supported node, or if NODE is the first child." nil [203589 204062]) ("js2-node-next-sibling" function nil ("node") nil "Return the next statement in parent block.
Returns nil if NODE is not in the block, or PARENT is not
a block node, or if NODE is the last statement." nil [204064 204437]) ("js2-node-find-child-before" function nil ("pos" "parent" "&optional" "after") nil "Find the last child that starts before POS in parent.
If AFTER is non-nil, returns first child starting after POS.
POS is an absolute buffer position.  PARENT is any node
supported by `js2-node-child-list'.
Returns nil if no applicable child is found." nil [204439 205439]) ("js2-node-find-child-after" function nil ("pos" "parent") nil "Find first child that starts after POS in parent.
POS is an absolute buffer position.  PARENT is any node
supported by `js2-node-child-list'.
Returns nil if no applicable child is found." nil [205441 205727]) ("js2-node-replace-child" function nil ("pos" "parent" "new-node") nil "Replace node at index POS in PARENT with NEW-NODE.
Only works for parents supported by `js2-node-child-list'." nil [205729 206098]) ("js2-node-buffer" function nil ("n") nil "Return the buffer associated with AST N.
Returns nil if the buffer is not set as a property on the root
node, or if parent links were not recorded during parsing." nil [206100 206411]) ("js2-block-node-push" function nil ("n" "kid") nil "Push js2-node KID onto the end of js2-block-node N's child list.
KID is always added to the -end- of the kids list.
Function also calls `js2-node-add-children' to add the parent link." nil [206413 206825]) ("js2-node-string" function nil ("node") nil (let ((buf (js2-node-buffer node)) pos) (unless buf (error "No buffer available for node %s" node)) (save-excursion (set-buffer buf) (buffer-substring-no-properties (setq pos (js2-node-abs-pos node)) (+ pos (js2-node-len node))))) nil [206827 207162]) ("js2-discovered-node" variable nil nil nil nil nil [207232 207264]) ("make-variable-buffer-local" code nil [207265 207314]) ("js2-visitor-offset" variable nil nil nil nil nil [207375 207406]) ("make-variable-buffer-local" code nil [207407 207455]) ("js2-node-search-point" variable nil nil nil nil nil [207457 207491]) ("make-variable-buffer-local" code nil [207492 207543]) ("when" code nil [207545 207943]) ("js2-node-at-point" function nil ("&optional" "pos" "skip-comments") nil "Return AST node at POS, a buffer position, defaulting to current point.
The `js2-mode-ast' variable must be set to the current parse tree.
Signals an error if the AST (`js2-mode-ast') is nil.
Always returns a node - if it can't find one, it returns the root.
If SKIP-COMMENTS is non-nil, comment nodes are ignored." nil [207945 209357]) ("js2-node-at-point-visitor" function nil ("node" "end-p") nil (let ((rel-pos (js2-node-pos node)) abs-pos abs-end (point js2-node-search-point)) (cond (end-p (decf js2-visitor-offset rel-pos)) ((js2-comment-node-p node) nil) (t (setq abs-pos (incf js2-visitor-offset rel-pos) abs-end (+ abs-pos (js2-node-len node) -1)) (cond ((> abs-pos point) (throw (quote js2-visit-done) nil)) ((> point abs-end) nil) (t (setq js2-discovered-node node) t))))) nil [209359 210450]) ("js2-block-comment-p" function nil ("node") nil "Return non-nil if NODE is a comment node of format `jsdoc' or `block'." nil [210508 210714]) ("js2-comment-at-point" function nil ("&optional" "pos") nil "Look through scanned comment nodes for one containing POS.
POS is a buffer position that defaults to current point.
Function returns nil if POS was not in any comment node." nil [210786 211459]) ("js2-mode-find-parent-fn" function nil ("node") nil "Find function enclosing NODE.
Returns nil if NODE is not inside a function." nil [211461 211749]) ("js2-mode-find-enclosing-fn" function nil ("node") nil "Find function or root enclosing NODE." nil [211751 212055]) ("js2-mode-find-enclosing-node" function nil ("beg" "end") nil "Find script or function fully enclosing BEG and END." nil [212057 212541]) ("js2-node-parent-script-or-fn" function nil ("node") nil "Find script or function immediately enclosing NODE.
If NODE is the ast-root, returns nil." nil [212543 212924]) ("js2-nested-function-p" function nil ("node") nil "Return t if NODE is a nested function, or is inside a nested function." nil [212926 213277]) ("js2-mode-shift-kids" function nil ("kids" "start" "offset") nil (dolist (kid kids) (if (> (js2-node-pos kid) start) (incf (js2-node-pos kid) offset))) nil [213279 213430]) ("js2-mode-shift-children" function nil ("parent" "start" "offset") nil "Update start-positions of all children of PARENT beyond START." nil [213432 213731]) ("js2-node-is-descendant" function nil ("node" "ancestor") nil "Return t if NODE is a descendant of ANCESTOR." nil [213733 213933]) ("js2-visit-none" function nil ("node" "callback") nil "Visitor for AST node that have no node children." nil [213963 214060]) ("js2-print-none" function nil ("node" "indent") nil "Visitor for AST node with no printed representation." nil [214062 214155]) ("js2-print-body" function nil ("node" "indent") nil "Print a statement, or a block without braces." nil [214157 214389]) ("js2-print-list" function nil ("args" "&optional" "delimiter") nil (loop with len = (length args) for arg in args for count from 1 do (js2-print-ast arg 0) (if (< count len) (insert (or delimiter ", ")))) nil [214391 214632]) ("js2-print-tree" function nil ("ast") nil "Prints an AST to the current buffer.
Makes `js2-ast-parent-nodes' available to the printer functions." nil [214634 214855]) ("js2-print-ast" function nil ("node" "&optional" "indent") nil "Helper function for printing AST nodes.
Requires `js2-ast-parent-nodes' to be non-nil.
You should use `js2-print-tree' instead of this function." nil [214857 215265]) ("js2-side-effecting-tokens" variable nil (let ((tokens (make-bool-vector js2-num-tokens nil))) (dolist (tt (list js2-ASSIGN js2-ASSIGN_ADD js2-ASSIGN_BITAND js2-ASSIGN_BITOR js2-ASSIGN_BITXOR js2-ASSIGN_DIV js2-ASSIGN_LSH js2-ASSIGN_MOD js2-ASSIGN_MUL js2-ASSIGN_RSH js2-ASSIGN_SUB js2-ASSIGN_URSH js2-BLOCK js2-BREAK js2-CALL js2-CATCH js2-CATCH_SCOPE js2-CONST js2-CONTINUE js2-DEBUGGER js2-DEC js2-DELPROP js2-DEL_REF js2-DO js2-ELSE js2-EMPTY js2-ENTERWITH js2-EXPORT js2-EXPR_RESULT js2-FINALLY js2-FOR js2-FUNCTION js2-GOTO js2-IF js2-IFEQ js2-IFNE js2-IMPORT js2-INC js2-JSR js2-LABEL js2-LEAVEWITH js2-LET js2-LETEXPR js2-LOCAL_BLOCK js2-LOOP js2-NEW js2-REF_CALL js2-RETHROW js2-RETURN js2-RETURN_RESULT js2-SEMI js2-SETELEM js2-SETELEM_OP js2-SETNAME js2-SETPROP js2-SETPROP_OP js2-SETVAR js2-SET_REF js2-SET_REF_OP js2-SWITCH js2-TARGET js2-THROW js2-TRY js2-VAR js2-WHILE js2-WITH js2-WITHEXPR js2-YIELD)) (aset tokens tt t)) (if js2-instanceof-has-side-effects (aset tokens js2-INSTANCEOF t)) tokens) ((const . t)) nil nil [215267 217778]) ("js2-node-has-side-effects" function nil ("node") nil "Return t if NODE has side effects." nil [217780 219021]) ("js2-member-expr-leftmost-name" function nil ("node") nil "For an expr such as foo.bar.baz, return leftmost node foo.
NODE is any `js2-node' object.  If it represents a member expression,
which is any sequence of property gets, element-gets, function calls,
or xml descendants/filter operators, then we look at the lexically
leftmost (first) node in the chain.  If it is a name-node we return it.
Note that NODE can be a raw name-node and it will be returned as well.
If NODE is not a name-node or member expression, or if it is a member
expression whose leftmost target is not a name node, returns nil." nil [219023 219957]) ("js2-stmt-node-types" variable nil (list js2-BLOCK js2-BREAK js2-CONTINUE js2-DEFAULT js2-DO js2-EXPR_RESULT js2-EXPR_VOID js2-FOR js2-IF js2-RETURN js2-SWITCH js2-THROW js2-TRY js2-WHILE js2-WITH) ((const . t)) "Node types that only appear in statement contexts.
The list does not include nodes that always appear as the child
of another specific statement type, such as switch-cases,
catch and finally blocks, and else-clauses.  The list also excludes
nodes like yield, let and var, which may appear in either expression
or statement context, and in the latter context always have a
`js2-expr-stmt-node' parent.  Finally, the list does not include
functions or scripts, which are treated separately from statements
by the JavaScript parser and runtime." nil [219959 220853]) ("js2-stmt-node-p" function nil ("node") nil "Heuristic for figuring out if NODE is a statement.
Some node types can appear in either an expression context or a
statement context, e.g. let-nodes, yield-nodes, and var-decl nodes.
For these node types in a statement context, the parent will be a
`js2-expr-stmt-node'.
Functions aren't included in the check." nil [220855 221250]) ("js2-mode-find-first-stmt" function nil ("node") nil "Search upward starting from NODE looking for a statement.
For purposes of this function, a `js2-function-node' counts." nil [221252 221552]) ("js2-node-parent-stmt" function nil ("node") nil "Return the node's first ancestor that is a statement.
Returns nil if NODE is a `js2-ast-root'.  Note that any expression
appearing in a statement context will have a parent that is a
`js2-expr-stmt-node' that will be returned by this function." nil [221554 222118]) ("js2-END_UNREACHED" variable nil 0 ((const . t)) nil nil [223974 224004]) ("js2-END_DROPS_OFF" variable nil 1 ((const . t)) nil nil [224005 224035]) ("js2-END_RETURNS" variable nil 2 ((const . t)) nil nil [224036 224064]) ("js2-END_RETURNS_VALUE" variable nil 4 ((const . t)) nil nil [224065 224099]) ("js2-END_YIELDS" variable nil 8 ((const . t)) nil nil [224100 224127]) ("js2-has-consistent-return-usage" function nil ("node") nil "Check that every return usage in a function body is consistent.
Returns t if the function satisfies strict mode requirement." nil [224129 224682]) ("js2-end-check-if" function nil ("node") nil "Returns in the then and else blocks must be consistent with each other.
If there is no else block, then the return statement can fall through.
Returns logical OR of END_* flags" nil [224684 225178]) ("js2-end-check-switch" function nil ("node") nil "Consistency of return statements is checked between the case statements.
If there is no default, then the switch can fall through. If there is a
default, we check to see if all code paths in the default return or if
there is a code path that can fall through.
Returns logical OR of END_* flags." nil [225180 226080]) ("js2-end-check-try" function nil ("node") nil "If the block has a finally, return consistency is checked in the
finally block. If all code paths in the finally return, then the
returns in the try-catch blocks don't matter. If there is a code path
that does not return or if there is no finally block, the returns
of the try and catch blocks are checked for mismatch.
Returns logical OR of END_* flags." nil [226082 227153]) ("js2-end-check-loop" function nil ("node") nil "Return statement in the loop body must be consistent. The default
assumption for any kind of a loop is that it will eventually terminate.
The only exception is a loop with a constant true condition. Code that
follows such a loop is examined only if one can statically determine
that there is a break out of the loop.

    for(... ; ... ; ...) {}
    for(... in ... ) {}
    while(...) { }
    do { } while(...)

Returns logical OR of END_* flags." nil [227155 228421]) ("js2-end-check-block" function nil ("node") nil "A general block of code is examined statement by statement.
If any statement (even a compound one) returns in all branches, then
subsequent statements are not examined.
Returns logical OR of END_* flags." nil [228423 229115]) ("js2-end-check-label" function nil ("node") nil "A labeled statement implies that there may be a break to the label.
The function processes the labeled statement and then checks the
CONTROL_BLOCK_PROP property to see if there is ever a break to the
particular label.
Returns logical OR of END_* flags." nil [229117 229620]) ("js2-end-check-break" function nil ("node") nil "When a break is encountered annotate the statement being broken
out of by setting its CONTROL_BLOCK_PROP property.
Returns logical OR of END_* flags." nil [229622 230013]) ("js2-end-check" function nil ("node") nil "Examine the body of a function, doing a basic reachability analysis.
Returns a combination of flags END_* flags that indicate
how the function execution can terminate. These constitute only the
pessimistic set of termination conditions. It is possible that at
runtime certain code paths will never be actually taken. Hence this
analysis will flag errors in cases where there may not be errors.
Returns logical OR of END_* flags" nil [230015 231497]) ("js2-always-defined-boolean-p" function nil ("node") nil "Check if NODE always evaluates to true or false in boolean context.
Returns 'ALWAYS_TRUE, 'ALWAYS_FALSE, or nil if it's neither always true
nor always false." nil [231499 232083]) ("js2-ast" package nil nil nil [232085 232103]) ("js2-set-face" function nil ("beg" "end" "face" "&optional" "record") nil "Fontify a region.  If RECORD is non-nil, record for later." nil [232287 232707]) ("js2-set-kid-face" function nil ("pos" "kid" "len" "face") nil "Set-face on a child node.
POS is absolute buffer position of parent.
KID is the child node.
LEN is the length to fontify.
FACE is the face to fontify with." nil [232709 233042]) ("js2-fontify-kwd" function nil ("start" "length") nil (js2-set-face start (+ start length) (quote font-lock-keyword-face)) nil [233044 233149]) ("js2-clear-face" function nil ("beg" "end") nil (remove-text-properties beg end (quote (face nil help-echo nil point-entered nil c-in-sws nil))) nil [233151 233386]) ("js2-record-text-property" function nil ("beg" "end" "prop" "value") nil "Record a text property to set when parsing finishes." nil [233388 233565]) ("js2-ecma-global-props" variable nil (concat "^" (regexp-opt (quote ("Infinity" "NaN" "undefined" "arguments")) t) "$") ((const . t)) "Value properties of the Ecma-262 Global Object.
Shown at or above `js2-highlight-level' 2." nil [233567 233803]) ("js2-ecma-object-props" variable nil (concat "^" (regexp-opt (quote ("prototype" "__proto__" "__parent__")) t) "$") ((const . t)) "Value properties of the Ecma-262 Object constructor.
Shown at or above `js2-highlight-level' 2." nil [233861 234098]) ("js2-ecma-global-funcs" variable nil (concat "^" (regexp-opt (quote ("decodeURI" "decodeURIComponent" "encodeURI" "encodeURIComponent" "eval" "isFinite" "isNaN" "parseFloat" "parseInt")) t) "$") ((const . t)) "Function properties of the Ecma-262 Global object.
Shown at or above `js2-highlight-level' 2." nil [234100 234402]) ("js2-ecma-number-props" variable nil (concat "^" (regexp-opt (quote ("MAX_VALUE" "MIN_VALUE" "NaN" "NEGATIVE_INFINITY" "POSITIVE_INFINITY")) t) "$") ((const . t)) "Properties of the Ecma-262 Number constructor.
Shown at or above `js2-highlight-level' 2." nil [234404 234705]) ("js2-ecma-date-props" variable nil "^\\(parse\\|UTC\\)$" ((const . t)) "Properties of the Ecma-262 Date constructor.
Shown at or above `js2-highlight-level' 2." nil [234707 234851]) ("js2-ecma-math-props" variable nil (concat "^" (regexp-opt (quote ("E" "LN10" "LN2" "LOG2E" "LOG10E" "PI" "SQRT1_2" "SQRT2")) t) "$") ((const . t)) "Properties of the Ecma-262 Math object.
Shown at or above `js2-highlight-level' 2." nil [234854 235107]) ("js2-ecma-math-funcs" variable nil (concat "^" (regexp-opt (quote ("abs" "acos" "asin" "atan" "atan2" "ceil" "cos" "exp" "floor" "log" "max" "min" "pow" "random" "round" "sin" "sqrt" "tan")) t) "$") ((const . t)) "Function properties of the Ecma-262 Math object.
Shown at or above `js2-highlight-level' 2." nil [235110 235439]) ("js2-ecma-function-props" variable nil (concat "^" (regexp-opt (quote ("hasOwnProperty" "isPrototypeOf" "propertyIsEnumerable" "toLocaleString" "toString" "valueOf" "apply" "call" "concat" "join" "pop" "push" "reverse" "shift" "slice" "sort" "splice" "unshift" "charAt" "charCodeAt" "fromCharCode" "indexOf" "lastIndexOf" "localeCompare" "match" "replace" "search" "split" "substring" "toLocaleLowerCase" "toLocaleUpperCase" "toLowerCase" "toUpperCase" "toExponential" "toFixed" "toPrecision" "getDate" "getDay" "getFullYear" "getHours" "getMilliseconds" "getMinutes" "getMonth" "getSeconds" "getTime" "getTimezoneOffset" "getUTCDate" "getUTCDay" "getUTCFullYear" "getUTCHours" "getUTCMilliseconds" "getUTCMinutes" "getUTCMonth" "getUTCSeconds" "setDate" "setFullYear" "setHours" "setMilliseconds" "setMinutes" "setMonth" "setSeconds" "setTime" "setUTCDate" "setUTCFullYear" "setUTCHours" "setUTCMilliseconds" "setUTCMinutes" "setUTCMonth" "setUTCSeconds" "toDateString" "toLocaleDateString" "toLocaleString" "toLocaleTimeString" "toTimeString" "toUTCString" "exec" "test" "toSource" "__defineGetter__" "__defineSetter__" "__lookupGetter__" "__lookupSetter__" "__noSuchMethod__" "every" "filter" "forEach" "lastIndexOf" "map" "some")) t) "$") ((const . t)) "Built-in functions defined by Ecma-262 and SpiderMonkey extensions.
Shown at or above `js2-highlight-level' 3." nil [235441 237354]) ("js2-parse-highlight-prop-get" function nil ("parent" "target" "prop" "call-p") nil (let ((target-name (and target (js2-name-node-p target) (js2-name-node-name target))) (prop-name (if prop (js2-name-node-name prop))) (level1 (>= js2-highlight-level 1)) (level2 (>= js2-highlight-level 2)) (level3 (>= js2-highlight-level 3)) pos face) (when level2 (if call-p (cond ((and target prop) (cond ((and level3 (string-match js2-ecma-function-props prop-name)) (setq face (quote font-lock-builtin-face))) ((and target-name prop) (cond ((string= target-name "Date") (if (string-match js2-ecma-date-props prop-name) (setq face (quote font-lock-builtin-face)))) ((string= target-name "Math") (if (string-match js2-ecma-math-funcs prop-name) (setq face (quote font-lock-builtin-face)))))))) (prop (if (string-match js2-ecma-global-funcs prop-name) (setq face (quote font-lock-builtin-face))))) (cond ((and target prop) (cond ((string= target-name "Number") (if (string-match js2-ecma-number-props prop-name) (setq face (quote font-lock-constant-face)))) ((string= target-name "Math") (if (string-match js2-ecma-math-props prop-name) (setq face (quote font-lock-constant-face)))))) (prop (if (string-match js2-ecma-object-props prop-name) (setq face (quote font-lock-constant-face)))))) (when face (js2-set-face (setq pos (+ (js2-node-pos parent) (js2-node-pos prop))) (+ pos (js2-node-len prop)) face)))) nil [237356 239277]) ("js2-parse-highlight-member-expr-node" function nil ("node") nil "Perform syntax highlighting of EcmaScript built-in properties.
The variable `js2-highlight-level' governs this highighting." nil [239279 241296]) ("js2-parse-highlight-member-expr-fn-name" function nil ("expr") nil "Highlight the `baz' in function foo.bar.baz(args) {...}.
This is experimental Rhino syntax.  EXPR is the foo.bar.baz member expr.
We currently only handle the case where the last component is a prop-get
of a simple name.  Called before EXPR has a parent node." nil [241298 242019]) ("js2-jsdoc-param-tag-regexp" variable nil (concat "^\\s-*\\*+\\s-*\\(@" "\\(?:param\\|argument\\)" "\\)" "\\s-*\\({[^}]+}\\)?" "\\s-*\\([a-zA-Z0-9_$]+\\)?" "\\>") ((const . t)) "Matches jsdoc tags with optional type and optional param name." nil [242201 242510]) ("js2-jsdoc-typed-tag-regexp" variable nil (concat "^\\s-*\\*+\\s-*\\(@\\(?:" (regexp-opt (quote ("requires" "return" "returns" "throw" "throws"))) "\\)\\)\\s-*\\({[^}]+}\\)?") ((const . t)) "Matches jsdoc tags with optional type." nil [242512 242752]) ("js2-jsdoc-arg-tag-regexp" variable nil (concat "^\\s-*\\*+\\s-*\\(@\\(?:" (regexp-opt (quote ("base" "extends" "member" "type" "version"))) "\\)\\)\\s-+\\([^ 	]+\\)") ((const . t)) "Matches jsdoc tags with a single argument." nil [242754 242991]) ("js2-jsdoc-empty-tag-regexp" variable nil (concat "^\\s-*\\*+\\s-*\\(@\\(?:" (regexp-opt (quote ("addon" "author" "class" "constructor" "deprecated" "exec" "exception" "fileoverview" "final" "ignore" "private"))) "\\)\\)\\s-*") ((const . t)) "Matches empty jsdoc tags." nil [242993 243285]) ("js2-jsdoc-link-tag-regexp" variable nil "{\\(@link\\)\\s-+\\([^#}
]+\\)\\(#.+\\)?}" ((const . t)) "Matches a jsdoc link tag." nil [243287 243400]) ("js2-jsdoc-see-tag-regexp" variable nil "^\\s-*\\*+\\s-*\\(@see\\)\\s-+\\([^#}
]+\\)\\(#.+\\)?" ((const . t)) "Matches a jsdoc @see tag." nil [243402 243526]) ("js2-jsdoc-html-tag-regexp" variable nil "\\(</?\\)\\([a-zA-Z]+\\)\\s-*\\(/?>\\)" ((const . t)) "Matches a simple (no attributes) html start- or end-tag." nil [243528 243668]) ("js2-jsdoc-highlight-helper" function nil nil nil (js2-set-face (match-beginning 1) (match-end 1) (quote js2-jsdoc-tag-face)) nil [243670 244349]) ("js2-highlight-jsdoc" function nil ("ast") nil "Highlight doc comment tags." nil [244351 245824]) ("js2-highlight-assign-targets" function nil ("node" "left" "right") nil "Highlight function properties and external variables." nil [245826 247033]) ("js2-highlight-undeclared-vars" function nil nil nil "After entire parse is finished, look for undeclared variable assignments.
Have to wait until entire buffer is parsed, since JavaScript permits var
decls to occur after they're used.

We currently use a simple heuristic to rule out complaining about built-ins:
if the name is capitalized we don't highlight it.  This could be improved a
bit by declaring all the Ecma global object, constructor and function names
in a hashtable, but we'd still wind up complaining about all the DHTML
builtins, the Mozilla builtins, etc." nil [247035 248205]) ("js2-highlight" package nil nil nil [248207 248231]) ("js2-prop-node-name" function nil ("node") nil "Return the name of a node that may be a property-get/property-name.
If NODE is not a valid name-node, string-node or integral number-node,
returns nil.  Otherwise returns the string name/value of the node." nil [251738 252286]) ("js2-node-qname-component" function nil ("node") nil "Test function:  return the name of this node, if it contributes to a qname.
Returns nil if the node doesn't contribute." nil [252288 252659]) ("js2-record-function-qname" function nil ("fn-node" "qname") nil "Associate FN-NODE with its QNAME for later lookup.
This is used in postprocessing the chain list.  When we find a chain
whose first element is a js2-THIS keyword node, we look up the parent
function and see (using this map) whether it is the tail of a chain.
If so, we replace the this-node with a copy of the parent's qname." nil [252661 253188]) ("js2-record-imenu-functions" function nil ("node" "&optional" "var") nil "Record function definitions for imenu.
NODE is a function node or an object literal.
VAR, if non-nil, is the expression that NODE is being assigned to." nil [253190 254359]) ("js2-compute-nested-prop-get" function nil ("node") nil "If NODE is of form foo.bar.baz, return component nodes as a list.
Otherwise returns nil.  Element-gets can be treated as property-gets
if the index expression is a name, a string, or a positive integer." nil [254361 255547]) ("js2-record-object-literal" function nil ("node" "qname") nil "Recursively process an object literal looking for functions.
NODE is an object literal that is the right-hand child of an assignment
expression.  QNAME is a list of nodes representing the assignment target,
e.g. for foo.bar.baz = {...}, QNAME is (foo-node bar-node baz-node).
We do a depth-first traversal of NODE.  Any functions we find are prefixed
with QNAME plus the property name of the function and appended to the
variable `js2-imenu-recorder'." nil [255549 257184]) ("js2-node-top-level-decl-p" function nil ("node") nil "Return t if NODE's name is defined in the top-level scope.
Also returns t if NODE's name is not defined in any scope, since it implies
that it's an external variable, which must also be in the top-level scope." nil [257186 257772]) ("js2-browse-postprocess-chains" function nil ("chains") nil "Modify function-declaration name chains after parsing finishes.
Some of the information is only available after the parse tree is complete.
For instance, following a 'this' reference requires a parent function node." nil [257774 259397]) ("js2-treeify" function nil ("lst") nil "Convert (a b c d) to (a ((b ((c d)))))" nil [260734 260912]) ("js2-build-alist-trie" function nil ("chains" "trie") nil "Merge declaration name chains into a trie-like alist structure for imenu.
CHAINS is the qname chain list produced during parsing. TRIE is a
list of elements built up so far." nil [260914 262628]) ("js2-flatten-trie" function nil ("trie") nil "Convert TRIE to imenu-format.
Recurses through nodes, and for each one whose second element is a list,
appends the list's flattened elements to the current element.  Also
changes the tails into conses.  For instance, this pre-flattened trie

'(a ((b 20)
     (c ((d 30)
         (e 40)))))

becomes

'(a (b . 20)
    (c (d . 30)
       (e . 40)))

Note that the root of the trie has no key, just a list of chains.
This is also true for the value of any key with multiple children,
e.g. key 'c' in the example above." nil [262630 263445]) ("js2-build-imenu-index" function nil nil nil "Turn `js2-imenu-recorder' into an imenu data structure." nil [263447 263740]) ("js2-test-print-chains" function nil ("chains") nil "Print a list of qname chains.
Each element of CHAINS is a list of the form (NODE [NODE *] pos);
i.e. one or more nodes, and an integer position as the list tail." nil [263742 264447]) ("js2-browse" package nil nil nil [264450 264471]) ("cl" include nil nil nil [267278 267291]) ("js2-version" variable nil "1.7.0" ((const . t)) "Version of JavaScript supported, plus minor js2 version." nil [267312 267403]) ("js2-record-face" function nil ("face") nil "Record a style run of FACE for the current token." nil [267405 267552]) ("js2-node-end" function nil ("n") nil "Computes the absolute end of node N.
Use with caution!  Assumes `js2-node-pos' is -absolute-, which
is only true until the node is added to its parent; i.e., while parsing." nil [267554 267803]) ("js2-record-comment" function nil nil nil (push (make-js2-comment-node :len (- js2-token-end js2-token-beg) :format js2-ts-comment-type) js2-scanned-comments) nil [267805 268250]) ("js2-peek-token" function nil nil nil "Returns the next token without consuming it.
If previous token was consumed, calls scanner to get new token.
If previous token was -not- consumed, returns it (idempotent).

This function will not return a newline (js2-EOL) - instead, it
gobbles newlines until it finds a non-newline token, and flags
that token as appearing just after a newline.

This function will also not return a js2-COMMENT.  Instead, it
records comments found in `js2-scanned-comments'.  If the token
returned by this function immediately follows a jsdoc comment,
the token is flagged as such.

Note that this function always returned the un-flagged token!
The flags, if any, are saved in `js2-current-flagged-token'." nil [268390 270272]) ("js2-peek-flagged-token" function nil nil nil "Returns the current token along with any flags set for it." nil [270300 270446]) ("js2-consume-token" function nil nil nil (setq js2-current-flagged-token js2-EOF) nil [270448 270522]) ("js2-next-token" function nil nil nil (prog1 (js2-peek-token) (js2-consume-token)) nil [270524 270609]) ("js2-next-flagged-token" function nil nil nil (js2-peek-token) nil [270611 270726]) ("js2-match-token" function nil ("match") nil "Consume and return t if next token matches MATCH, a bytecode.
Returns nil and consumes nothing if MATCH is not the next token." nil [270728 270968]) ("js2-valid-prop-name-token" function nil ("tt") nil (or (= tt js2-NAME) (and js2-allow-keywords-as-property-names (plusp tt) (aref js2-kwd-tokens tt))) nil [270970 271141]) ("js2-match-prop-name" function nil nil nil "Consume token and return t if next token is a valid property name.
It's valid if it's a js2-NAME, or `js2-allow-keywords-as-property-names'
is non-nil and it's a keyword token." nil [271143 271469]) ("js2-must-match-prop-name" function nil ("msg-id" "&optional" "pos" "len") nil (if (js2-match-prop-name) t (js2-report-error msg-id nil pos len) nil) nil [271471 271620]) ("js2-peek-token-or-eol" function nil nil nil "Return js2-EOL if the current token immediately follows a newline.
Else returns the current token.  Used in situations where we don't
consider certain token types valid if they are preceded by a newline.
One example is the postfix ++ or -- operator, which has to be on the
same line as its operand." nil [271622 272127]) ("js2-set-check-for-label" function nil nil nil (assert (= (logand js2-current-flagged-token js2-clear-ti-mask) js2-NAME)) nil [272129 272305]) ("js2-must-match" function nil ("token" "msg-id" "&optional" "pos" "len") nil "Match next token to token code TOKEN, or record a syntax error.
MSG-ID is the error message to report if the match fails.
Returns t on match, nil if no match." nil [272307 272617]) ("js2-inside-function" function nil nil nil (plusp js2-nesting-of-function) nil [272619 272686]) ("js2-set-requires-activation" function nil nil nil (if (js2-function-node-p js2-current-script-or-fn) (setf (js2-function-node-needs-activation js2-current-script-or-fn) t)) nil [272688 272860]) ("js2-check-activation-name" function nil ("name" "token") nil (when (js2-inside-function) (if (or (string= "arguments" name) (and js2-compiler-activation-names (gethash name js2-compiler-activation-names))) (js2-set-requires-activation))) nil [272862 273205]) ("js2-set-is-generator" function nil nil nil (if (js2-function-node-p js2-current-script-or-fn) (setf (js2-function-node-is-generator js2-current-script-or-fn) t)) nil [273207 273368]) ("js2-must-have-xml" function nil nil nil (unless js2-compiler-xml-available (js2-report-error "msg.XML.not.available")) nil [273370 273486]) ("js2-push-scope" function nil ("scope") nil "Push SCOPE, a `js2-scope', onto the lexical scope chain." nil [273488 273793]) ("js2-pop-scope" function nil nil nil (setq js2-current-scope (js2-scope-parent-scope js2-current-scope)) nil [273795 273900]) ("js2-enter-loop" function nil ("loop-node") nil (push loop-node js2-loop-set) nil [273902 274525]) ("js2-exit-loop" function nil nil nil (pop js2-loop-set) nil [274527 274625]) ("js2-enter-switch" function nil ("switch-node") nil (push switch-node js2-loop-and-switch-set) nil [274627 274713]) ("js2-exit-switch" function nil nil nil (pop js2-loop-and-switch-set) nil [274715 274776]) ("js2-parse" function nil ("&optional" "buf" "cb") nil "Tells the js2 parser to parse a region of JavaScript.

BUF is a buffer or buffer name containing the code to parse.
Call `narrow-to-region' first to parse only part of the buffer.

The returned AST root node is given some additional properties:
  `node-count' - total number of nodes in the AST
  `buffer' - BUF.  The buffer it refers to may change or be killed,
             so the value is not necessarily reliable.

An optional callback CB can be specified to report parsing
progress.  If `(functionp CB)' returns t, it will be called with
the current line number once before parsing begins, then again
each time the lexer reaches a new line number.

CB can also be a list of the form `(symbol cb ...)' to specify
multiple callbacks with different criteria.  Each symbol is a
criterion keyword, and the following element is the callback to
call

  :line  - called whenever the line number changes
  :token - called for each new token consumed

The list of criteria could be extended to include entering or
leaving a statement, an expression, or a function definition." nil [274778 277242]) ("js2-do-parse" function nil nil nil "Parse current buffer starting from current point.
Scanner should be initialized." nil [277293 278888]) ("js2-function-parser" function nil nil nil (js2-consume-token) nil [278890 278996]) ("js2-parse-function-body" function nil ("fn-node") nil (js2-must-match js2-LC "msg.no.brace.body") nil [278998 280049]) ("js2-parse-function-params" function nil ("fn-node" "pos") nil (if (js2-match-token js2-RP) (setf (js2-function-node-rp fn-node) (- js2-token-beg pos)) (let (params len param) (loop for tt = (js2-peek-token) do (cond ((or (= tt js2-LB) (= tt js2-LC)) (push (js2-parse-primary-expr) params)) (t (js2-must-match js2-NAME "msg.no.parm") (js2-record-face (quote js2-function-param-face)) (setq param (js2-create-name-node)) (js2-define-symbol js2-LP js2-ts-string param) (push param params))) while (js2-match-token js2-COMMA)) (if (js2-must-match js2-RP "msg.no.paren.after.parms") (setf (js2-function-node-rp fn-node) (- js2-token-beg pos))) (dolist (p params) (js2-node-add-children fn-node p) (push p (js2-function-node-params fn-node))))) nil [280051 281046]) ("js2-check-inconsistent-return-warning" function nil ("fn-node" "name") nil "Possibly show inconsistent-return warning.
Last token scanned is the close-curly for the function body." nil [281048 281954]) ("js2-parse-function" function nil ("function-type") nil "Function parser.  FUNCTION-TYPE is a symbol." nil [281956 286286]) ("js2-parse-statements" function nil ("&optional" "parent") nil "Parse a statement list.  Last token consumed must be js2-LC.

PARENT can be a `js2-block-node', in which case the statements are
appended to PARENT.  Otherwise a new `js2-block-node' is created
and returned.

This function does not match the closing js2-RC: the caller
matches the RC so it can provide a suitable error message if not
matched.  This means it's up to the caller to set the length of
the node to include the closing RC.  The node start pos is set to
the absolute buffer start position, and the caller should fix it
up to be relative to the parent node.  All children of this block
node are given relative start positions and correct lengths." nil [286288 287246]) ("js2-parse-statement" function nil nil nil (let (tt pn beg end) (and js2-parse-interruptable-p (zerop (% (incf js2-parse-stmt-count) js2-statements-per-pause)) (input-pending-p) (throw (quote interrupted) t)) (setq pn (js2-statement-helper)) (unless (js2-node-has-side-effects pn) (setq end (js2-node-end pn)) (save-excursion (goto-char end) (setq beg (max (js2-node-pos pn) (point-at-bol)))) (js2-add-strict-warning "msg.no.side.effects" nil beg end)) pn) nil [287248 287880]) ("js2-parsers" variable nil (let ((parsers (make-vector js2-num-tokens (function js2-parse-expr-stmt)))) (aset parsers js2-BREAK (function js2-parse-break)) (aset parsers js2-CONST (function js2-parse-const-var)) (aset parsers js2-CONTINUE (function js2-parse-continue)) (aset parsers js2-DEBUGGER (function js2-parse-debugger)) (aset parsers js2-DEFAULT (function js2-parse-default-xml-namespace)) (aset parsers js2-DO (function js2-parse-do)) (aset parsers js2-FOR (function js2-parse-for)) (aset parsers js2-FUNCTION (function js2-function-parser)) (aset parsers js2-IF (function js2-parse-if)) (aset parsers js2-LC (function js2-parse-block)) (aset parsers js2-LET (function js2-parse-let-stmt)) (aset parsers js2-NAME (function js2-parse-name-or-label)) (aset parsers js2-RETURN (function js2-parse-ret-yield)) (aset parsers js2-SEMI (function js2-parse-semi)) (aset parsers js2-SWITCH (function js2-parse-switch)) (aset parsers js2-THROW (function js2-parse-throw)) (aset parsers js2-TRY (function js2-parse-try)) (aset parsers js2-VAR (function js2-parse-const-var)) (aset parsers js2-WHILE (function js2-parse-while)) (aset parsers js2-WITH (function js2-parse-with)) (aset parsers js2-YIELD (function js2-parse-ret-yield)) parsers) ((const . t)) "A vector mapping token types to parser functions." nil [287948 289252]) ("js2-parse-warn-missing-semi" function nil ("beg" "end") nil (and js2-mode-show-strict-warnings js2-strict-missing-semi-warning (js2-add-strict-warning "msg.missing.semi" nil (max beg (save-excursion (goto-char end) (point-at-bol))) end)) nil [289254 289611]) ("js2-no-semi-insertion" variable nil (list js2-IF js2-SWITCH js2-WHILE js2-DO js2-FOR js2-TRY js2-WITH js2-LC js2-ERROR js2-SEMI js2-FUNCTION) ((const . t)) "List of tokens that don't do automatic semicolon insertion." nil [289613 289897]) ("js2-autoinsert-semi-and-warn" variable nil (list js2-ERROR js2-EOF js2-RC) ((const . t)) nil nil [289899 289972]) ("js2-statement-helper" function nil nil nil (let* ((tt (js2-peek-token)) (first-tt tt) (beg js2-token-beg) (parser (if (= tt js2-ERROR) (function js2-parse-semi) (aref js2-parsers tt))) pn tt-flagged) (and js2-labeled-stmt (js2-labeled-stmt-node-stmt js2-labeled-stmt) (setq js2-labeled-stmt nil)) (setq pn (funcall parser) tt-flagged (js2-peek-flagged-token) tt (logand tt-flagged js2-clear-ti-mask)) (unless (or (memq first-tt js2-no-semi-insertion) (js2-labeled-stmt-node-p pn)) (cond ((= tt js2-SEMI) (js2-consume-token) (setf (js2-node-len pn) (- js2-token-end beg))) ((memq tt js2-autoinsert-semi-and-warn) (js2-parse-warn-missing-semi beg (js2-node-end pn))) (t (if (js2-flag-not-set-p tt-flagged js2-ti-after-eol) (js2-report-error "msg.no.semi.stmt") (js2-parse-warn-missing-semi beg (js2-node-end pn)))))) pn) nil [289974 291344]) ("js2-parse-condition" function nil nil nil "Parse a parenthesized boolean expression, e.g. in an if- or while-stmt.
The parens are discarded and the expression node is returned.
The `pos' field of the return value is set to an absolute position
that must be fixed up by the caller.
Return value is a list (EXPR LP RP), with absolute paren positions." nil [291346 292289]) ("js2-parse-if" function nil nil nil "Parser for if-statement.  Last matched token must be js2-IF." nil [292291 293330]) ("js2-parse-switch" function nil nil nil "Parser for if-statement.  Last matched token must be js2-SWITCH." nil [293332 295995]) ("js2-parse-while" function nil nil nil "Parser for while-statement.  Last matched token must be js2-WHILE." nil [295997 296743]) ("js2-parse-do" function nil nil nil "Parser for do-statement.  Last matched token must be js2-DO." nil [296745 297837]) ("js2-parse-for" function nil nil nil "Parser for for-statement.  Last matched token must be js2-FOR.
Parses for, for-in, and for each-in statements." nil [297839 301581]) ("js2-parse-try" function nil nil nil "Parser for try-statement.  Last matched token must be js2-TRY." nil [301583 305070]) ("js2-parse-throw" function nil nil nil "Parser for throw-statement.  Last matched token must be js2-THROW." nil [305072 305669]) ("js2-match-jump-label-name" function nil ("label-name") nil "If break/continue specified a label, return that label's labeled stmt.
Returns the corresponding `js2-labeled-stmt-node', or if LABEL-NAME
does not match an existing label, reports an error and returns nil." nil [305671 306068]) ("js2-parse-break" function nil nil nil "Parser for break-statement.  Last matched token must be js2-BREAK." nil [306070 307424]) ("js2-parse-continue" function nil nil nil "Parser for continue-statement.  Last matched token must be js2-CONTINUE." nil [307426 308893]) ("js2-parse-with" function nil nil nil "Parser for with-statement.  Last matched token must be js2-WITH." nil [308895 309741]) ("js2-parse-const-var" function nil nil nil "Parser for var- or const-statement.
Last matched token must be js2-CONST or js2-VAR." nil [309743 310236]) ("js2-wrap-with-expr-stmt" function nil ("pos" "expr" "&optional" "add-child") nil (let ((pn (make-js2-expr-stmt-node :pos pos :len (js2-node-len expr) :type (if (js2-inside-function) js2-EXPR_VOID js2-EXPR_RESULT) :expr expr))) (if add-child (js2-node-add-children pn expr)) pn) nil [310238 310721]) ("js2-parse-let-stmt" function nil nil nil "Parser for let-statement.  Last matched token must be js2-LET." nil [310723 311304]) ("js2-parse-ret-yield" function nil nil nil (js2-parse-return-or-yield (js2-peek-token) nil) nil [311306 311387]) ("js2-parse-return-stmt-enders" variable nil (list js2-SEMI js2-RC js2-EOF js2-EOL js2-ERROR js2-RB js2-RP js2-YIELD) ((const . t)) nil nil [311389 311503]) ("js2-now-all-set" function nil ("before" "after" "mask") nil "Return whether or not the bits in the mask have changed to all set.
BEFORE is bits before change, AFTER is bits after change, and MASK is
the mask for bits.  Returns t if all the bits in the mask are set in AFTER
but not BEFORE." nil [311505 311859]) ("js2-parse-return-or-yield" function nil ("tt" "expr-context") nil (let ((pos js2-token-beg) (end js2-token-end) (before js2-end-flags) (inside-function (js2-inside-function)) e ret name) (unless inside-function (js2-report-error (if (eq tt js2-RETURN) "msg.bad.return" "msg.bad.yield"))) (js2-consume-token) (unless (memq (js2-peek-token-or-eol) js2-parse-return-stmt-enders) (setq e (js2-parse-expr) end (js2-node-end e))) (cond ((eq tt js2-RETURN) (js2-set-flag js2-end-flags (if (null e) js2-end-returns js2-end-returns-value)) (setq ret (make-js2-return-node :pos pos :len (- end pos) :retval e)) (js2-node-add-children ret e) (if (and js2-strict-inconsistent-return-warning (js2-now-all-set before js2-end-flags (logior js2-end-returns js2-end-returns-value))) (js2-add-strict-warning "msg.return.inconsistent" nil pos end))) (t (unless (js2-inside-function) (js2-report-error "msg.bad.yield")) (js2-set-flag js2-end-flags js2-end-yields) (setq ret (make-js2-yield-node :pos pos :len (- end pos) :value e)) (js2-node-add-children ret e) (unless expr-context (setq e ret ret (js2-wrap-with-expr-stmt pos e t)) (js2-set-requires-activation) (js2-set-is-generator)))) (when (and inside-function (js2-now-all-set before js2-end-flags (logior js2-end-yields js2-end-returns-value))) (setq name (js2-function-name js2-current-script-or-fn)) (if (zerop (length name)) (js2-report-error "msg.anon.generator.returns" nil pos (- end pos)) (js2-report-error "msg.generator.returns" name pos (- end pos)))) ret) nil [311861 314649]) ("js2-parse-debugger" function nil nil nil (js2-consume-token) nil [314651 314747]) ("js2-parse-block" function nil nil nil "Parser for a curly-delimited statement block.
Last token matched must be js2-LC." nil [314749 315182]) ("js2-parse-semi" function nil nil nil "Parse a statement or handle an error.
Last matched token is js-SEMI or js-ERROR." nil [315251 315658]) ("js2-parse-default-xml-namespace" function nil nil nil "Parse a `default xml namespace = <expr>' e4x statement." nil [315660 316794]) ("js2-record-label" function nil ("label" "bundle") nil (js2-consume-token) nil [316796 317681]) ("js2-parse-name-or-label" function nil nil nil "Parser for identifier or label.  Last token matched must be js2-NAME.
Called when we found a name in a statement context.  If it's a label, we gather
up any following labels and the next non-label statement into a
`js2-labeled-stmt-node' bundle and return that.  Otherwise we parse an
expression and return it wrapped in a `js2-expr-stmt-node'." nil [317683 319493]) ("js2-parse-expr-stmt" function nil nil nil "Default parser in statement context, if no recognized statement found." nil [319495 319661]) ("js2-parse-variables" function nil ("decl-type" "pos") nil "Parse a comma-separated list of variable declarations.
Could be a 'var', 'const' or 'let' expression, possibly in a for-loop initializer.

DECL-TYPE is a token value: either VAR, CONST, or LET depending on context.
For 'var' or 'const', the keyword should be the token last scanned.

POS is the position where the node should start. It's sometimes the
var/const/let keyword, and other times the beginning of the first token
in the first variable declaration.

Returns the parsed `js2-var-decl-node' expression node." nil [319663 322589]) ("js2-parse-let" function nil ("pos" "&optional" "stmt-p") nil "Parse a let expression or statement.
A let-expression is of the form `let (vars) expr'.
A let-statment is of the form `let (vars) {statements}'.
The third form of let is a variable declaration list, handled
by `js2-parse-variables'." nil [322591 324105]) ("js2-define-new-symbol" function nil ("decl-type" "name" "node") nil (js2-scope-put-symbol js2-current-scope name (make-js2-symbol decl-type name node)) nil [324107 324295]) ("js2-define-symbol" function nil ("decl-type" "name" "&optional" "node" "ignore-not-in-block") nil "Define a symbol in the current scope.
If NODE is non-nil, it is the AST node associated with the symbol." nil [324297 326382]) ("js2-parse-expr" function nil nil nil (let* ((pn (js2-parse-assign-expr)) (pos (js2-node-pos pn)) left right op-pos) (while (js2-match-token js2-COMMA) (setq op-pos (- js2-token-beg pos)) (if (= (js2-peek-token) js2-YIELD) (js2-report-error "msg.yield.parenthesized")) (setq right (js2-parse-assign-expr) left pn pn (make-js2-infix-node :type js2-COMMA :pos pos :len (- js2-ts-cursor pos) :op-pos op-pos :left left :right right)) (js2-node-add-children pn left right)) pn) nil [326384 327140]) ("js2-parse-assign-expr" function nil nil nil (let ((tt (js2-peek-token)) (pos js2-token-beg) pn left right op-pos) (if (= tt js2-YIELD) (js2-parse-return-or-yield tt t) (setq pn (js2-parse-cond-expr) tt (js2-peek-token)) (when (and (<= js2-first-assign tt) (<= tt js2-last-assign)) (js2-consume-token) (setq op-pos (- js2-token-beg pos) left pn right (js2-parse-assign-expr) pn (make-js2-assign-node :type tt :pos pos :len (- (js2-node-end right) pos) :op-pos op-pos :left left :right right)) (when js2-parse-ide-mode (js2-highlight-assign-targets pn left right) (if (or (js2-function-node-p right) (js2-object-node-p right)) (js2-record-imenu-functions right left))) (js2-node-add-children pn left right)) pn)) nil [327142 328395]) ("js2-parse-cond-expr" function nil nil nil (let ((pos js2-token-beg) (pn (js2-parse-or-expr)) test-expr if-true if-false q-pos c-pos) (when (js2-match-token js2-HOOK) (setq q-pos (- js2-token-beg pos) if-true (js2-parse-assign-expr)) (js2-must-match js2-COLON "msg.no.colon.cond") (setq c-pos (- js2-token-beg pos) if-false (js2-parse-assign-expr) test-expr pn pn (make-js2-cond-node :pos pos :len (- (js2-node-end if-false) pos) :test-expr test-expr :true-expr if-true :false-expr if-false :q-pos q-pos :c-pos c-pos)) (js2-node-add-children pn test-expr if-true if-false)) pn) nil [328397 329302]) ("js2-make-binary" function nil ("type" "left" "parser") nil "Helper for constructing a binary-operator AST node.
LEFT is the left-side-expression, already parsed, and the
binary operator should have just been matched.
PARSER is a function to call to parse the right operand,
or a `js2-node' struct if it has already been parsed." nil [329304 330147]) ("js2-parse-or-expr" function nil nil nil (let ((pn (js2-parse-and-expr))) (when (js2-match-token js2-OR) (setq pn (js2-make-binary js2-OR pn (quote js2-parse-or-expr)))) pn) nil [330149 330383]) ("js2-parse-and-expr" function nil nil nil (let ((pn (js2-parse-bit-or-expr))) (when (js2-match-token js2-AND) (setq pn (js2-make-binary js2-AND pn (quote js2-parse-and-expr)))) pn) nil [330385 330626]) ("js2-parse-bit-or-expr" function nil nil nil (let ((pn (js2-parse-bit-xor-expr))) (while (js2-match-token js2-BITOR) (setq pn (js2-make-binary js2-BITOR pn (quote js2-parse-bit-xor-expr)))) pn) nil [330628 330882]) ("js2-parse-bit-xor-expr" function nil nil nil (let ((pn (js2-parse-bit-and-expr))) (while (js2-match-token js2-BITXOR) (setq pn (js2-make-binary js2-BITXOR pn (quote js2-parse-bit-and-expr)))) pn) nil [330884 331141]) ("js2-parse-bit-and-expr" function nil nil nil (let ((pn (js2-parse-eq-expr))) (while (js2-match-token js2-BITAND) (setq pn (js2-make-binary js2-BITAND pn (quote js2-parse-eq-expr)))) pn) nil [331143 331390]) ("js2-parse-eq-ops" variable nil (list js2-EQ js2-NE js2-SHEQ js2-SHNE) ((const . t)) nil nil [331392 331460]) ("js2-parse-eq-expr" function nil nil nil (let ((pn (js2-parse-rel-expr)) tt) (while (memq (setq tt (js2-peek-token)) js2-parse-eq-ops) (js2-consume-token) (setq pn (js2-make-binary tt pn (quote js2-parse-rel-expr)))) pn) nil [331462 331757]) ("js2-parse-rel-ops" variable nil (list js2-IN js2-INSTANCEOF js2-LE js2-LT js2-GE js2-GT) ((const . t)) nil nil [331759 331846]) ("js2-parse-rel-expr" function nil nil nil (let ((pn (js2-parse-shift-expr)) (continue t) tt) (while continue (setq tt (js2-peek-token)) (cond ((and js2-in-for-init (= tt js2-IN)) (setq continue nil)) ((memq tt js2-parse-rel-ops) (js2-consume-token) (setq pn (js2-make-binary tt pn (quote js2-parse-shift-expr)))) (t (setq continue nil)))) pn) nil [331848 332262]) ("js2-parse-shift-ops" variable nil (list js2-LSH js2-URSH js2-RSH) ((const . t)) nil nil [332264 332328]) ("js2-parse-shift-expr" function nil nil nil (let ((pn (js2-parse-add-expr)) tt (continue t)) (while continue (setq tt (js2-peek-token)) (if (memq tt js2-parse-shift-ops) (progn (js2-consume-token) (setq pn (js2-make-binary tt pn (quote js2-parse-add-expr)))) (setq continue nil))) pn) nil [332330 332675]) ("js2-parse-add-expr" function nil nil nil (let ((pn (js2-parse-mul-expr)) tt (continue t)) (while continue (setq tt (js2-peek-token)) (if (or (= tt js2-ADD) (= tt js2-SUB)) (progn (js2-consume-token) (setq pn (js2-make-binary tt pn (quote js2-parse-mul-expr)))) (setq continue nil))) pn) nil [332677 333025]) ("js2-parse-mul-ops" variable nil (list js2-MUL js2-DIV js2-MOD) ((const . t)) nil nil [333027 333088]) ("js2-parse-mul-expr" function nil nil nil (let ((pn (js2-parse-unary-expr)) tt (continue t)) (while continue (setq tt (js2-peek-token)) (if (memq tt js2-parse-mul-ops) (progn (js2-consume-token) (setq pn (js2-make-binary tt pn (quote js2-parse-unary-expr)))) (setq continue nil))) pn) nil [333090 333435]) ("js2-make-unary" function nil ("type" "parser" "&rest" "args") nil "Make a unary node of type TYPE.
PARSER is either a node (for postfix operators) or a function to call
to parse the operand (for prefix operators)." nil [333437 334194]) ("js2-incrementable-node-types" variable nil (list js2-NAME js2-GETPROP js2-GETELEM js2-GET_REF js2-CALL) ((const . t)) "Node types that can be the operand of a ++ or -- operator." nil [334196 334361]) ("js2-check-bad-inc-dec" function nil ("tt" "beg" "end" "unary") nil (unless (memq (js2-node-type (js2-unary-node-operand unary)) js2-incrementable-node-types) (js2-report-error (if (= tt js2-INC) "msg.bad.incr" "msg.bad.decr") nil beg (- end beg))) nil [334363 334689]) ("js2-parse-unary-expr" function nil nil nil (let ((tt (js2-peek-token)) pn expr beg end) (cond ((or (= tt js2-VOID) (= tt js2-NOT) (= tt js2-BITNOT) (= tt js2-TYPEOF)) (js2-consume-token) (js2-make-unary tt (quote js2-parse-unary-expr))) ((= tt js2-ADD) (js2-consume-token) (js2-make-unary js2-POS (quote js2-parse-unary-expr))) ((= tt js2-SUB) (js2-consume-token) (js2-make-unary js2-NEG (quote js2-parse-unary-expr))) ((or (= tt js2-INC) (= tt js2-DEC)) (js2-consume-token) (prog1 (setq beg js2-token-beg end js2-token-end expr (js2-make-unary tt (quote js2-parse-member-expr) t)) (js2-check-bad-inc-dec tt beg end expr))) ((= tt js2-DELPROP) (js2-consume-token) (js2-make-unary js2-DELPROP (quote js2-parse-unary-expr))) ((= tt js2-ERROR) (js2-consume-token) (make-js2-error-node)) ((and (= tt js2-LT) js2-compiler-xml-available) (js2-consume-token) (js2-parse-member-expr-tail t (js2-parse-xml-initializer))) (t (setq pn (js2-parse-member-expr t) tt (js2-peek-token-or-eol)) (when (or (= tt js2-INC) (= tt js2-DEC)) (js2-consume-token) (setf expr pn pn (js2-make-unary tt expr)) (js2-node-set-prop pn (quote postfix) t) (js2-check-bad-inc-dec tt js2-token-beg js2-token-end pn)) pn))) nil [334691 336419]) ("js2-parse-xml-initializer" function nil nil nil "Parse an E4X XML initializer.
I'm parsing it the way Rhino parses it, but without the tree-rewriting.
Then I'll postprocess the result, depending on whether we're in IDE
mode or codegen mode, and generate the appropriate rewritten AST.
IDE mode uses a rich AST that models the XML structure.  Codegen mode
just concatenates everything and makes a new XML or XMLList out of it." nil [336421 338648]) ("js2-parse-argument-list" function nil nil nil "Parse an argument list and return it as a lisp list of nodes.
Returns the list in reverse order.  Consumes the right-paren token." nil [338651 339169]) ("js2-parse-member-expr" function nil ("&optional" "allow-call-syntax") nil (let ((tt (js2-peek-token)) pn pos target args beg end init tail) (if (/= tt js2-NEW) (setq pn (js2-parse-primary-expr)) (js2-consume-token) (setq pos js2-token-beg beg pos target (js2-parse-member-expr) end (js2-node-end target) pn (make-js2-new-node :pos pos :target target :len (- end pos))) (js2-node-add-children pn target) (when (js2-match-token js2-LP) (setf beg pos pos js2-token-beg args (nreverse (js2-parse-argument-list)) (js2-new-node-args pn) args end js2-token-end (js2-new-node-lp pn) (- pos beg) (js2-new-node-rp pn) (- end 1 beg)) (apply (function js2-node-add-children) pn args)) (when (and js2-allow-rhino-new-expr-initializer (js2-match-token js2-LC)) (setf init (js2-parse-object-literal) end (js2-node-end init) (js2-new-node-initializer pn) init) (js2-node-add-children pn init)) (setf (js2-node-len pn) (- beg pos))) (js2-parse-member-expr-tail allow-call-syntax pn)) nil [339171 340647]) ("js2-parse-member-expr-tail" function nil ("allow-call-syntax" "pn") nil "Parse a chain of property/array accesses or function calls.
Includes parsing for E4X operators like `..' and `.@'.
If ALLOW-CALL-SYNTAX is nil, stops when we encounter a left-paren.
Returns an expression tree that includes PN, the parent node." nil [340649 341596]) ("js2-parse-dot-query" function nil ("pn") nil "Parse a dot-query expression, e.g. foo.bar.(@name == 2)
Last token parsed must be `js2-DOTQUERY'." nil [341598 342540]) ("js2-parse-element-get" function nil ("pn") nil "Parse an element-get expression, e.g. foo[bar].
Last token parsed must be `js2-RB'." nil [342542 343380]) ("js2-parse-function-call" function nil ("pn") nil (let (args (pos (js2-node-pos pn))) (js2-consume-token) (setq pn (make-js2-call-node :pos pos :target pn :lp (- js2-token-beg pos))) (js2-node-add-children pn (js2-call-node-target pn)) (setf args (nreverse (js2-parse-argument-list)) (js2-call-node-rp pn) (- js2-token-beg pos) (js2-call-node-args pn) args) (apply (function js2-node-add-children) pn args) (setf (js2-node-len pn) (- js2-ts-cursor pos)) pn) nil [343382 343996]) ("js2-parse-property-access" function nil ("tt" "pn") nil "Parse a property access, XML descendants access, or XML attr access." nil [343998 346621]) ("js2-parse-attribute-access" function nil nil nil "Parse an E4X XML attribute expression.
This includes expressions of the forms:

  @attr      @ns::attr     @ns::*
  @*         @*::attr      @*::*
  @[expr]    @*::[expr]    @ns::[expr]

Called if we peeked an '@' token." nil [346623 347604]) ("js2-parse-property-name" function nil ("at-pos" "s" "member-type-flags") nil "Check if :: follows name in which case it becomes qualified name.

AT-POS is a natural number if we just read an '@' token, else nil.
S is the name or string that was matched:  an identifier, 'throw' or '*'.
MEMBER-TYPE-FLAGS is a bit set tracking whether we're a '.' or '..' child.

Returns a `js2-xml-ref-node' if it's an attribute access, a child of a '..'
operator, or the name is followed by ::.  For a plain name, returns a
`js2-name-node'.  Returns a `js2-error-node' for malformed XML expressions." nil [347606 349465]) ("js2-parse-xml-elem-ref" function nil ("at-pos" "&optional" "namespace" "colon-pos") nil "Parse the [expr] portion of an xml element reference.
For instance, @[expr], @*::[expr], or ns::[expr]." nil [349467 350473]) ("js2-parse-primary-expr" function nil nil nil "Parses a literal (leaf) expression of some sort.
Includes complex literals such as functions, object-literals,
array-literals, array comprehensions and regular expressions." nil [350475 353060]) ("js2-parse-name" function nil ("tt-flagged" "tt") nil (let ((name js2-ts-string) (name-pos js2-token-beg)) (if (and (js2-flag-set-p tt-flagged js2-ti-check-label) (= (js2-peek-token) js2-COLON)) (prog1 (make-js2-label-node :pos name-pos :len (- js2-token-end name-pos) :name name) (js2-set-face name-pos js2-token-end (quote font-lock-variable-name-face) (quote record))) (js2-save-name-token-data name-pos name) (if js2-compiler-xml-available (js2-parse-property-name nil name 0) (js2-create-name-node (quote check-activation))))) nil [353062 354155]) ("js2-parse-warn-trailing-comma" function nil ("msg" "pos" "elems" "comma-pos") nil (js2-add-strict-warning msg nil (max (if elems (js2-node-pos (car elems)) pos) (save-excursion (goto-char comma-pos) (back-to-indentation) (point))) comma-pos) nil [354157 354516]) ("js2-parse-array-literal" function nil nil nil (let ((pos js2-token-beg) (end js2-token-end) (after-lb-or-comma t) after-comma tt elems pn (continue t)) (while continue (setq tt (js2-peek-token)) (cond ((= tt js2-COMMA) (js2-consume-token) (setq after-comma js2-token-end) (if (not after-lb-or-comma) (setq after-lb-or-comma t) (push nil elems))) ((or (= tt js2-RB) (= tt js2-EOF)) (if (= tt js2-EOF) (js2-report-error "msg.no.bracket.arg" nil pos) (js2-consume-token)) (setq continue nil end js2-token-end pn (make-js2-array-node :pos pos :len (- js2-ts-cursor pos) :elems (nreverse elems))) (apply (function js2-node-add-children) pn (js2-array-node-elems pn)) (when after-comma (js2-parse-warn-trailing-comma "msg.array.trailing.comma" pos elems after-comma))) ((and (>= js2-language-version 170) (= tt js2-FOR) (not after-lb-or-comma) elems (not (cdr elems))) (setf continue nil pn (js2-parse-array-comprehension (car elems) pos))) (t (unless after-lb-or-comma (js2-report-error "msg.no.bracket.arg")) (push (js2-parse-assign-expr) elems) (setq after-lb-or-comma nil after-comma nil)))) pn) nil [354518 356345]) ("js2-parse-array-comprehension" function nil ("expr" "pos") nil "Parse a JavaScript 1.7 Array Comprehension.
EXPR is the first expression after the opening left-bracket.
POS is the beginning of the LB token preceding EXPR.
We should have just parsed the 'for' keyword before calling this function." nil [356347 357640]) ("js2-parse-array-comp-loop" function nil nil nil "Parse a 'for [each] (foo in bar)' expression in an Array comprehension.
Last token peeked should be the initial FOR." nil [357642 360019]) ("js2-parse-object-literal" function nil nil nil (let ((pos js2-token-beg) tt elems result after-comma (continue t)) (while continue (setq tt (js2-peek-token)) (cond ((or (js2-valid-prop-name-token tt) (= tt js2-STRING)) (setq after-comma nil result (js2-parse-named-prop tt)) (if (and (null result) (not js2-recover-from-parse-errors)) (setq continue nil) (push result elems))) ((= tt js2-NUMBER) (js2-consume-token) (setq after-comma nil) (push (js2-parse-plain-property (make-js2-number-node)) elems)) ((= tt js2-RC) (setq continue nil) (if after-comma (js2-parse-warn-trailing-comma "msg.extra.trailing.comma" pos elems after-comma))) (t (js2-report-error "msg.bad.prop") (unless js2-recover-from-parse-errors (setq continue nil)))) (if (js2-match-token js2-COMMA) (setq after-comma js2-token-end) (setq continue nil))) (js2-must-match js2-RC "msg.no.brace.prop") (setq result (make-js2-object-node :pos pos :len (- js2-ts-cursor pos) :elems (nreverse elems))) (apply (function js2-node-add-children) result (js2-object-node-elems result)) result) nil [360021 361635]) ("js2-parse-named-prop" function nil ("tt") nil "Parse a name, string, or getter/setter object property." nil [361637 362920]) ("js2-parse-plain-property" function nil ("prop") nil "Parse a non-getter/setter property in an object literal.
PROP is the node representing the property:  a number, name or string." nil [362922 363662]) ("js2-parse-getter-setter-prop" function nil ("pos" "prop" "get-p") nil "Parse getter or setter property in an object literal.
JavaScript syntax is:

  { get foo() {...}, set foo(x) {...} }

POS is the start position of the `get' or `set' keyword.
PROP is the `js2-name-node' representing the property name.
GET-P is non-nil if the keyword was `get'." nil [363664 364821]) ("js2-create-name-node" function nil ("&optional" "check-activation-p" "token") nil "Create a name node using the token info from last scanned name.
In some cases we need to either synthesize a name node, or we lost
the name token information by peeking.  If the TOKEN parameter is
not `js2-NAME', then we use the token info saved in instance vars." nil [364823 365691]) ("js2-parse" package nil nil nil [365693 365713]) ("js-possibly-braceless-keyword-re" variable nil (regexp-opt (quote ("catch" "do" "else" "finally" "for" "if" "try" "while" "with" "let")) (quote words)) ((const . t)) "Regular expression matching keywords that are optionally
followed by an opening brace." nil [367774 368007]) ("js-indent-operator-re" variable nil (concat "[-+*/%<>=&^|?:.]\\([^-+*/]\\|$\\)\\|" (regexp-opt (quote ("in" "instanceof")) (quote words))) ((const . t)) "Regular expression matching operators that affect indentation
of continued expressions." nil [368009 368234]) ("js2-code-at-bol-p" function nil nil nil "Return t if the first character on line is non-whitespace." nil [368432 368532]) ("js2-insert-and-indent" function nil ("key") ((user-visible . t)) "Run command bound to key and indent current line. Runs the command
bound to KEY in the global keymap and indents the current line." nil [368617 369269]) ("js-re-search-forward-inner" function nil ("regexp" "&optional" "bound" "count") nil "Auxiliary function for `js-re-search-forward'." nil [369271 370036]) ("js-re-search-forward" function nil ("regexp" "&optional" "bound" "noerror" "count") nil "Search forward but ignore strings and comments. Invokes
`re-search-forward' but treats the buffer as if strings and
comments have been removed." nil [370038 370765]) ("js-re-search-backward-inner" function nil ("regexp" "&optional" "bound" "count") nil "Auxiliary function for `js-re-search-backward'." nil [370767 371519]) ("js-re-search-backward" function nil ("regexp" "&optional" "bound" "noerror" "count") nil "Search backward but ignore strings and comments. Invokes
`re-search-backward' but treats the buffer as if strings and
comments have been removed." nil [371521 372252]) ("js-looking-at-operator-p" function nil nil nil "Return non-nil if text after point is an operator (that is not
a comma)." nil [372254 372607]) ("js-continued-expression-p" function nil nil nil "Returns non-nil if the current line continues an expression." nil [372609 373038]) ("js-end-of-do-while-loop-p" function nil nil ((user-visible . t)) "Returns non-nil if word after point is `while' of a do-while
statement, else returns nil. A braceless do-while statement
spanning several lines requires that the start of the loop is
indented to the same column as the current line." nil [373040 373999]) ("js-ctrl-statement-indentation" function nil nil nil "Returns the proper indentation of the current line if it
starts the body of a control statement without braces, else
returns nil." nil [374001 375159]) ("js2-indent-in-array-comp" function nil ("parse-status") nil "Return non-nil if we think we're in an array comprehension.
In particular, return the buffer position of the first `for' kwd." nil [375161 376101]) ("js2-array-comp-indentation" function nil ("parse-status" "for-kwd") nil (if (js2-same-line for-kwd) (save-excursion (goto-char (nth 1 parse-status)) (forward-char 1) (skip-chars-forward " 	") (current-column)) (save-excursion (goto-char for-kwd) (current-column))) nil [376103 376443]) ("js-proper-indentation" function nil ("parse-status") nil "Return the proper indentation for the current line." nil [376445 378221]) ("js2-lineup-comment" function nil ("parse-status") nil "Indent a multi-line block comment continuation line." nil [378223 378638]) ("js2-backward-sws" function nil nil ((user-visible . t)) "Move backward through whitespace and comments." nil [378640 378765]) ("js2-forward-sws" function nil nil ((user-visible . t)) "Move forward through whitespace and comments." nil [378767 378889]) ("js2-current-indent" function nil ("&optional" "pos") nil "Return column of indentation on current line.
If POS is non-nil, go to that point and return indentation for that line." nil [378891 379163]) ("js2-arglist-close" function nil nil nil "Return non-nil if we're on a line beginning with a close-paren/brace." nil [379165 379395]) ("js2-indent-looks-like-label-p" function nil nil nil (goto-char (point-at-bol)) nil [379397 379540]) ("js2-indent-in-objlit-p" function nil ("parse-status") nil "Return non-nil if this looks like an object-literal entry." nil [379542 379940]) ("js2-indent-objlit-arg-p" function nil ("parse-status") nil (save-excursion (back-to-indentation) (js2-backward-sws) (and (eq (1- (point)) (nth 1 parse-status)) (eq (char-before) 123) (progn (forward-char -1) (skip-chars-backward " 	") (eq (char-before) 40)))) nil [380167 380483]) ("js2-indent-case-block-p" function nil nil nil (save-excursion (back-to-indentation) (js2-backward-sws) (goto-char (point-at-bol)) (skip-chars-forward " 	") (save-match-data (looking-at "case\\s-.+:"))) nil [380485 380707]) ("js2-syntax-bol" function nil nil nil "Return the point at the first non-whitespace char on the line.
Returns `point-at-bol' if the line is empty." nil [380709 380935]) ("js2-bounce-indent" function nil ("normal-col" "parse-status") nil "Cycle among alternate computed indentation positions.
PARSE-STATUS is the result of `parse-partial-sexp' from the beginning
of the buffer to the current point.  NORMAL-COL is the indentation
column computed by the heuristic guesser based on current paren,
bracket, brace and statement nesting." nil [380937 387531]) ("js2-1-line-comment-continuation-p" function nil nil nil "Return t if we're in a 1-line comment continuation.
If so, we don't ever want to use bounce-indent." nil [387533 388035]) ("js2-indent-line" function nil nil ((user-visible . t)) "Indent the current line as JavaScript source text." nil [388037 389665]) ("js2-indent-region" function nil ("start" "end") nil "Indent the region, but don't use bounce indenting." nil [389667 389869]) ("js2-indent" package nil nil nil [389896 389917]) ("eval-when-compile" code nil [389948 389983]) ("imenu" include nil nil nil [389985 390001]) ("cc-cmds" include nil nil nil [390002 390020]) ("js2-mode" function nil nil ((user-visible . t)) "Major mode for editing JavaScript code." nil [390134 393684]) ("js2-mode-check-compat" function nil nil nil "Signal an error if we can't run with this version of Emacs." nil [393686 394175]) ("js2-mode-exit" function nil nil nil (interactive) nil [394177 394603]) ("js2-before-save" function nil nil nil "Clean up whitespace before saving file.
You can disable this by customizing `js2-cleanup-whitespace'." nil [394605 394962]) ("js2-mode-reset-timer" function nil nil nil (if js2-mode-parse-timer (cancel-timer js2-mode-parse-timer)) nil [394964 395197]) ("js2-mode-edit" function nil ("beg" "end" "len") nil "Schedule a new parse after buffer is edited." nil [395199 395369]) ("js2-mode-run-font-lock" function nil nil nil "Run `font-lock-fontify-buffer' after parsing/highlighting.
This is intended to allow modes that install their own font-lock keywords
to work with js2-mode.  In practice it never seems to work for long.
Hopefully the Emacs maintainers can help figure out a way to make it work." nil [395371 396230]) ("js2-reparse" function nil ("&optional" "force") nil "Re-parse current buffer after user finishes some data entry.
If we get any user input while parsing, including cursor motion,
we discard the parse and reschedule it.  If FORCE is nil, then the
buffer will only rebuild its `js2-mode-ast' if the buffer is dirty." nil [396232 398209]) ("js2-mode-show-node" function nil nil ((user-visible . t)) "Debugging aid:  highlight selected AST node on mouse click." nil [398211 399144]) ("js2-mode-hide-overlay" function nil ("&optional" "p1" "p2") nil "Remove the debugging overlay when the point moves." nil [399146 399719]) ("js2-mode-reset" function nil nil ((user-visible . t)) "Debugging helper; resets everything." nil [399721 399834]) ("js2-mode-show-warn-or-err" function nil ("e" "face") nil "Highlight a warning or error E with FACE.
E is a list of ((MSG-KEY MSG-ARG) BEG END)." nil [399836 400512]) ("js2-remove-overlays" function nil nil nil "Remove overlays from buffer that have a `js2' property." nil [400514 400785]) ("js2-mode-fontify-regions" function nil nil nil "Apply fontifications recorded during parsing." nil [400787 401373]) ("js2-mode-show-errors" function nil nil nil "Highlight syntax errors." nil [401375 401575]) ("js2-mode-remove-suppressed-warnings" function nil nil nil "Take suppressed warnings out of the AST warnings list.
This ensures that the counts and `next-error' are correct." nil [401577 402915]) ("js2-mode-show-warnings" function nil nil nil "Highlight strict-mode warnings." nil [402917 403133]) ("js2-echo-error" function nil ("old-point" "new-point") nil "Called by point-motion hooks." nil [403135 403305]) ("defalias" code nil [403307 403350]) ("js2-enter-key" function nil nil ((user-visible . t)) "Handle user pressing the Enter key." nil [403352 404087]) ("js2-mode-split-string" function nil ("parse-status") nil "Turn a newline in mid-string into a string concatenation." nil [404089 404974]) ("js2-mode-extend-comment" function nil nil nil "When inside a comment block, add comment prefix." nil [404976 406661]) ("js2-fill-string" function nil ("beg" "quote") nil "Line-wrap a single-line string into a multi-line string.
BEG is the string beginning, QUOTE is the quote char." nil [406663 407727]) ("js2-fill-paragraph" function nil ("arg") nil "Fill paragraph after point.  Prefix ARG means justify as well.
Has special handling for filling in comments and strings." nil [407729 408515]) ("js2-fill-comment" function nil ("parse-status" "arg") nil "Fill-paragraph in a block comment." nil [408517 410075]) ("js2-beginning-of-line" function nil nil ((user-visible . t)) "Toggles point between bol and first non-whitespace char in line.
Also moves past comment delimiters when inside comments." nil [410077 410692]) ("js2-end-of-line" function nil nil ((user-visible . t)) "Toggles point between eol and last non-whitespace char in line." nil [410694 410883]) ("js2-enter-mirror-mode" function nil nil ((user-visible . t)) "Turns on mirror mode, where quotes, brackets etc are mirrored automatically
  on insertion." nil [410885 411638]) ("js2-leave-mirror-mode" function nil nil ((user-visible . t)) "Turns off mirror mode." nil [411640 411835]) ("js2-mode-inside-string" function nil nil nil "Return non-nil if inside a string.
Actually returns the quote character that begins the string." nil [411837 412106]) ("js2-mode-inside-comment-or-string" function nil nil nil "Return non-nil if inside a comment or string." nil [412108 412628]) ("js2-mode-match-curly" function nil ("arg") ((user-visible . t)) "Insert matching curly-brace." nil [412630 413734]) ("js2-mode-match-bracket" function nil nil ((user-visible . t)) "Insert matching bracket." nil [413736 414080]) ("js2-mode-match-paren" function nil nil ((user-visible . t)) "Insert matching paren unless already inserted." nil [414082 414446]) ("js2-match-quote" function nil ("quote-string") nil (let ((start-quote (js2-mode-inside-string))) (cond ((js2-comment-at-point) (insert quote-string)) ((not start-quote) (insert quote-string) (unless (looking-at "[^ 	
]") (save-excursion (insert quote-string)))) ((looking-at quote-string) (if (looking-back "[^\\]\\\\") (insert quote-string) (forward-char 1))) ((and js2-mode-escape-quotes (save-excursion (save-match-data (re-search-forward quote-string (point-at-eol) t)))) (insert (if (looking-back "[^\\]\\\\") quote-string (concat "\\" quote-string)))) (t (insert quote-string)))) nil [414448 415527]) ("js2-mode-match-single-quote" function nil nil ((user-visible . t)) "Insert matching single-quote." nil [415564 415865]) ("js2-mode-match-double-quote" function nil nil ((user-visible . t)) "Insert matching double-quote." nil [415867 415980]) ("js2-mode-magic-close-paren" function nil nil ((user-visible . t)) "Skip over close-paren rather than inserting, where appropriate.
Uses some heuristics to try to figure out the right thing to do." nil [415982 416801]) ("js2-mode-wait-for-parse" function nil ("callback") nil "Invoke CALLBACK when parsing is finished.
If parsing is already finished, calls CALLBACK immediately." nil [416803 417132]) ("js2-mode-parse-finished" function nil nil nil "Invoke callbacks in `js2-mode-pending-parse-callbacks'." nil [417134 417625]) ("js2-mode-flag-region" function nil ("from" "to" "flag") nil "Hide or show text from FROM to TO, according to FLAG.
If FLAG is nil then text is shown, while if FLAG is t the text is hidden.
Returns the created overlay if FLAG is non-nil." nil [417627 418102]) ("js2-isearch-open-invisible" function nil ("overlay") nil (js2-mode-show-element) nil [418257 418399]) ("js2-mode-invisible-overlay-bounds" function nil ("&optional" "pos") nil "Return cons cell of bounds of folding overlay at POS.
Returns nil if not found." nil [418401 418839]) ("js2-mode-function-at-point" function nil ("&optional" "pos") nil "Return the innermost function node enclosing current point.
Returns nil if point is not in a function." nil [418841 419185]) ("js2-mode-toggle-element" function nil nil ((user-visible . t)) "Hide or show the foldable element at the point." nil [419187 420314]) ("js2-mode-hide-element" function nil nil ((user-visible . t)) "Fold/hide contents of a block, showing ellipses.
Show the hidden text with \\[js2-mode-show-element]." nil [420316 421246]) ("js2-mode-show-element" function nil nil ((user-visible . t)) "Show the hidden element at current point." nil [421248 421511]) ("js2-mode-show-all" function nil nil ((user-visible . t)) "Show all of the text in the buffer." nil [421513 421650]) ("js2-mode-toggle-hide-functions" function nil nil nil (interactive) nil [421652 421804]) ("js2-mode-hide-functions" function nil nil ((user-visible . t)) "Hides all non-nested function bodies in the buffer.
Use \\[js2-mode-show-all] to reveal them, or \\[js2-mode-show-element]
to open an individual entry." nil [421806 422266]) ("js2-mode-function-hider" function nil ("n" "endp") nil (when (not endp) (let ((tt (js2-node-type n)) body beg end) (cond ((and (= tt js2-FUNCTION) (setq body (js2-function-node-body n))) (setq beg (js2-node-abs-pos body) end (+ beg (js2-node-len body))) (js2-mode-flag-region (1+ beg) (1- end) (quote hide)) nil) (t t)))) nil [422268 422702]) ("js2-mode-show-functions" function nil nil ((user-visible . t)) "Un-hide any folded function bodies in the buffer." nil [422738 423224]) ("js2-mode-hide-comment" function nil ("n") nil (let* ((head (if (eq (js2-comment-node-format n) (quote jsdoc)) 3 2)) (beg (+ (js2-node-abs-pos n) head)) (end (- (+ beg (js2-node-len n)) head 2)) (o (js2-mode-flag-region beg end (quote hide)))) (overlay-put o (quote comment) t)) nil [423226 423588]) ("js2-mode-toggle-hide-comments" function nil nil ((user-visible . t)) "Folds all block comments in the buffer.
Use \\[js2-mode-show-all] to reveal them, or \\[js2-mode-show-element]
to open an individual entry." nil [423590 423882]) ("js2-mode-hide-comments" function nil nil nil (interactive) nil [423884 424338]) ("js2-mode-extend-//-comment" function nil ("direction") nil "Find start or end of a block of similar //-comment lines.
DIRECTION is -1 to look back, 1 to look forward.
INDENT is the indentation level to match.
Returns the end-of-line position of the furthest adjacent
//-comment line with the same indentation as the current line.
If there is no such matching line, returns current end of line." nil [424340 425057]) ("js2-mode-hide-//-comments" function nil nil nil "Fold adjacent 1-line comments, showing only snippet of first one." nil [425059 425589]) ("js2-mode-toggle-//-comment" function nil nil nil "Fold or un-fold any multi-line //-comment at point.
Caller should have determined that this line starts with a //-comment." nil [425591 426188]) ("js2-mode-show-comments" function nil nil ((user-visible . t)) "Un-hide any hidden comments, leaving other hidden elements alone." nil [426190 426632]) ("js2-mode-display-warnings-and-errors" function nil nil ((user-visible . t)) "Turn on display of warnings and errors." nil [426634 426842]) ("js2-mode-hide-warnings-and-errors" function nil nil ((user-visible . t)) "Turn off display of warnings and errors." nil [426844 427054]) ("js2-mode-toggle-warnings-and-errors" function nil nil ((user-visible . t)) "Toggle the display of warnings and errors.
Some users don't like having warnings/errors reported while they type." nil [427056 427570]) ("js2-mode-customize" function nil nil nil (interactive) nil [427572 427647]) ("js2-mode-forward-sexp" function nil ("&optional" "arg") ((user-visible . t)) "Move forward across one statement or balanced expression.
With ARG, do it that many times.  Negative arg -N means
move backward across N balanced expressions." nil [427649 428903]) ("js2-next-error" function nil ("&optional" "arg" "reset") ((user-visible . t)) "Move to next parse error.
Typically invoked via \\[next-error].
ARG is the number of errors, forward or backward, to move.
RESET means start over from the beginning." nil [428905 430485]) ("js2-mouse-3" function nil nil ((user-visible . t)) "Make right-click move the point to the click location.
This makes right-click context menu operations a bit more intuitive.
The point will not move if the region is active, however, to avoid
destroying the region selection." nil [430487 430915]) ("js2-mode-create-imenu-index" function nil nil nil "Return an alist for `imenu--index-alist'." nil [430917 431337]) ("js2-mode-find-tag" function nil nil nil "Replacement for `find-tag-default'.
`find-tag-default' returns a ridiculous answer inside comments." nil [431339 431980]) ("js2-mode-forward-sibling" function nil nil nil "Move to the end of the sibling following point in parent.
Returns non-nil if successful, or nil if there was no following sibling." nil [431982 432404]) ("js2-mode-backward-sibling" function nil nil nil "Move to the beginning of the sibling node preceding point in parent.
Parent is defined as the enclosing script or function." nil [432406 432780]) ("js2-beginning-of-defun" function nil nil ((user-visible . t)) "Go to line on which current function starts, and return non-nil.
If we're not in a function, go to beginning of previous script-level element." nil [432782 433249]) ("js2-end-of-defun" function nil nil ((user-visible . t)) "Go to the char after the last position of the current function.
If we're not in a function, skips over the next script-level element." nil [433251 433749]) ("js2-mark-defun" function nil ("&optional" "allow-extend") ((user-visible . t)) "Put mark at end of this function, point at beginning.
The function marked is the one that contains point.

Interactively, if this command is repeated,
or (in Transient Mark mode) if the mark is active,
it marks the next defun after the ones already marked." nil [433751 435525]) ("js2-narrow-to-defun" function nil nil ((user-visible . t)) "Narrow to the function enclosing point." nil [435527 435922]) ("defalias" code nil [435924 435956]) ("js2-mode" package nil nil nil [435958 435977]))
    :unmatched-syntax '((close-paren 220827 . 220828) (symbol 220819 . 220827) (punctuation 220818 . 220819) (symbol 220810 . 220817) (open-paren 220809 . 220810) (close-paren 220806 . 220807) (symbol 220792 . 220806) (punctuation 220791 . 220792) (symbol 220786 . 220790) (punctuation 220785 . 220786) (symbol 220776 . 220784) (open-paren 220775 . 220776) (close-paren 220772 . 220773) (close-paren 220771 . 220772) (close-paren 220770 . 220771) (close-paren 220769 . 220770) (close-paren 220768 . 220769) (close-paren 220767 . 220768) (symbol 220765 . 220767) (symbol 220752 . 220764) (open-paren 220751 . 220752) (symbol 220747 . 220750) (symbol 220745 . 220746) (open-paren 220744 . 220745) (symbol 220740 . 220743) (symbol 220723 . 220739) (open-paren 220722 . 220723) (close-paren 220714 . 220715) (symbol 220712 . 220714) (symbol 220697 . 220711) (open-paren 220696 . 220697) (symbol 220689 . 220695) (open-paren 220688 . 220689) (close-paren 220682 . 220683) (close-paren 220681 . 220682) (close-paren 220680 . 220681) (symbol 220678 . 220680) (symbol 220661 . 220677) (open-paren 220660 . 220661) (symbol 220656 . 220659) (open-paren 220655 . 220656) (close-paren 220644 . 220645) (close-paren 220643 . 220644) (close-paren 220642 . 220643) (symbol 220638 . 220642) (symbol 220611 . 220637) (open-paren 220610 . 220611) (symbol 220590 . 220594) (close-paren 220571 . 220572) (symbol 220567 . 220571) (symbol 220549 . 220566) (open-paren 220548 . 220549) (symbol 220545 . 220547) (open-paren 220544 . 220545) (symbol 220541 . 220543) (open-paren 220540 . 220541) (close-paren 220512 . 220513) (close-paren 220511 . 220512) (symbol 220510 . 220511) (close-paren 220508 . 220509) (symbol 220503 . 220508) (open-paren 220502 . 220503) (symbol 220484 . 220501) (open-paren 220483 . 220484) (symbol 220478 . 220482) (open-paren 220477 . 220478) (open-paren 220476 . 220477) (symbol 220471 . 220475) (open-paren 220470 . 220471) (close-paren 220466 . 220467) (symbol 220455 . 220466) (open-paren 220454 . 220455) (string 220410 . 220451) (close-paren 220406 . 220407) (open-paren 220405 . 220406) (symbol 220385 . 220404) (symbol 220379 . 220384) (open-paren 220378 . 220379) (close-paren 220375 . 220376) (close-paren 220374 . 220375) (close-paren 220373 . 220374) (close-paren 220372 . 220373) (close-paren 220371 . 220372) (symbol 220348 . 220371) (open-paren 220347 . 220348) (close-paren 220338 . 220339) (symbol 220335 . 220338) (symbol 220325 . 220334) (open-paren 220324 . 220325) (close-paren 220315 . 220316) (symbol 220312 . 220315) (symbol 220302 . 220311) (open-paren 220301 . 220302) (close-paren 220292 . 220293) (close-paren 220291 . 220292) (close-paren 220290 . 220291) (symbol 220284 . 220290) (symbol 220271 . 220283) (open-paren 220270 . 220271) (symbol 220266 . 220269) (symbol 220264 . 220265) (open-paren 220263 . 220264) (symbol 220259 . 220262) (close-paren 220244 . 220245) (symbol 220238 . 220244) (symbol 220221 . 220237) (open-paren 220220 . 220221) (symbol 220216 . 220219) (symbol 220211 . 220215) (open-paren 220210 . 220211) (close-paren 220201 . 220202) (close-paren 220200 . 220201) (close-paren 220199 . 220200) (symbol 220197 . 220199) (symbol 220192 . 220196) (symbol 220189 . 220191) (open-paren 220188 . 220189) (symbol 220181 . 220187) (close-paren 220164 . 220165) (close-paren 220163 . 220164) (symbol 220159 . 220163) (symbol 220134 . 220158) (open-paren 220133 . 220134) (close-paren 220107 . 220108) (close-paren 220106 . 220107) (symbol 220104 . 220106) (symbol 220089 . 220103) (open-paren 220088 . 220089) (close-paren 220058 . 220059) (symbol 220056 . 220058) (symbol 220051 . 220055) (open-paren 220050 . 220051) (symbol 220047 . 220049) (open-paren 220046 . 220047) (symbol 220043 . 220045) (open-paren 220042 . 220043) (symbol 220037 . 220041) (close-paren 220020 . 220021) (symbol 220016 . 220020) (symbol 219989 . 220015) (open-paren 219988 . 219989) (symbol 219985 . 219987) (symbol 219980 . 219984) (open-paren 219979 . 219980) (close-paren 219968 . 219969) (symbol 219964 . 219968) (symbol 219957 . 219963) (symbol 219952 . 219956) (open-paren 219951 . 219952) (close-paren 219938 . 219939) (symbol 219934 . 219938) (symbol 219914 . 219933) (open-paren 219913 . 219914) (symbol 219910 . 219912) (open-paren 219909 . 219910) (close-paren 219900 . 219901) (close-paren 219899 . 219900) (symbol 219896 . 219899) (symbol 219891 . 219895) (symbol 219886 . 219890) (open-paren 219885 . 219886) (close-paren 219872 . 219873) (symbol 219868 . 219872) (symbol 219863 . 219867) (open-paren 219862 . 219863) (symbol 219859 . 219861) (open-paren 219858 . 219859) (close-paren 219786 . 219787) (close-paren 219785 . 219786) (close-paren 219784 . 219785) (close-paren 219783 . 219784) (symbol 219779 . 219783) (close-paren 219777 . 219778) (symbol 219772 . 219777) (open-paren 219771 . 219772) (symbol 219744 . 219770) (open-paren 219743 . 219744) (close-paren 219717 . 219718) (symbol 219713 . 219717) (close-paren 219711 . 219712) (symbol 219706 . 219711) (open-paren 219705 . 219706) (symbol 219679 . 219704) (open-paren 219678 . 219679) (symbol 219675 . 219677) (open-paren 219674 . 219675) (symbol 219669 . 219673) (symbol 219649 . 219653) (symbol 219645 . 219648) (symbol 219640 . 219644) (open-paren 219639 . 219640) (close-paren 219628 . 219629) (symbol 219624 . 219628) (symbol 219609 . 219623) (open-paren 219608 . 219609) (symbol 219603 . 219607) (open-paren 219602 . 219603) (close-paren 219593 . 219594) (symbol 219590 . 219593) (symbol 219586 . 219589) (symbol 219579 . 219585) (symbol 219574 . 219578) (symbol 219571 . 219573) (symbol 219567 . 219570) (close-paren 219538 . 219539) (close-paren 219537 . 219538) (symbol 219536 . 219537) (close-paren 219534 . 219535) (symbol 219529 . 219534) (open-paren 219528 . 219529) (symbol 219510 . 219527) (open-paren 219509 . 219510) (symbol 219504 . 219508) (open-paren 219503 . 219504) (open-paren 219502 . 219503) (symbol 219498 . 219501) (open-paren 219497 . 219498) (close-paren 219490 . 219491) (symbol 219482 . 219490) (symbol 219478 . 219481) (open-paren 219477 . 219478) (symbol 219472 . 219476) (open-paren 219471 . 219472) (close-paren 219466 . 219467) (close-paren 219465 . 219466) (close-paren 219464 . 219465) (close-paren 219463 . 219464) (close-paren 219462 . 219463) (symbol 219461 . 219462) (symbol 219456 . 219460) (open-paren 219455 . 219456) (symbol 219445 . 219454) (open-paren 219444 . 219445) (close-paren 219368 . 219369) (close-paren 219367 . 219368) (symbol 219366 . 219367) (symbol 219357 . 219365) (symbol 219352 . 219356) (open-paren 219351 . 219352) (close-paren 219335 . 219336) (symbol 219332 . 219335) (symbol 219323 . 219331) (open-paren 219322 . 219323) (symbol 219302 . 219307) (open-paren 219301 . 219302) (symbol 219285 . 219288) (symbol 219282 . 219284) (open-paren 219281 . 219282) (close-paren 219271 . 219272) (symbol 219267 . 219271) (close-paren 219253 . 219254) (close-paren 219252 . 219253) (close-paren 219251 . 219252) (close-paren 219250 . 219251) (symbol 219245 . 219250) (open-paren 219244 . 219245) (close-paren 219219 . 219220) (symbol 219195 . 219219) (open-paren 219194 . 219195) (symbol 219191 . 219193) (open-paren 219190 . 219191) (close-paren 219169 . 219170) (close-paren 219168 . 219169) (symbol 219164 . 219168) (open-paren 219163 . 219164) (symbol 219153 . 219162) (open-paren 219152 . 219153) (symbol 219118 . 219132) (open-paren 219117 . 219118) (symbol 219113 . 219116) (open-paren 219112 . 219113) (open-paren 219111 . 219112) (symbol 219107 . 219110) (open-paren 219106 . 219107) (close-paren 219098 . 219099) (close-paren 219097 . 219098) (close-paren 219096 . 219097) (symbol 219085 . 219096) (symbol 219065 . 219084) (symbol 219061 . 219064) (open-paren 219060 . 219061) (close-paren 219039 . 219040) (close-paren 219038 . 219039) (symbol 219037 . 219038) (symbol 219032 . 219036) (open-paren 219031 . 219032) (close-paren 219029 . 219030) (symbol 219017 . 219029) (symbol 219004 . 219016) (symbol 219001 . 219003) (open-paren 219000 . 219001) (symbol 218996 . 218999) (open-paren 218995 . 218996) (symbol 218992 . 218994) (open-paren 218991 . 218992) (symbol 218963 . 218975) (symbol 218959 . 218962) (open-paren 218958 . 218959) (symbol 218953 . 218957) (open-paren 218952 . 218953) (close-paren 218946 . 218947) (symbol 218938 . 218946) (open-paren 218937 . 218938) (symbol 218933 . 218936) (open-paren 218932 . 218933) (close-paren 218928 . 218929) (string 218925 . 218928) (symbol 218913 . 218924) (open-paren 218912 . 218913) (string 218651 . 218909) (close-paren 218647 . 218648) (symbol 218635 . 218647) (symbol 218625 . 218634) (open-paren 218624 . 218625) (symbol 218609 . 218623) (symbol 218603 . 218608) (open-paren 218602 . 218603) (close-paren 218599 . 218600) (close-paren 218598 . 218599) (close-paren 218597 . 218598) (close-paren 218596 . 218597) (close-paren 218595 . 218596) (close-paren 218594 . 218595) (close-paren 218593 . 218594) (symbol 218587 . 218593) (symbol 218574 . 218586) (open-paren 218573 . 218574) (close-paren 218546 . 218547) (symbol 218540 . 218546) (symbol 218523 . 218539) (open-paren 218522 . 218523) (symbol 218520 . 218521) (open-paren 218519 . 218520) (number 218517 . 218518) (symbol 218515 . 218516) (open-paren 218514 . 218515) (symbol 218504 . 218513) (open-paren 218503 . 218504) (close-paren 218495 . 218496) (symbol 218471 . 218495) (open-paren 218470 . 218471) (close-paren 218393 . 218394) (close-paren 218392 . 218393) (symbol 218386 . 218392) (symbol 218366 . 218385) (open-paren 218365 . 218366) (symbol 218361 . 218364) (open-paren 218360 . 218361) (symbol 218357 . 218359) (open-paren 218356 . 218357) (close-paren 218350 . 218351) (close-paren 218349 . 218350) (close-paren 218348 . 218349) (close-paren 218347 . 218348) (symbol 218330 . 218347) (open-paren 218329 . 218330) (symbol 218300 . 218328) (open-paren 218299 . 218300) (symbol 218292 . 218298) (open-paren 218291 . 218292) (open-paren 218290 . 218291) (symbol 218286 . 218289) (open-paren 218285 . 218286) (close-paren 218281 . 218282) (symbol 218270 . 218281) (open-paren 218269 . 218270) (string 218131 . 218266) (close-paren 218127 . 218128) (open-paren 218126 . 218127) (symbol 218109 . 218125) (symbol 218103 . 218108) (open-paren 218102 . 218103) (close-paren 218099 . 218100) (close-paren 218098 . 218099) (close-paren 218097 . 218098) (close-paren 218096 . 218097) (close-paren 218095 . 218096) (symbol 218070 . 218095) (open-paren 218069 . 218070) (symbol 218061 . 218062) (open-paren 218060 . 218061) (close-paren 218053 . 218054) (close-paren 218052 . 218053) (symbol 218049 . 218052) (symbol 218039 . 218048) (open-paren 218038 . 218039) (close-paren 218030 . 218031) (close-paren 218029 . 218030) (close-paren 218028 . 218029) (close-paren 218027 . 218028) (close-paren 218026 . 218027) (symbol 218020 . 218026) (symbol 218003 . 218019) (open-paren 218002 . 218003) (symbol 217998 . 218001) (symbol 217993 . 217997) (open-paren 217992 . 217993) (close-paren 217990 . 217991) (symbol 217985 . 217990) (open-paren 217984 . 217985) (symbol 217981 . 217983) (open-paren 217980 . 217981) (symbol 217976 . 217979) (open-paren 217975 . 217976) (close-paren 217962 . 217963) (symbol 217956 . 217962) (symbol 217936 . 217955) (open-paren 217935 . 217936) (symbol 217931 . 217934) (open-paren 217930 . 217931) (open-paren 217929 . 217930) (symbol 217919 . 217923) (open-paren 217918 . 217919) (close-paren 217912 . 217913) (symbol 217909 . 217912) (symbol 217905 . 217908) (close-paren 217895 . 217896) (close-paren 217894 . 217895) (close-paren 217893 . 217894) (symbol 217876 . 217893) (open-paren 217875 . 217876) (symbol 217846 . 217874) (open-paren 217845 . 217846) (symbol 217838 . 217844) (open-paren 217837 . 217838) (open-paren 217836 . 217837) (symbol 217832 . 217835) (open-paren 217831 . 217832) (close-paren 217827 . 217828) (symbol 217816 . 217827) (open-paren 217815 . 217816) (string 217668 . 217812) (close-paren 217664 . 217665) (open-paren 217663 . 217664) (symbol 217640 . 217662) (symbol 217634 . 217639) (open-paren 217633 . 217634) (close-paren 217630 . 217631) (close-paren 217629 . 217630) (close-paren 217628 . 217629) (close-paren 217627 . 217628) (close-paren 217626 . 217627) (symbol 217623 . 217626) (symbol 217606 . 217622) (open-paren 217605 . 217606) (symbol 217595 . 217604) (open-paren 217594 . 217595) (close-paren 217586 . 217587) (close-paren 217585 . 217586) (symbol 217579 . 217585) (close-paren 217577 . 217578) (symbol 217572 . 217577) (open-paren 217571 . 217572) (symbol 217544 . 217570) (open-paren 217543 . 217544) (symbol 217539 . 217542) (symbol 217534 . 217538) (open-paren 217533 . 217534) (symbol 217528 . 217532) (open-paren 217527 . 217528) (close-paren 217521 . 217522) (symbol 217518 . 217521) (close-paren 217507 . 217508) (close-paren 217506 . 217507) (symbol 217502 . 217506) (symbol 217475 . 217501) (open-paren 217474 . 217475) (symbol 217467 . 217473) (open-paren 217466 . 217467) (close-paren 217455 . 217456) (close-paren 217454 . 217455) (symbol 217437 . 217454) (open-paren 217436 . 217437) (symbol 217431 . 217435) (open-paren 217430 . 217431) (open-paren 217429 . 217430) (symbol 217424 . 217428) (open-paren 217423 . 217424) (string 217295 . 217420) (close-paren 217291 . 217292) (open-paren 217290 . 217291) (symbol 217264 . 217289) (symbol 217258 . 217263) (open-paren 217257 . 217258) (close-paren 217254 . 217255) (close-paren 217253 . 217254) (close-paren 217252 . 217253) (close-paren 217251 . 217252) (close-paren 217250 . 217251) (close-paren 217249 . 217250) (symbol 217246 . 217249) (symbol 217233 . 217245) (open-paren 217232 . 217233) (close-paren 217210 . 217211) (symbol 217207 . 217210) (symbol 217190 . 217206) (open-paren 217189 . 217190) (symbol 217187 . 217188) (open-paren 217186 . 217187) (symbol 217176 . 217185) (open-paren 217175 . 217176) (close-paren 217167 . 217168) (close-paren 217166 . 217167) (symbol 217160 . 217166) (close-paren 217158 . 217159) (symbol 217153 . 217158) (open-paren 217152 . 217153) (symbol 217126 . 217151) (open-paren 217125 . 217126) (symbol 217121 . 217124) (symbol 217116 . 217120) (open-paren 217115 . 217116) (symbol 217110 . 217114) (open-paren 217109 . 217110) (close-paren 217103 . 217104) (symbol 217100 . 217103) (close-paren 217089 . 217090) (close-paren 217088 . 217089) (symbol 217084 . 217088) (symbol 217057 . 217083) (open-paren 217056 . 217057) (symbol 217049 . 217055) (open-paren 217048 . 217049) (close-paren 217037 . 217038) (close-paren 217036 . 217037) (symbol 217019 . 217036) (open-paren 217018 . 217019) (symbol 217013 . 217017) (open-paren 217012 . 217013) (open-paren 217011 . 217012) (symbol 217006 . 217010) (open-paren 217005 . 217006) (string 216870 . 217002) (close-paren 216866 . 216867) (open-paren 216865 . 216866) (symbol 216840 . 216864) (symbol 216834 . 216839) (open-paren 216833 . 216834) (close-paren 216830 . 216831) (close-paren 216829 . 216830) (close-paren 216828 . 216829) (close-paren 216827 . 216828) (close-paren 216826 . 216827) (close-paren 216825 . 216826) (symbol 216822 . 216825) (symbol 216818 . 216821) (symbol 216787 . 216817) (open-paren 216786 . 216787) (string 216774 . 216776) (string 216766 . 216773) (symbol 216732 . 216756) (open-paren 216731 . 216732) (close-paren 216721 . 216722) (close-paren 216720 . 216721) (close-paren 216719 . 216720) (close-paren 216718 . 216719) (symbol 216713 . 216718) (open-paren 216712 . 216713) (close-paren 216710 . 216711) (symbol 216708 . 216710) (symbol 216695 . 216707) (open-paren 216694 . 216695) (symbol 216688 . 216693) (open-paren 216687 . 216688) (symbol 216683 . 216686) (close-paren 216665 . 216666) (close-paren 216664 . 216665) (symbol 216659 . 216664) (open-paren 216658 . 216659) (close-paren 216656 . 216657) (number 216655 . 216656) (symbol 216642 . 216654) (open-paren 216641 . 216642) (symbol 216635 . 216640) (open-paren 216634 . 216635) (symbol 216630 . 216633) (symbol 216625 . 216629) (open-paren 216624 . 216625) (close-paren 216612 . 216613) (close-paren 216611 . 216612) (close-paren 216610 . 216611) (symbol 216605 . 216610) (open-paren 216604 . 216605) (close-paren 216602 . 216603) (number 216601 . 216602) (symbol 216588 . 216600) (open-paren 216587 . 216588) (symbol 216581 . 216586) (open-paren 216580 . 216581) (symbol 216576 . 216579) (close-paren 216556 . 216557) (close-paren 216555 . 216556) (symbol 216550 . 216555) (open-paren 216549 . 216550) (close-paren 216547 . 216548) (symbol 216545 . 216547) (symbol 216532 . 216544) (open-paren 216531 . 216532) (symbol 216525 . 216530) (open-paren 216524 . 216525) (symbol 216520 . 216523) (symbol 216515 . 216519) (open-paren 216514 . 216515) (close-paren 216500 . 216501) (close-paren 216499 . 216500) (string 216484 . 216499) (symbol 216471 . 216483) (open-paren 216470 . 216471) (close-paren 216451 . 216452) (close-paren 216450 . 216451) (string 216435 . 216450) (symbol 216424 . 216434) (open-paren 216423 . 216424) (symbol 216419 . 216422) (open-paren 216418 . 216419) (symbol 216414 . 216417) (open-paren 216413 . 216414) (symbol 216410 . 216412) (open-paren 216409 . 216410) (symbol 216386 . 216400) (open-paren 216385 . 216386) (symbol 216344 . 216378) (open-paren 216343 . 216344) (close-paren 216337 . 216338) (symbol 216334 . 216337) (symbol 216330 . 216333) (open-paren 216329 . 216330) (symbol 216325 . 216328) (open-paren 216324 . 216325) (string 216220 . 216321) (close-paren 216216 . 216217) (open-paren 216215 . 216216) (symbol 216197 . 216214) (symbol 216191 . 216196) (open-paren 216190 . 216191) (close-paren 216187 . 216188) (close-paren 216186 . 216187) (close-paren 216185 . 216186) (close-paren 216184 . 216185) (symbol 216181 . 216184) (symbol 216158 . 216180) (symbol 216142 . 216145) (symbol 216123 . 216141) (symbol 216118 . 216122) (open-paren 216117 . 216118) (close-paren 216109 . 216110) (symbol 216088 . 216109) (open-paren 216087 . 216088) (symbol 216073 . 216078) (open-paren 216072 . 216073) (close-paren 216066 . 216067) (close-paren 216065 . 216066) (symbol 216060 . 216065) (punctuation 216059 . 216060) (symbol 216047 . 216058) (open-paren 216046 . 216047) (symbol 216021 . 216039) (symbol 216014 . 216020) (open-paren 216013 . 216014) (symbol 215926 . 215938) (symbol 215921 . 215925) (open-paren 215920 . 215921) (string 215808 . 215851) (close-paren 215804 . 215805) (open-paren 215803 . 215804) (symbol 215775 . 215802) (symbol 215769 . 215774) (open-paren 215768 . 215769) (close-paren 215765 . 215766) (close-paren 215764 . 215765) (close-paren 215763 . 215764) (close-paren 215762 . 215763) (close-paren 215761 . 215762) (close-paren 215760 . 215761) (symbol 215759 . 215760) (symbol 215752 . 215758) (open-paren 215751 . 215752) (symbol 215741 . 215750) (open-paren 215740 . 215741) (symbol 215718 . 215731) (open-paren 215717 . 215718) (close-paren 215709 . 215710) (close-paren 215708 . 215709) (symbol 215692 . 215708) (symbol 215690 . 215691) (open-paren 215689 . 215690) (open-paren 215688 . 215689) (symbol 215684 . 215687) (open-paren 215683 . 215684) (close-paren 215677 . 215678) (close-paren 215676 . 215677) (symbol 215665 . 215676) (symbol 215661 . 215664) (open-paren 215660 . 215661) (symbol 215617 . 215646) (symbol 215613 . 215616) (open-paren 215612 . 215613) (symbol 215607 . 215611) (open-paren 215606 . 215607) (close-paren 215602 . 215603) (symbol 215591 . 215602) (open-paren 215590 . 215591) (string 215362 . 215587) (close-paren 215358 . 215359) (open-paren 215357 . 215358) (symbol 215345 . 215356) (symbol 215339 . 215344) (open-paren 215338 . 215339) (close-paren 215335 . 215336) (close-paren 215334 . 215335) (close-paren 215333 . 215334) (close-paren 215332 . 215333) (close-paren 215331 . 215332) (close-paren 215330 . 215331) (close-paren 215329 . 215330) (symbol 215324 . 215329) (open-paren 215323 . 215324) (close-paren 215321 . 215322) (symbol 215316 . 215321) (open-paren 215315 . 215316) (symbol 215300 . 215314) (open-paren 215299 . 215300) (close-paren 215285 . 215286) (symbol 215280 . 215285) (close-paren 215278 . 215279) (symbol 215273 . 215278) (open-paren 215272 . 215273) (symbol 215270 . 215271) (open-paren 215269 . 215270) (symbol 215266 . 215268) (open-paren 215265 . 215266) (close-paren 215203 . 215204) (close-paren 215202 . 215203) (close-paren 215201 . 215202) (symbol 215193 . 215201) (symbol 215189 . 215192) (open-paren 215188 . 215189) (symbol 215181 . 215187) (open-paren 215180 . 215181) (symbol 215170 . 215179) (open-paren 215169 . 215170) (close-paren 215121 . 215122) (close-paren 215120 . 215121) (symbol 215117 . 215120) (symbol 215110 . 215116) (open-paren 215109 . 215110) (symbol 215099 . 215108) (open-paren 215098 . 215099) (symbol 215084 . 215087) (symbol 215081 . 215083) (open-paren 215080 . 215081) (close-paren 215072 . 215073) (close-paren 215071 . 215072) (close-paren 215070 . 215071) (symbol 215066 . 215070) (symbol 215062 . 215065) (open-paren 215061 . 215062) (symbol 215056 . 215060) (symbol 215051 . 215055) (open-paren 215050 . 215051) (close-paren 215040 . 215041) (close-paren 215039 . 215040) (close-paren 215038 . 215039) (symbol 215035 . 215038) (symbol 215026 . 215034) (symbol 215021 . 215025) (open-paren 215020 . 215021) (close-paren 215004 . 215005) (close-paren 215003 . 215004) (symbol 214998 . 215003) (symbol 214993 . 214997) (open-paren 214992 . 214993) (symbol 214986 . 214991) (open-paren 214985 . 214986) (symbol 214982 . 214984) (open-paren 214981 . 214982) (close-paren 214969 . 214970) (close-paren 214968 . 214969) (symbol 214964 . 214968) (symbol 214960 . 214963) (open-paren 214959 . 214960) (symbol 214955 . 214958) (symbol 214950 . 214954) (open-paren 214949 . 214950) (close-paren 214937 . 214938) (symbol 214932 . 214937) (close-paren 214930 . 214931) (symbol 214926 . 214930) (symbol 214920 . 214925) (open-paren 214919 . 214920) (symbol 214911 . 214918) (symbol 214903 . 214910) (open-paren 214902 . 214903) (symbol 214897 . 214901) (open-paren 214896 . 214897) (close-paren 214886 . 214887) (symbol 214878 . 214886) (symbol 214873 . 214877) (symbol 214869 . 214872) (open-paren 214868 . 214869) (symbol 214862 . 214867) (open-paren 214861 . 214862) (close-paren 214812 . 214813) (symbol 214808 . 214812) (symbol 214799 . 214807) (close-paren 214785 . 214786) (close-paren 214784 . 214785) (close-paren 214783 . 214784) (close-paren 214782 . 214783) (symbol 214780 . 214782) (symbol 214773 . 214779) (open-paren 214772 . 214773) (close-paren 214770 . 214771) (symbol 214768 . 214770) (symbol 214761 . 214767) (open-paren 214760 . 214761) (symbol 214753 . 214759) (symbol 214745 . 214752) (open-paren 214744 . 214745) (close-paren 214712 . 214713) (symbol 214710 . 214712) (symbol 214707 . 214709) (open-paren 214706 . 214707) (symbol 214699 . 214705) (open-paren 214698 . 214699) (symbol 214693 . 214697) (symbol 214688 . 214692) (open-paren 214687 . 214688) (symbol 214682 . 214686) (symbol 214677 . 214681) (open-paren 214676 . 214677) (close-paren 214636 . 214637) (symbol 214633 . 214636) (symbol 214613 . 214621) (close-paren 214600 . 214601) (close-paren 214599 . 214600) (symbol 214594 . 214599) (symbol 214590 . 214593) (open-paren 214589 . 214590) (symbol 214583 . 214588) (open-paren 214582 . 214583) (close-paren 214569 . 214570) (close-paren 214568 . 214569) (symbol 214567 . 214568) (punctuation 214566 . 214567) (symbol 214564 . 214565) (punctuation 214563 . 214564) (symbol 214554 . 214562) (symbol 214551 . 214553) (open-paren 214550 . 214551) (symbol 214542 . 214549) (open-paren 214541 . 214542) (close-paren 214528 . 214529) (close-paren 214527 . 214528) (symbol 214526 . 214527) (punctuation 214525 . 214526) (symbol 214523 . 214524) (punctuation 214522 . 214523) (symbol 214513 . 214521) (symbol 214510 . 214512) (open-paren 214509 . 214510) (symbol 214502 . 214508) (open-paren 214501 . 214502) (close-paren 214488 . 214489) (close-paren 214487 . 214488) (symbol 214482 . 214487) (symbol 214475 . 214481) (open-paren 214474 . 214475) (symbol 214465 . 214473) (open-paren 214464 . 214465) (close-paren 214451 . 214452) (close-paren 214450 . 214451) (number 214449 . 214450) (symbol 214445 . 214448) (symbol 214442 . 214444) (open-paren 214441 . 214442) (symbol 214435 . 214440) (open-paren 214434 . 214435) (close-paren 214421 . 214422) (close-paren 214420 . 214421) (symbol 214415 . 214420) (open-paren 214414 . 214415) (symbol 214408 . 214413) (open-paren 214407 . 214408) (close-paren 214394 . 214395) (symbol 214393 . 214394) (symbol 214384 . 214392) (open-paren 214383 . 214384) (close-paren 214370 . 214371) (close-paren 214369 . 214370) (close-paren 214368 . 214369) (close-paren 214367 . 214368) (symbol 214355 . 214367) (symbol 214333 . 214354) (open-paren 214332 . 214333) (close-paren 214304 . 214305) (symbol 214292 . 214304) (symbol 214272 . 214291) (open-paren 214271 . 214272) (symbol 214264 . 214270) (open-paren 214263 . 214264) (symbol 214231 . 214244) (open-paren 214230 . 214231) (symbol 214225 . 214229) (open-paren 214224 . 214225) (open-paren 214223 . 214224) (symbol 214218 . 214222) (open-paren 214217 . 214218) (close-paren 214211 . 214212) (close-paren 214210 . 214211) (close-paren 214209 . 214210) (symbol 214200 . 214209) (open-paren 214199 . 214200) (symbol 214189 . 214198) (open-paren 214188 . 214189) (symbol 214176 . 214181) (symbol 214171 . 214175) (open-paren 214170 . 214171) (close-paren 214164 . 214165) (string 214153 . 214164) (symbol 214145 . 214152) (open-paren 214144 . 214145) (close-paren 214136 . 214137) (close-paren 214135 . 214136) (close-paren 214134 . 214135) (close-paren 214133 . 214134) (symbol 214121 . 214133) (symbol 214099 . 214120) (open-paren 214098 . 214099) (symbol 214093 . 214097) (open-paren 214092 . 214093) (close-paren 214075 . 214076) (close-paren 214074 . 214075) (symbol 214062 . 214074) (symbol 214042 . 214061) (open-paren 214041 . 214042) (symbol 214036 . 214040) (open-paren 214035 . 214036) (symbol 214031 . 214034) (open-paren 214030 . 214031) (close-paren 214018 . 214019) (symbol 214006 . 214018) (symbol 214001 . 214005) (open-paren 214000 . 214001) (symbol 213997 . 213999) (open-paren 213996 . 213997) (symbol 213993 . 213995) (open-paren 213992 . 213993) (close-paren 213988 . 213989) (string 213985 . 213988) (symbol 213973 . 213984) (open-paren 213972 . 213973) (string 213802 . 213969) (close-paren 213798 . 213799) (symbol 213793 . 213798) (symbol 213789 . 213792) (symbol 213779 . 213788) (open-paren 213778 . 213779) (symbol 213763 . 213777) (symbol 213757 . 213762) (open-paren 213756 . 213757) (close-paren 213753 . 213754) (close-paren 213752 . 213753) (close-paren 213751 . 213752) (close-paren 213750 . 213751) (close-paren 213749 . 213750) (close-paren 213748 . 213749) (close-paren 213747 . 213748) (close-paren 213746 . 213747) (symbol 213737 . 213746) (open-paren 213736 . 213737) (symbol 213732 . 213735) (symbol 213729 . 213731) (open-paren 213728 . 213729) (symbol 213718 . 213727) (open-paren 213717 . 213718) (close-paren 213708 . 213709) (close-paren 213707 . 213708) (close-paren 213706 . 213707) (close-paren 213705 . 213706) (symbol 213701 . 213705) (symbol 213688 . 213700) (open-paren 213687 . 213688) (close-paren 213656 . 213657) (symbol 213652 . 213656) (symbol 213635 . 213651) (open-paren 213634 . 213635) (symbol 213632 . 213633) (open-paren 213631 . 213632) (symbol 213626 . 213630) (symbol 213623 . 213625) (open-paren 213622 . 213623) (symbol 213618 . 213621) (close-paren 213603 . 213604) (symbol 213602 . 213603) (close-paren 213600 . 213601) (symbol 213595 . 213600) (open-paren 213594 . 213595) (symbol 213576 . 213593) (open-paren 213575 . 213576) (symbol 213570 . 213574) (symbol 213565 . 213569) (open-paren 213564 . 213565) (close-paren 213555 . 213556) (symbol 213540 . 213555) (open-paren 213539 . 213540) (close-paren 213530 . 213531) (symbol 213527 . 213530) (symbol 213525 . 213526) (open-paren 213524 . 213525) (symbol 213516 . 213523) (open-paren 213515 . 213516) (close-paren 213508 . 213509) (symbol 213493 . 213508) (open-paren 213492 . 213493) (symbol 213464 . 213465) (open-paren 213463 . 213464) (close-paren 213457 . 213458) (close-paren 213456 . 213457) (close-paren 213455 . 213456) (close-paren 213454 . 213455) (close-paren 213453 . 213454) (symbol 213444 . 213453) (open-paren 213443 . 213444) (close-paren 213420 . 213421) (symbol 213416 . 213420) (symbol 213399 . 213415) (open-paren 213398 . 213399) (symbol 213370 . 213374) (symbol 213367 . 213369) (open-paren 213366 . 213367) (symbol 213356 . 213365) (open-paren 213355 . 213356) (close-paren 213345 . 213346) (close-paren 213344 . 213345) (symbol 213343 . 213344) (close-paren 213341 . 213342) (symbol 213336 . 213341) (open-paren 213335 . 213336) (symbol 213317 . 213334) (open-paren 213316 . 213317) (symbol 213311 . 213315) (symbol 213306 . 213310) (open-paren 213305 . 213306) (close-paren 213261 . 213262) (symbol 213259 . 213261) (symbol 213246 . 213258) (open-paren 213245 . 213246) (close-paren 213235 . 213236) (symbol 213219 . 213235) (open-paren 213218 . 213219) (close-paren 213208 . 213209) (close-paren 213207 . 213208) (symbol 213204 . 213207) (symbol 213202 . 213203) (open-paren 213201 . 213202) (symbol 213199 . 213200) (open-paren 213198 . 213199) (symbol 213190 . 213197) (open-paren 213189 . 213190) (close-paren 213181 . 213182) (close-paren 213180 . 213181) (symbol 213177 . 213180) (symbol 213170 . 213176) (open-paren 213169 . 213170) (symbol 213165 . 213168) (symbol 213161 . 213164) (open-paren 213160 . 213161) (open-paren 213159 . 213160) (symbol 212878 . 212882) (open-paren 212877 . 212878) (close-paren 212871 . 212872) (close-paren 212870 . 212871) (close-paren 212869 . 212870) (symbol 212864 . 212869) (open-paren 212863 . 212864) (symbol 212857 . 212862) (open-paren 212856 . 212857) (symbol 212852 . 212855) (symbol 212847 . 212851) (open-paren 212846 . 212847) (symbol 212842 . 212845) (open-paren 212841 . 212842) (close-paren 212837 . 212838) (close-paren 212836 . 212837) (symbol 212815 . 212836) (punctuation 212814 . 212815) (punctuation 212813 . 212814) (symbol 212789 . 212812) (open-paren 212788 . 212789) (symbol 212758 . 212781) (symbol 212755 . 212757) (open-paren 212754 . 212755) (close-paren 212750 . 212751) (close-paren 212749 . 212750) (number 212748 . 212749) (symbol 212744 . 212747) (symbol 212741 . 212743) (open-paren 212740 . 212741) (symbol 212736 . 212739) (symbol 212731 . 212735) (open-paren 212730 . 212731) (close-paren 212726 . 212727) (string 212723 . 212726) (symbol 212711 . 212722) (open-paren 212710 . 212711) (string 212547 . 212707) (close-paren 212543 . 212544) (symbol 212540 . 212543) (symbol 212530 . 212539) (open-paren 212529 . 212530) (symbol 212507 . 212528) (symbol 212501 . 212506) (open-paren 212500 . 212501) (close-paren 212497 . 212498) (close-paren 212496 . 212497) (symbol 212488 . 212496) (punctuation 212487 . 212488) (symbol 212471 . 212486) (open-paren 212470 . 212471) (close-paren 212466 . 212467) (symbol 212455 . 212466) (open-paren 212454 . 212455) (close-paren 212450 . 212451) (open-paren 212449 . 212450) (symbol 212430 . 212448) (symbol 212424 . 212429) (open-paren 212423 . 212424) (close-paren 212420 . 212421) (close-paren 212419 . 212420) (symbol 212414 . 212419) (punctuation 212413 . 212414) (symbol 212401 . 212412) (open-paren 212400 . 212401) (close-paren 212396 . 212397) (close-paren 212395 . 212396) (close-paren 212394 . 212395) (string 212384 . 212394) (string 212357 . 212366) (symbol 212311 . 212337) (symbol 212308 . 212310) (open-paren 212307 . 212308) (string 212267 . 212291) (symbol 212259 . 212266) (open-paren 212258 . 212259) (close-paren 212250 . 212251) (symbol 212237 . 212250) (open-paren 212236 . 212237) (symbol 212233 . 212235) (open-paren 212232 . 212233) (close-paren 212228 . 212229) (close-paren 212227 . 212228) (symbol 212198 . 212227) (symbol 212194 . 212197) (open-paren 212193 . 212194) (symbol 212163 . 212192) (close-paren 212153 . 212154) (symbol 212127 . 212153) (symbol 212123 . 212126) (open-paren 212122 . 212123) (symbol 212095 . 212121) (symbol 212090 . 212094) (open-paren 212089 . 212090) (close-paren 212085 . 212086) (symbol 212074 . 212085) (open-paren 212073 . 212074) (string 211955 . 212070) (close-paren 211951 . 211952) (open-paren 211950 . 211951) (symbol 211914 . 211949) (symbol 211908 . 211913) (open-paren 211907 . 211908) (close-paren 211904 . 211905) (close-paren 211903 . 211904) (symbol 211898 . 211903) (punctuation 211897 . 211898) (symbol 211885 . 211896) (open-paren 211884 . 211885) (close-paren 211880 . 211881) (symbol 211877 . 211880) (symbol 211847 . 211876) (symbol 211835 . 211838) (symbol 211808 . 211834) (symbol 211803 . 211807) (open-paren 211802 . 211803) (close-paren 211798 . 211799) (symbol 211787 . 211798) (open-paren 211786 . 211787) (string 211741 . 211783) (close-paren 211737 . 211738) (open-paren 211736 . 211737) (symbol 211702 . 211735) (symbol 211696 . 211701) (open-paren 211695 . 211696) (close-paren 211692 . 211693) (close-paren 211691 . 211692) (symbol 211686 . 211691) (punctuation 211685 . 211686) (symbol 211673 . 211684) (open-paren 211672 . 211673) (close-paren 211668 . 211669) (symbol 211667 . 211668) (symbol 211637 . 211666) (symbol 211627 . 211628) (symbol 211600 . 211626) (symbol 211595 . 211599) (open-paren 211594 . 211595) (close-paren 211590 . 211591) (symbol 211579 . 211590) (open-paren 211578 . 211579) (string 211534 . 211575) (close-paren 211530 . 211531) (open-paren 211529 . 211530) (symbol 211492 . 211528) (symbol 211486 . 211491) (open-paren 211485 . 211486) (close-paren 211482 . 211483) (close-paren 211481 . 211482) (close-paren 211480 . 211481) (close-paren 211479 . 211480) (close-paren 211478 . 211479) (close-paren 211477 . 211478) (symbol 211474 . 211477) (close-paren 211472 . 211473) (symbol 211471 . 211472) (symbol 211459 . 211470) (open-paren 211458 . 211459) (close-paren 211456 . 211457) (symbol 211455 . 211456) (symbol 211441 . 211454) (open-paren 211440 . 211441) (symbol 211419 . 211439) (open-paren 211418 . 211419) (close-paren 211406 . 211407) (symbol 211399 . 211406) (punctuation 211398 . 211399) (symbol 211396 . 211397) (symbol 211384 . 211395) (open-paren 211383 . 211384) (symbol 211378 . 211382) (open-paren 211377 . 211378) (close-paren 211367 . 211368) (close-paren 211366 . 211367) (close-paren 211365 . 211366) (symbol 211360 . 211365) (open-paren 211359 . 211360) (symbol 211347 . 211358) (open-paren 211346 . 211347) (symbol 211344 . 211345) (open-paren 211343 . 211344) (symbol 211336 . 211342) (open-paren 211335 . 211336) (close-paren 211327 . 211328) (close-paren 211326 . 211327) (symbol 211317 . 211326) (open-paren 211316 . 211317) (close-paren 211299 . 211300) (close-paren 211298 . 211299) (close-paren 211297 . 211298) (symbol 211292 . 211297) (open-paren 211291 . 211292) (symbol 211271 . 211290) (open-paren 211270 . 211271) (symbol 211260 . 211269) (open-paren 211259 . 211260) (symbol 211256 . 211258) (open-paren 211255 . 211256) (symbol 211249 . 211254) (open-paren 211248 . 211249) (close-paren 211242 . 211243) (close-paren 211241 . 211242) (symbol 211232 . 211241) (open-paren 211231 . 211232) (symbol 211221 . 211230) (open-paren 211220 . 211221) (symbol 211201 . 211215) (open-paren 211200 . 211201) (close-paren 211196 . 211197) (symbol 211193 . 211196) (symbol 211168 . 211192) (symbol 211163 . 211167) (open-paren 211162 . 211163) (close-paren 211158 . 211159) (symbol 211147 . 211158) (open-paren 211146 . 211147) (string 211076 . 211143) (close-paren 211072 . 211073) (open-paren 211071 . 211072) (symbol 211048 . 211070) (symbol 211042 . 211047) (open-paren 211041 . 211042) (close-paren 211038 . 211039) (close-paren 211037 . 211038) (close-paren 211036 . 211037) (close-paren 211035 . 211036) (close-paren 211034 . 211035) (close-paren 211033 . 211034) (symbol 211032 . 211033) (symbol 211024 . 211031) (punctuation 211023 . 211024) (close-paren 210998 . 210999) (symbol 210994 . 210998) (punctuation 210993 . 210994) (symbol 210989 . 210992) (symbol 210985 . 210988) (symbol 210964 . 210984) (open-paren 210963 . 210964) (symbol 210951 . 210962) (open-paren 210950 . 210951) (close-paren 210938 . 210939) (symbol 210935 . 210938) (symbol 210931 . 210934) (symbol 210928 . 210930) (open-paren 210927 . 210928) (symbol 210920 . 210926) (open-paren 210919 . 210920) (close-paren 210909 . 210910) (close-paren 210908 . 210909) (number 210907 . 210908) (symbol 210880 . 210906) (open-paren 210879 . 210880) (symbol 210875 . 210878) (close-paren 210859 . 210860) (symbol 210857 . 210859) (symbol 210830 . 210856) (open-paren 210829 . 210830) (symbol 210825 . 210828) (symbol 210820 . 210824) (open-paren 210819 . 210820) (close-paren 210776 . 210777) (symbol 210755 . 210776) (open-paren 210754 . 210755) (close-paren 210742 . 210743) (symbol 210709 . 210742) (open-paren 210708 . 210709) (symbol 210705 . 210707) (open-paren 210704 . 210705) (close-paren 210696 . 210697) (symbol 210693 . 210696) (symbol 210683 . 210692) (open-paren 210682 . 210683) (symbol 210661 . 210675) (open-paren 210660 . 210661) (close-paren 210654 . 210655) (close-paren 210653 . 210654) (symbol 210650 . 210653) (symbol 210646 . 210649) (open-paren 210645 . 210646) (close-paren 210634 . 210635) (close-paren 210633 . 210634) (symbol 210621 . 210633) (open-paren 210620 . 210621) (symbol 210616 . 210619) (open-paren 210615 . 210616) (open-paren 210614 . 210615) (symbol 210609 . 210613) (open-paren 210608 . 210609) (string 210481 . 210605) (close-paren 210477 . 210478) (open-paren 210476 . 210477) (symbol 210449 . 210475) (symbol 210443 . 210448) (open-paren 210442 . 210443) (close-paren 210439 . 210440) (close-paren 210438 . 210439) (close-paren 210437 . 210438) (close-paren 210436 . 210437) (close-paren 210435 . 210436) (close-paren 210434 . 210435) (number 210433 . 210434) (symbol 210420 . 210432) (open-paren 210419 . 210420) (close-paren 210407 . 210408) (symbol 210404 . 210407) (symbol 210394 . 210403) (open-paren 210393 . 210394) (close-paren 210381 . 210382) (close-paren 210380 . 210381) (symbol 210379 . 210380) (symbol 210371 . 210378) (punctuation 210370 . 210371) (close-paren 210343 . 210344) (symbol 210339 . 210343) (punctuation 210338 . 210339) (symbol 210334 . 210337) (symbol 210330 . 210333) (symbol 210309 . 210329) (open-paren 210308 . 210309) (symbol 210296 . 210307) (open-paren 210295 . 210296) (close-paren 210281 . 210282) (symbol 210278 . 210281) (symbol 210274 . 210277) (symbol 210271 . 210273) (open-paren 210270 . 210271) (symbol 210263 . 210269) (open-paren 210262 . 210263) (close-paren 210250 . 210251) (close-paren 210249 . 210250) (number 210248 . 210249) (symbol 210221 . 210247) (open-paren 210220 . 210221) (symbol 210216 . 210219) (close-paren 210198 . 210199) (symbol 210193 . 210198) (open-paren 210192 . 210193) (symbol 210188 . 210191) (symbol 210183 . 210187) (open-paren 210182 . 210183) (close-paren 210170 . 210171) (symbol 210169 . 210170) (symbol 210165 . 210168) (symbol 210142 . 210164) (symbol 210124 . 210141) (open-paren 210123 . 210124) (symbol 210117 . 210122) (open-paren 210116 . 210117) (close-paren 210106 . 210107) (close-paren 210105 . 210106) (symbol 210096 . 210105) (open-paren 210095 . 210096) (symbol 210085 . 210094) (open-paren 210084 . 210085) (symbol 210060 . 210075) (open-paren 210059 . 210060) (symbol 210038 . 210052) (open-paren 210037 . 210038) (close-paren 210031 . 210032) (symbol 210028 . 210031) (symbol 210024 . 210027) (open-paren 210023 . 210024) (symbol 210019 . 210022) (open-paren 210018 . 210019) (string 209948 . 210015) (close-paren 209944 . 209945) (open-paren 209943 . 209944) (symbol 209917 . 209942) (symbol 209911 . 209916) (open-paren 209910 . 209911) (close-paren 209907 . 209908) (close-paren 209906 . 209907) (close-paren 209905 . 209906) (close-paren 209904 . 209905) (symbol 209901 . 209904) (close-paren 209893 . 209894) (close-paren 209892 . 209893) (close-paren 209891 . 209892) (symbol 209879 . 209891) (open-paren 209878 . 209879) (symbol 209874 . 209877) (symbol 209869 . 209873) (open-paren 209868 . 209869) (close-paren 209856 . 209857) (close-paren 209855 . 209856) (close-paren 209854 . 209855) (close-paren 209853 . 209854) (number 209852 . 209853) (symbol 209839 . 209851) (open-paren 209838 . 209839) (symbol 209831 . 209837) (open-paren 209830 . 209831) (symbol 209823 . 209829) (symbol 209820 . 209822) (open-paren 209819 . 209820) (close-paren 209797 . 209798) (symbol 209775 . 209797) (symbol 209764 . 209774) (open-paren 209763 . 209764) (close-paren 209741 . 209742) (close-paren 209740 . 209741) (symbol 209731 . 209740) (symbol 209718 . 209730) (open-paren 209717 . 209718) (symbol 209711 . 209716) (open-paren 209710 . 209711) (symbol 209706 . 209709) (open-paren 209705 . 209706) (symbol 209699 . 209704) (open-paren 209698 . 209699) (symbol 209674 . 209689) (open-paren 209673 . 209674) (symbol 209652 . 209666) (open-paren 209651 . 209652) (close-paren 209645 . 209646) (close-paren 209644 . 209645) (close-paren 209643 . 209644) (symbol 209624 . 209643) (open-paren 209623 . 209624) (symbol 209616 . 209622) (open-paren 209615 . 209616) (close-paren 209605 . 209606) (close-paren 209604 . 209605) (symbol 209592 . 209604) (open-paren 209591 . 209592) (symbol 209587 . 209590) (open-paren 209586 . 209587) (open-paren 209585 . 209586) (symbol 209581 . 209584) (open-paren 209580 . 209581) (string 209242 . 209577) (close-paren 209238 . 209239) (symbol 209229 . 209238) (open-paren 209228 . 209229) (symbol 209201 . 209227) (symbol 209192 . 209200) (open-paren 209191 . 209192) (close-paren 209188 . 209189) (close-paren 209187 . 209188) (close-paren 209186 . 209187) (symbol 209161 . 209186) (open-paren 209160 . 209161) (close-paren 209154 . 209155) (close-paren 209153 . 209154) (close-paren 209152 . 209153) (close-paren 209151 . 209152) (symbol 209150 . 209151) (symbol 209128 . 209149) (open-paren 209127 . 209128) (close-paren 209115 . 209116) (symbol 209114 . 209115) (symbol 209094 . 209113) (open-paren 209093 . 209094) (symbol 209088 . 209092) (open-paren 209087 . 209088) (close-paren 209077 . 209078) (close-paren 209076 . 209077) (close-paren 209075 . 209076) (symbol 209074 . 209075) (symbol 209050 . 209073) (open-paren 209049 . 209050) (symbol 209042 . 209048) (open-paren 209041 . 209042) (open-paren 209040 . 209041) (symbol 209036 . 209039) (open-paren 209035 . 209036) (close-paren 209027 . 209028) (close-paren 209026 . 209027) (symbol 209014 . 209026) (symbol 208992 . 209013) (open-paren 208991 . 208992) (symbol 208989 . 208990) (open-paren 208988 . 208989) (symbol 208981 . 208987) (open-paren 208980 . 208981) (close-paren 208974 . 208975) (symbol 208973 . 208974) (symbol 208948 . 208972) (symbol 208943 . 208947) (open-paren 208942 . 208943) (close-paren 208936 . 208937) (string 208913 . 208936) (symbol 208905 . 208912) (open-paren 208904 . 208905) (close-paren 208896 . 208897) (symbol 208884 . 208896) (symbol 208879 . 208883) (open-paren 208878 . 208879) (symbol 208875 . 208877) (open-paren 208874 . 208875) (close-paren 208870 . 208871) (close-paren 208869 . 208870) (symbol 208847 . 208869) (punctuation 208846 . 208847) (punctuation 208845 . 208846) (symbol 208821 . 208844) (open-paren 208820 . 208821) (symbol 208790 . 208813) (symbol 208787 . 208789) (open-paren 208786 . 208787) (close-paren 208782 . 208783) (symbol 208771 . 208782) (open-paren 208770 . 208771) (close-paren 208766 . 208767) (open-paren 208765 . 208766) (symbol 208742 . 208764) (symbol 208736 . 208741) (open-paren 208735 . 208736) (close-paren 208732 . 208733) (close-paren 208731 . 208732) (close-paren 208730 . 208731) (symbol 208708 . 208730) (open-paren 208707 . 208708) (close-paren 208701 . 208702) (symbol 208679 . 208701) (open-paren 208678 . 208679) (symbol 208647 . 208671) (symbol 208644 . 208646) (open-paren 208643 . 208644) (close-paren 208639 . 208640) (symbol 208628 . 208639) (open-paren 208627 . 208628) (string 208483 . 208624) (close-paren 208479 . 208480) (open-paren 208478 . 208479) (symbol 208448 . 208477) (symbol 208442 . 208447) (open-paren 208441 . 208442) (close-paren 208438 . 208439) (close-paren 208437 . 208438) (close-paren 208436 . 208437) (symbol 208435 . 208436) (symbol 208427 . 208434) (punctuation 208426 . 208427) (symbol 208424 . 208425) (symbol 208412 . 208423) (open-paren 208411 . 208412) (close-paren 208405 . 208406) (close-paren 208404 . 208405) (close-paren 208403 . 208404) (symbol 208399 . 208403) (punctuation 208398 . 208399) (symbol 208394 . 208397) (symbol 208390 . 208393) (symbol 208369 . 208389) (open-paren 208368 . 208369) (symbol 208366 . 208367) (open-paren 208365 . 208366) (close-paren 208354 . 208355) (close-paren 208353 . 208354) (number 208352 . 208353) (symbol 208347 . 208351) (close-paren 208345 . 208346) (close-paren 208344 . 208345) (symbol 208343 . 208344) (symbol 208330 . 208342) (open-paren 208329 . 208330) (symbol 208325 . 208328) (symbol 208323 . 208324) (open-paren 208322 . 208323) (symbol 208320 . 208321) (open-paren 208319 . 208320) (symbol 208315 . 208318) (open-paren 208314 . 208315) (close-paren 208303 . 208304) (close-paren 208302 . 208303) (symbol 208298 . 208302) (close-paren 208296 . 208297) (symbol 208295 . 208296) (symbol 208278 . 208294) (open-paren 208277 . 208278) (symbol 208275 . 208276) (open-paren 208274 . 208275) (symbol 208270 . 208273) (open-paren 208269 . 208270) (close-paren 208234 . 208235) (close-paren 208233 . 208234) (number 208232 . 208233) (number 208188 . 208189) (close-paren 208167 . 208168) (symbol 208162 . 208167) (punctuation 208161 . 208162) (close-paren 208159 . 208160) (symbol 208158 . 208159) (symbol 208134 . 208157) (open-paren 208133 . 208134) (symbol 208130 . 208132) (open-paren 208129 . 208130) (symbol 208126 . 208128) (open-paren 208125 . 208126) (symbol 208120 . 208124) (open-paren 208119 . 208120) (open-paren 208118 . 208119) (symbol 208113 . 208117) (open-paren 208112 . 208113) (close-paren 208108 . 208109) (symbol 208107 . 208108) (open-paren 208106 . 208107) (symbol 208084 . 208105) (symbol 208078 . 208083) (open-paren 208077 . 208078) (close-paren 208074 . 208075) (close-paren 208073 . 208074) (close-paren 208072 . 208073) (close-paren 208071 . 208072) (close-paren 208070 . 208071) (close-paren 208069 . 208070) (symbol 208066 . 208069) (close-paren 208064 . 208065) (symbol 208063 . 208064) (symbol 208051 . 208062) (open-paren 208050 . 208051) (close-paren 208048 . 208049) (symbol 208047 . 208048) (symbol 208033 . 208046) (open-paren 208032 . 208033) (symbol 208011 . 208031) (open-paren 208010 . 208011) (close-paren 207998 . 207999) (close-paren 207997 . 207998) (close-paren 207996 . 207997) (symbol 207989 . 207996) (punctuation 207988 . 207989) (symbol 207986 . 207987) (symbol 207974 . 207985) (open-paren 207973 . 207974) (symbol 207969 . 207972) (open-paren 207968 . 207969) (close-paren 207947 . 207948) (symbol 207938 . 207947) (punctuation 207937 . 207938) (symbol 207935 . 207936) (symbol 207923 . 207934) (open-paren 207922 . 207923) (symbol 207918 . 207921) (open-paren 207917 . 207918) (symbol 207912 . 207916) (open-paren 207911 . 207912) (close-paren 207901 . 207902) (close-paren 207900 . 207901) (close-paren 207899 . 207900) (symbol 207894 . 207899) (open-paren 207893 . 207894) (symbol 207881 . 207892) (open-paren 207880 . 207881) (symbol 207878 . 207879) (open-paren 207877 . 207878) (symbol 207870 . 207876) (open-paren 207869 . 207870) (close-paren 207861 . 207862) (close-paren 207860 . 207861) (symbol 207851 . 207860) (open-paren 207850 . 207851) (close-paren 207833 . 207834) (close-paren 207832 . 207833) (close-paren 207831 . 207832) (symbol 207826 . 207831) (open-paren 207825 . 207826) (symbol 207805 . 207824) (open-paren 207804 . 207805) (symbol 207794 . 207803) (open-paren 207793 . 207794) (symbol 207790 . 207792) (open-paren 207789 . 207790) (symbol 207783 . 207788) (open-paren 207782 . 207783) (close-paren 207776 . 207777) (close-paren 207775 . 207776) (symbol 207766 . 207775) (open-paren 207765 . 207766) (symbol 207755 . 207764) (open-paren 207754 . 207755) (symbol 207735 . 207749) (open-paren 207734 . 207735) (close-paren 207730 . 207731) (symbol 207727 . 207730) (symbol 207701 . 207726) (symbol 207696 . 207700) (open-paren 207695 . 207696) (close-paren 207691 . 207692) (symbol 207680 . 207691) (open-paren 207679 . 207680) (string 207625 . 207676) (close-paren 207621 . 207622) (open-paren 207620 . 207621) (symbol 207596 . 207619) (symbol 207590 . 207595) (open-paren 207589 . 207590) (close-paren 207552 . 207553) (close-paren 207551 . 207552) (close-paren 207550 . 207551) (close-paren 207549 . 207550) (close-paren 207548 . 207549) (symbol 207547 . 207548) (symbol 207537 . 207538) (open-paren 207536 . 207537) (close-paren 207488 . 207489) (symbol 207485 . 207488) (close-paren 207475 . 207476) (symbol 207471 . 207475) (punctuation 207470 . 207471) (close-paren 207468 . 207469) (symbol 207465 . 207468) (symbol 207463 . 207464) (number 207462 . 207463) (open-paren 207461 . 207462) (close-paren 207459 . 207460) (symbol 207456 . 207459) (symbol 207454 . 207455) (number 207453 . 207454) (open-paren 207452 . 207453) (symbol 207431 . 207451) (open-paren 207430 . 207431) (close-paren 207420 . 207421) (close-paren 207419 . 207420) (close-paren 207418 . 207419) (symbol 207414 . 207418) (symbol 207401 . 207413) (open-paren 207400 . 207401) (symbol 207396 . 207399) (symbol 207394 . 207395) (open-paren 207393 . 207394) (symbol 207389 . 207392) (close-paren 207373 . 207374) (symbol 207369 . 207373) (symbol 207352 . 207368) (open-paren 207351 . 207352) (symbol 207347 . 207350) (symbol 207342 . 207346) (open-paren 207341 . 207342) (close-paren 207331 . 207332) (close-paren 207330 . 207331) (close-paren 207329 . 207330) (symbol 207328 . 207329) (symbol 207305 . 207327) (open-paren 207304 . 207305) (symbol 207299 . 207303) (symbol 207294 . 207298) (open-paren 207293 . 207294) (close-paren 207278 . 207279) (symbol 207266 . 207278) (symbol 207263 . 207265) (symbol 207261 . 207262) (open-paren 207260 . 207261) (symbol 207256 . 207259) (open-paren 207255 . 207256) (open-paren 207254 . 207255) (symbol 207242 . 207246) (open-paren 207241 . 207242) (close-paren 207233 . 207234) (symbol 207230 . 207233) (symbol 207226 . 207229) (symbol 207221 . 207225) (close-paren 207209 . 207210) (close-paren 207208 . 207209) (symbol 207207 . 207208) (symbol 207193 . 207206) (open-paren 207192 . 207193) (symbol 207189 . 207191) (open-paren 207188 . 207189) (open-paren 207187 . 207188) (symbol 207183 . 207186) (open-paren 207182 . 207183) (close-paren 207176 . 207177) (symbol 207172 . 207176) (symbol 207168 . 207171) (open-paren 207167 . 207168) (symbol 207162 . 207166) (open-paren 207161 . 207162) (close-paren 207157 . 207158) (symbol 207153 . 207157) (symbol 207151 . 207152) (open-paren 207150 . 207151) (symbol 207126 . 207149) (symbol 207120 . 207125) (open-paren 207119 . 207120) (close-paren 207116 . 207117) (close-paren 207115 . 207116) (close-paren 207114 . 207115) (symbol 207091 . 207114) (punctuation 207090 . 207091) (punctuation 207089 . 207090) (symbol 207076 . 207088) (symbol 207062 . 207075) (open-paren 207061 . 207062) (close-paren 207055 . 207056) (symbol 207054 . 207055) (symbol 207028 . 207053) (symbol 207023 . 207027) (open-paren 207022 . 207023) (close-paren 207016 . 207017) (string 206993 . 207016) (symbol 206985 . 206992) (open-paren 206984 . 206985) (close-paren 206976 . 206977) (symbol 206964 . 206976) (symbol 206959 . 206963) (open-paren 206958 . 206959) (symbol 206955 . 206957) (open-paren 206954 . 206955) (close-paren 206950 . 206951) (close-paren 206949 . 206950) (symbol 206926 . 206949) (punctuation 206925 . 206926) (punctuation 206924 . 206925) (symbol 206900 . 206923) (open-paren 206899 . 206900) (symbol 206869 . 206892) (symbol 206866 . 206868) (open-paren 206865 . 206866) (close-paren 206861 . 206862) (symbol 206850 . 206861) (open-paren 206849 . 206850) (string 206693 . 206846) (close-paren 206689 . 206690) (open-paren 206688 . 206689) (symbol 206664 . 206687) (symbol 206658 . 206663) (open-paren 206657 . 206658) (close-paren 206654 . 206655) (close-paren 206653 . 206654) (close-paren 206652 . 206653) (symbol 206629 . 206652) (open-paren 206628 . 206629) (close-paren 206622 . 206623) (symbol 206599 . 206622) (open-paren 206598 . 206599) (symbol 206566 . 206591) (symbol 206563 . 206565) (open-paren 206562 . 206563) (close-paren 206558 . 206559) (symbol 206547 . 206558) (open-paren 206546 . 206547) (close-paren 206542 . 206543) (open-paren 206541 . 206542) (symbol 206510 . 206540) (symbol 206504 . 206509) (open-paren 206503 . 206504) (close-paren 206500 . 206501) (close-paren 206499 . 206500) (symbol 206496 . 206499) (close-paren 206494 . 206495) (symbol 206485 . 206494) (open-paren 206484 . 206485) (close-paren 206482 . 206483) (symbol 206473 . 206482) (open-paren 206472 . 206473) (symbol 206451 . 206471) (open-paren 206450 . 206451) (close-paren 206446 . 206447) (symbol 206435 . 206446) (open-paren 206434 . 206435) (string 206394 . 206431) (close-paren 206390 . 206391) (open-paren 206389 . 206390) (symbol 206371 . 206388) (symbol 206365 . 206370) (open-paren 206364 . 206365) (close-paren 206361 . 206362) (close-paren 206360 . 206361) (close-paren 206359 . 206360) (close-paren 206358 . 206359) (string 206338 . 206358) (symbol 206330 . 206337) (open-paren 206329 . 206330) (close-paren 206321 . 206322) (symbol 206318 . 206321) (close-paren 206316 . 206317) (symbol 206310 . 206316) (symbol 206306 . 206309) (open-paren 206305 . 206306) (close-paren 206303 . 206304) (symbol 206297 . 206303) (symbol 206293 . 206296) (open-paren 206292 . 206293) (symbol 206271 . 206291) (open-paren 206270 . 206271) (symbol 206255 . 206261) (symbol 206252 . 206254) (open-paren 206251 . 206252) (close-paren 206245 . 206246) (close-paren 206244 . 206245) (close-paren 206243 . 206244) (symbol 206210 . 206243) (open-paren 206209 . 206210) (symbol 206202 . 206208) (open-paren 206201 . 206202) (open-paren 206200 . 206201) (symbol 206196 . 206199) (open-paren 206195 . 206196) (close-paren 206191 . 206192) (symbol 206180 . 206191) (open-paren 206179 . 206180) (string 206133 . 206176) (close-paren 206129 . 206130) (open-paren 206128 . 206129) (symbol 206106 . 206127) (symbol 206100 . 206105) (open-paren 206099 . 206100) (close-paren 206096 . 206097) (close-paren 206095 . 206096) (close-paren 206094 . 206095) (close-paren 206093 . 206094) (close-paren 206092 . 206093) (close-paren 206091 . 206092) (close-paren 206090 . 206091) (close-paren 206089 . 206090) (string 206050 . 206089) (symbol 206042 . 206049) (open-paren 206041 . 206042) (close-paren 206029 . 206030) (close-paren 206028 . 206029) (symbol 206024 . 206028) (punctuation 206023 . 206024) (symbol 205984 . 206004) (open-paren 205983 . 205984) (close-paren 205967 . 205968) (symbol 205936 . 205939) (symbol 205888 . 205891) (symbol 205883 . 205887) (open-paren 205882 . 205883) (symbol 205862 . 205867) (open-paren 205861 . 205862) (close-paren 205847 . 205848) (close-paren 205846 . 205847) (symbol 205812 . 205816) (symbol 205807 . 205811) (open-paren 205806 . 205807) (symbol 205784 . 205788) (symbol 205780 . 205783) (open-paren 205779 . 205780) (symbol 205776 . 205778) (open-paren 205775 . 205776) (close-paren 205765 . 205766) (close-paren 205764 . 205765) (close-paren 205763 . 205764) (symbol 205759 . 205763) (symbol 205743 . 205758) (open-paren 205742 . 205743) (symbol 205737 . 205741) (symbol 205732 . 205736) (open-paren 205731 . 205732) (close-paren 205719 . 205720) (close-paren 205718 . 205719) (symbol 205688 . 205691) (open-paren 205687 . 205688) (symbol 205682 . 205686) (symbol 205678 . 205681) (open-paren 205677 . 205678) (symbol 205671 . 205676) (open-paren 205670 . 205671) (symbol 205660 . 205661) (open-paren 205659 . 205660) (close-paren 205650 . 205651) (close-paren 205649 . 205650) (symbol 205645 . 205649) (symbol 205623 . 205644) (open-paren 205622 . 205623) (close-paren 205612 . 205613) (symbol 205608 . 205612) (symbol 205588 . 205607) (open-paren 205587 . 205588) (open-paren 205586 . 205587) (symbol 205574 . 205578) (open-paren 205573 . 205574) (close-paren 205565 . 205566) (close-paren 205564 . 205565) (symbol 205547 . 205564) (open-paren 205546 . 205547) (symbol 205541 . 205545) (symbol 205536 . 205540) (open-paren 205535 . 205536) (symbol 205527 . 205528) (open-paren 205526 . 205527) (close-paren 205519 . 205520) (close-paren 205518 . 205519) (string 205502 . 205518) (symbol 205494 . 205501) (open-paren 205493 . 205494) (close-paren 205485 . 205486) (symbol 205452 . 205485) (open-paren 205451 . 205452) (open-paren 205450 . 205451) (symbol 205440 . 205444) (open-paren 205439 . 205440) (close-paren 205433 . 205434) (symbol 205430 . 205433) (symbol 205426 . 205429) (symbol 205421 . 205425) (symbol 205416 . 205420) (open-paren 205415 . 205416) (symbol 205411 . 205414) (open-paren 205410 . 205411) (close-paren 205406 . 205407) (close-paren 205405 . 205406) (symbol 205384 . 205405) (punctuation 205383 . 205384) (punctuation 205382 . 205383) (symbol 205358 . 205381) (open-paren 205357 . 205358) (symbol 205327 . 205350) (symbol 205324 . 205326) (open-paren 205323 . 205324) (close-paren 205319 . 205320) (symbol 205308 . 205319) (open-paren 205307 . 205308) (string 205201 . 205304) (close-paren 205197 . 205198) (open-paren 205196 . 205197) (symbol 205174 . 205195) (symbol 205168 . 205173) (open-paren 205167 . 205168) (close-paren 205164 . 205165) (close-paren 205163 . 205164) (close-paren 205162 . 205163) (close-paren 205161 . 205162) (close-paren 205160 . 205161) (close-paren 205159 . 205160) (close-paren 205158 . 205159) (string 205124 . 205158) (symbol 205116 . 205123) (open-paren 205115 . 205116) (symbol 205103 . 205104) (open-paren 205102 . 205103) (close-paren 205091 . 205092) (close-paren 205090 . 205091) (close-paren 205089 . 205090) (symbol 205068 . 205089) (open-paren 205067 . 205068) (close-paren 205053 . 205054) (symbol 205032 . 205053) (open-paren 205031 . 205032) (close-paren 205015 . 205016) (symbol 204982 . 205015) (open-paren 204981 . 204982) (symbol 204978 . 204980) (open-paren 204977 . 204978) (close-paren 204965 . 204966) (close-paren 204964 . 204965) (symbol 204961 . 204964) (symbol 204959 . 204960) (number 204958 . 204959) (open-paren 204957 . 204958) (symbol 204947 . 204956) (open-paren 204946 . 204947) (close-paren 204934 . 204935) (close-paren 204933 . 204934) (close-paren 204932 . 204933) (symbol 204888 . 204904) (open-paren 204887 . 204888) (close-paren 204860 . 204861) (symbol 204858 . 204860) (symbol 204835 . 204857) (open-paren 204834 . 204835) (symbol 204830 . 204833) (open-paren 204829 . 204830) (symbol 204825 . 204828) (symbol 204820 . 204824) (open-paren 204819 . 204820) (close-paren 204807 . 204808) (close-paren 204806 . 204807) (symbol 204780 . 204806) (open-paren 204779 . 204780) (symbol 204776 . 204778) (symbol 204771 . 204775) (open-paren 204770 . 204771) (open-paren 204769 . 204770) (close-paren 204735 . 204736) (close-paren 204734 . 204735) (symbol 204708 . 204734) (open-paren 204707 . 204708) (close-paren 204695 . 204696) (close-paren 204694 . 204695) (symbol 204672 . 204694) (symbol 204661 . 204671) (open-paren 204660 . 204661) (close-paren 204646 . 204647) (symbol 204627 . 204646) (open-paren 204626 . 204627) (symbol 204599 . 204613) (open-paren 204598 . 204599) (open-paren 204597 . 204598) (close-paren 204561 . 204562) (close-paren 204560 . 204561) (close-paren 204559 . 204560) (symbol 204538 . 204559) (open-paren 204537 . 204538) (close-paren 204523 . 204524) (close-paren 204522 . 204523) (symbol 204501 . 204522) (open-paren 204500 . 204501) (close-paren 204482 . 204483) (symbol 204479 . 204482) (symbol 204469 . 204478) (open-paren 204468 . 204469) (symbol 204446 . 204451) (open-paren 204445 . 204446) (close-paren 204429 . 204430) (close-paren 204428 . 204429) (symbol 204392 . 204395) (symbol 204387 . 204391) (open-paren 204386 . 204387) (symbol 204337 . 204370) (open-paren 204336 . 204337) (symbol 204333 . 204335) (open-paren 204332 . 204333) (close-paren 204320 . 204321) (close-paren 204319 . 204320) (close-paren 204318 . 204319) (symbol 204298 . 204318) (open-paren 204297 . 204298) (symbol 204289 . 204296) (symbol 204284 . 204288) (open-paren 204283 . 204284) (symbol 204263 . 204282) (open-paren 204262 . 204263) (open-paren 204261 . 204262) (symbol 204216 . 204220) (open-paren 204215 . 204216) (symbol 204191 . 204206) (open-paren 204190 . 204191) (symbol 204169 . 204183) (open-paren 204168 . 204169) (close-paren 204162 . 204163) (symbol 204159 . 204162) (symbol 204156 . 204158) (symbol 204148 . 204155) (open-paren 204147 . 204148) (symbol 204143 . 204146) (open-paren 204142 . 204143) (close-paren 204138 . 204139) (symbol 204127 . 204138) (open-paren 204126 . 204127) (string 204074 . 204123) (close-paren 204070 . 204071) (open-paren 204069 . 204070) (symbol 204045 . 204068) (symbol 204039 . 204044) (open-paren 204038 . 204039) (close-paren 204035 . 204036) (close-paren 204034 . 204035) (close-paren 204033 . 204034) (symbol 204029 . 204033) (close-paren 204019 . 204020) (symbol 204015 . 204019) (symbol 203995 . 204014) (open-paren 203994 . 203995) (symbol 203991 . 203993) (open-paren 203990 . 203991) (close-paren 203984 . 203985) (close-paren 203983 . 203984) (close-paren 203982 . 203983) (symbol 203978 . 203982) (symbol 203962 . 203977) (open-paren 203961 . 203962) (symbol 203956 . 203960) (symbol 203951 . 203955) (open-paren 203950 . 203951) (close-paren 203942 . 203943) (close-paren 203941 . 203942) (close-paren 203940 . 203941) (symbol 203936 . 203940) (symbol 203916 . 203935) (open-paren 203915 . 203916) (symbol 203911 . 203914) (open-paren 203910 . 203911) (symbol 203905 . 203909) (symbol 203901 . 203904) (open-paren 203900 . 203901) (symbol 203894 . 203899) (open-paren 203893 . 203894) (close-paren 203887 . 203888) (close-paren 203886 . 203887) (close-paren 203885 . 203886) (symbol 203882 . 203885) (symbol 203864 . 203881) (open-paren 203863 . 203864) (symbol 203858 . 203862) (open-paren 203857 . 203858) (open-paren 203856 . 203857) (symbol 203852 . 203855) (open-paren 203851 . 203852) (string 203744 . 203848) (close-paren 203740 . 203741) (symbol 203737 . 203740) (symbol 203727 . 203736) (open-paren 203726 . 203727) (symbol 203699 . 203725) (symbol 203693 . 203698) (open-paren 203692 . 203693) (close-paren 203689 . 203690) (close-paren 203688 . 203689) (close-paren 203687 . 203688) (close-paren 203686 . 203687) (close-paren 203685 . 203686) (symbol 203684 . 203685) (symbol 203672 . 203683) (open-paren 203671 . 203672) (close-paren 203669 . 203670) (symbol 203668 . 203669) (symbol 203654 . 203667) (open-paren 203653 . 203654) (symbol 203648 . 203652) (open-paren 203647 . 203648) (symbol 203637 . 203638) (symbol 203634 . 203636) (open-paren 203633 . 203634) (close-paren 203627 . 203628) (close-paren 203626 . 203627) (close-paren 203625 . 203626) (close-paren 203624 . 203625) (symbol 203616 . 203624) (symbol 203612 . 203615) (open-paren 203611 . 203612) (symbol 203602 . 203610) (symbol 203597 . 203601) (open-paren 203596 . 203597) (close-paren 203586 . 203587) (close-paren 203585 . 203586) (symbol 203577 . 203585) (symbol 203573 . 203576) (open-paren 203572 . 203573) (symbol 203570 . 203571) (symbol 203565 . 203569) (open-paren 203564 . 203565) (close-paren 203552 . 203553) (symbol 203543 . 203552) (punctuation 203542 . 203543) (close-paren 203540 . 203541) (symbol 203532 . 203540) (symbol 203528 . 203531) (open-paren 203527 . 203528) (symbol 203515 . 203526) (open-paren 203514 . 203515) (symbol 203511 . 203513) (open-paren 203510 . 203511) (close-paren 203502 . 203503) (close-paren 203501 . 203502) (symbol 203500 . 203501) (symbol 203496 . 203499) (open-paren 203495 . 203496) (symbol 203470 . 203478) (symbol 203466 . 203469) (open-paren 203465 . 203466) (symbol 203459 . 203464) (open-paren 203458 . 203459) (close-paren 203452 . 203453) (symbol 203451 . 203452) (close-paren 203441 . 203442) (close-paren 203440 . 203441) (close-paren 203439 . 203440) (close-paren 203438 . 203439) (symbol 203433 . 203438) (open-paren 203432 . 203433) (symbol 203428 . 203431) (symbol 203425 . 203427) (open-paren 203424 . 203425) (symbol 203412 . 203423) (open-paren 203411 . 203412) (symbol 203402 . 203410) (open-paren 203401 . 203402) (open-paren 203400 . 203401) (symbol 203396 . 203399) (open-paren 203395 . 203396) (string 203311 . 203392) (close-paren 203307 . 203308) (symbol 203304 . 203307) (symbol 203294 . 203303) (open-paren 203293 . 203294) (symbol 203259 . 203292) (symbol 203253 . 203258) (open-paren 203252 . 203253) (close-paren 203249 . 203250) (close-paren 203248 . 203249) (symbol 203227 . 203248) (open-paren 203226 . 203227) (close-paren 203150 . 203151) (symbol 203143 . 203150) (open-paren 203142 . 203143) (symbol 203115 . 203141) (symbol 203109 . 203114) (open-paren 203108 . 203109) (close-paren 202952 . 202953) (close-paren 202951 . 202952) (close-paren 202950 . 202951) (symbol 202949 . 202950) (close-paren 202941 . 202942) (symbol 202915 . 202941) (punctuation 202914 . 202915) (symbol 202872 . 202894) (punctuation 202871 . 202872) (symbol 202869 . 202870) (symbol 202857 . 202868) (open-paren 202856 . 202857) (close-paren 202848 . 202849) (symbol 202837 . 202848) (punctuation 202836 . 202837) (symbol 202826 . 202835) (punctuation 202825 . 202826) (symbol 202823 . 202824) (symbol 202811 . 202822) (open-paren 202810 . 202811) (close-paren 202802 . 202803) (close-paren 202801 . 202802) (close-paren 202800 . 202801) (symbol 202798 . 202800) (symbol 202793 . 202797) (symbol 202780 . 202792) (open-paren 202779 . 202780) (symbol 202777 . 202778) (open-paren 202776 . 202777) (open-paren 202775 . 202776) (symbol 202771 . 202774) (open-paren 202770 . 202771) (symbol 202761 . 202765) (symbol 202756 . 202760) (open-paren 202755 . 202756) (close-paren 202751 . 202752) (symbol 202740 . 202751) (punctuation 202739 . 202740) (symbol 202729 . 202738) (punctuation 202728 . 202729) (symbol 202725 . 202727) (symbol 202720 . 202724) (symbol 202704 . 202719) (open-paren 202703 . 202704) (string 202523 . 202700) (close-paren 202519 . 202520) (symbol 202515 . 202519) (symbol 202512 . 202514) (symbol 202507 . 202511) (open-paren 202506 . 202507) (symbol 202485 . 202505) (symbol 202479 . 202484) (open-paren 202478 . 202479) (close-paren 202475 . 202476) (close-paren 202474 . 202475) (close-paren 202473 . 202474) (symbol 202470 . 202473) (symbol 202437 . 202469) (symbol 202432 . 202436) (open-paren 202431 . 202432) (close-paren 202425 . 202426) (close-paren 202424 . 202425) (close-paren 202423 . 202424) (close-paren 202422 . 202423) (symbol 202419 . 202422) (string 202414 . 202418) (symbol 202406 . 202413) (open-paren 202405 . 202406) (symbol 202399 . 202404) (open-paren 202398 . 202399) (close-paren 202386 . 202387) (symbol 202384 . 202386) (symbol 202376 . 202383) (open-paren 202375 . 202376) (symbol 202359 . 202362) (symbol 202344 . 202358) (open-paren 202343 . 202344) (close-paren 202333 . 202334) (symbol 202301 . 202333) (symbol 202298 . 202300) (open-paren 202297 . 202298) (symbol 202290 . 202296) (open-paren 202289 . 202290) (symbol 202268 . 202282) (open-paren 202267 . 202268) (string 202021 . 202078) (close-paren 202017 . 202018) (open-paren 202016 . 202017) (symbol 201992 . 202015) (symbol 201986 . 201991) (open-paren 201985 . 201986) (close-paren 201982 . 201983) (close-paren 201981 . 201982) (close-paren 201980 . 201981) (symbol 201957 . 201980) (punctuation 201956 . 201957) (punctuation 201955 . 201956) (symbol 201931 . 201954) (punctuation 201930 . 201931) (symbol 201921 . 201929) (open-paren 201920 . 201921) (close-paren 201914 . 201915) (symbol 201882 . 201914) (symbol 201873 . 201881) (symbol 201868 . 201872) (open-paren 201867 . 201868) (close-paren 201861 . 201862) (symbol 201853 . 201861) (symbol 201845 . 201852) (open-paren 201844 . 201845) (close-paren 201836 . 201837) (symbol 201813 . 201836) (symbol 201809 . 201812) (open-paren 201808 . 201809) (symbol 201805 . 201807) (open-paren 201804 . 201805) (string 201698 . 201801) (close-paren 201694 . 201695) (symbol 201686 . 201694) (open-paren 201685 . 201686) (symbol 201661 . 201684) (symbol 201655 . 201660) (open-paren 201654 . 201655) (close-paren 201651 . 201652) (close-paren 201650 . 201651) (close-paren 201649 . 201650) (symbol 201630 . 201649) (open-paren 201629 . 201630) (close-paren 201623 . 201624) (close-paren 201622 . 201623) (close-paren 201621 . 201622) (symbol 201616 . 201621) (symbol 201609 . 201615) (open-paren 201608 . 201609) (symbol 201601 . 201607) (open-paren 201600 . 201601) (close-paren 201592 . 201593) (number 201591 . 201592) (symbol 201578 . 201590) (open-paren 201577 . 201578) (close-paren 201567 . 201568) (close-paren 201566 . 201567) (symbol 201558 . 201566) (symbol 201544 . 201557) (open-paren 201543 . 201544) (close-paren 201528 . 201529) (close-paren 201527 . 201528) (symbol 201519 . 201527) (symbol 201508 . 201518) (open-paren 201507 . 201508) (symbol 201502 . 201506) (symbol 201499 . 201501) (open-paren 201498 . 201499) (close-paren 201483 . 201484) (close-paren 201482 . 201483) (symbol 201477 . 201482) (symbol 201470 . 201476) (open-paren 201469 . 201470) (symbol 201458 . 201468) (open-paren 201457 . 201458) (symbol 201453 . 201456) (open-paren 201452 . 201453) (symbol 201449 . 201451) (open-paren 201448 . 201449) (close-paren 201442 . 201443) (close-paren 201441 . 201442) (close-paren 201440 . 201441) (close-paren 201439 . 201440) (symbol 201436 . 201439) (symbol 201434 . 201435) (open-paren 201433 . 201434) (close-paren 201415 . 201416) (symbol 201413 . 201415) (close-paren 201394 . 201395) (symbol 201392 . 201394) (symbol 201386 . 201391) (symbol 201383 . 201385) (open-paren 201382 . 201383) (open-paren 201381 . 201382) (close-paren 201337 . 201338) (number 201335 . 201337) (close-paren 201299 . 201300) (number 201297 . 201299) (symbol 201291 . 201296) (symbol 201288 . 201290) (open-paren 201287 . 201288) (open-paren 201286 . 201287) (close-paren 201244 . 201245) (number 201242 . 201244) (close-paren 201208 . 201209) (number 201206 . 201208) (symbol 201200 . 201205) (symbol 201197 . 201199) (open-paren 201196 . 201197) (open-paren 201195 . 201196) (symbol 201174 . 201178) (open-paren 201173 . 201174) (symbol 201168 . 201172) (open-paren 201167 . 201168) (close-paren 201156 . 201157) (symbol 201141 . 201156) (symbol 201135 . 201140) (open-paren 201134 . 201135) (close-paren 201123 . 201124) (close-paren 201122 . 201123) (symbol 201110 . 201122) (number 201108 . 201109) (symbol 201104 . 201107) (open-paren 201103 . 201104) (symbol 201094 . 201102) (open-paren 201093 . 201094) (close-paren 201082 . 201083) (close-paren 201081 . 201082) (close-paren 201080 . 201081) (symbol 201075 . 201080) (open-paren 201074 . 201075) (close-paren 201072 . 201073) (symbol 201063 . 201072) (open-paren 201062 . 201063) (symbol 201043 . 201061) (open-paren 201042 . 201043) (symbol 201029 . 201041) (open-paren 201028 . 201029) (open-paren 201027 . 201028) (symbol 201022 . 201026) (open-paren 201021 . 201022) (close-paren 201017 . 201018) (symbol 201006 . 201017) (open-paren 201005 . 201006) (string 200872 . 201002) (close-paren 200868 . 200869) (open-paren 200867 . 200868) (symbol 200840 . 200866) (symbol 200834 . 200839) (open-paren 200833 . 200834) (close-paren 200830 . 200831) (close-paren 200829 . 200830) (string 200825 . 200829) (symbol 200809 . 200824) (open-paren 200808 . 200809) (close-paren 200804 . 200805) (symbol 200793 . 200804) (open-paren 200792 . 200793) (string 200758 . 200789) (close-paren 200754 . 200755) (open-paren 200753 . 200754) (symbol 200725 . 200752) (symbol 200719 . 200724) (open-paren 200718 . 200719) (close-paren 200715 . 200716) (close-paren 200714 . 200715) (close-paren 200713 . 200714) (close-paren 200712 . 200713) (string 200709 . 200712) (symbol 200693 . 200708) (open-paren 200692 . 200693) (close-paren 200684 . 200685) (string 200681 . 200684) (symbol 200674 . 200680) (open-paren 200673 . 200674) (close-paren 200663 . 200664) (symbol 200651 . 200663) (number 200649 . 200650) (symbol 200645 . 200648) (open-paren 200644 . 200645) (symbol 200641 . 200643) (open-paren 200640 . 200641) (close-paren 200566 . 200567) (close-paren 200565 . 200566) (close-paren 200564 . 200565) (close-paren 200563 . 200564) (symbol 200558 . 200563) (open-paren 200557 . 200558) (close-paren 200555 . 200556) (symbol 200546 . 200555) (open-paren 200545 . 200546) (symbol 200526 . 200544) (open-paren 200525 . 200526) (symbol 200512 . 200524) (open-paren 200511 . 200512) (open-paren 200510 . 200511) (symbol 200506 . 200509) (open-paren 200505 . 200506) (close-paren 200501 . 200502) (symbol 200490 . 200501) (open-paren 200489 . 200490) (string 200455 . 200486) (close-paren 200451 . 200452) (open-paren 200450 . 200451) (symbol 200422 . 200449) (symbol 200416 . 200421) (open-paren 200415 . 200416) (close-paren 200377 . 200378) (close-paren 200376 . 200377) (close-paren 200375 . 200376) (close-paren 200374 . 200375) (close-paren 200373 . 200374) (symbol 200361 . 200373) (symbol 200354 . 200360) (open-paren 200353 . 200354) (symbol 200345 . 200346) (open-paren 200344 . 200345) (close-paren 200337 . 200338) (close-paren 200336 . 200337) (close-paren 200335 . 200336) (close-paren 200334 . 200335) (symbol 200322 . 200334) (string 200317 . 200321) (symbol 200310 . 200316) (open-paren 200309 . 200310) (symbol 200280 . 200292) (close-paren 200260 . 200261) (string 200249 . 200260) (symbol 200236 . 200248) (open-paren 200235 . 200236) (symbol 200232 . 200234) (open-paren 200231 . 200232) (symbol 200224 . 200230) (open-paren 200223 . 200224) (close-paren 200142 . 200143) (close-paren 200141 . 200142) (close-paren 200140 . 200141) (close-paren 200139 . 200140) (symbol 200138 . 200139) (close-paren 200136 . 200137) (symbol 200124 . 200136) (open-paren 200123 . 200124) (symbol 200110 . 200122) (symbol 200092 . 200109) (open-paren 200091 . 200092) (symbol 200060 . 200075) (open-paren 200059 . 200060) (symbol 200031 . 200045) (open-paren 200030 . 200031) (symbol 199996 . 200018) (symbol 199992 . 199995) (open-paren 199991 . 199992) (open-paren 199990 . 199991) (close-paren 199983 . 199984) (close-paren 199982 . 199983) (close-paren 199981 . 199982) (number 199980 . 199981) (symbol 199967 . 199979) (open-paren 199966 . 199967) (close-paren 199956 . 199957) (symbol 199944 . 199956) (symbol 199937 . 199943) (open-paren 199936 . 199937) (close-paren 199924 . 199925) (string 199913 . 199924) (symbol 199900 . 199912) (open-paren 199899 . 199900) (symbol 199896 . 199898) (open-paren 199895 . 199896) (close-paren 199887 . 199888) (symbol 199875 . 199887) (symbol 199864 . 199874) (open-paren 199863 . 199864) (open-paren 199862 . 199863) (close-paren 199855 . 199856) (close-paren 199854 . 199855) (close-paren 199853 . 199854) (close-paren 199852 . 199853) (symbol 199840 . 199852) (symbol 199833 . 199839) (open-paren 199832 . 199833) (symbol 199807 . 199821) (open-paren 199806 . 199807) (close-paren 199796 . 199797) (string 199784 . 199796) (symbol 199773 . 199783) (open-paren 199772 . 199773) (symbol 199765 . 199771) (open-paren 199764 . 199765) (close-paren 199689 . 199690) (symbol 199677 . 199689) (symbol 199670 . 199676) (open-paren 199669 . 199670) (close-paren 199613 . 199614) (symbol 199602 . 199613) (symbol 199598 . 199601) (open-paren 199597 . 199598) (open-paren 199596 . 199597) (close-paren 199589 . 199590) (close-paren 199588 . 199589) (symbol 199576 . 199588) (symbol 199569 . 199575) (open-paren 199568 . 199569) (close-paren 199560 . 199561) (symbol 199540 . 199560) (open-paren 199539 . 199540) (open-paren 199538 . 199539) (symbol 199393 . 199397) (open-paren 199392 . 199393) (close-paren 199386 . 199387) (close-paren 199385 . 199386) (close-paren 199384 . 199385) (symbol 199362 . 199384) (open-paren 199361 . 199362) (symbol 199349 . 199360) (open-paren 199348 . 199349) (open-paren 199347 . 199348) (symbol 199343 . 199346) (open-paren 199342 . 199343) (close-paren 199338 . 199339) (symbol 199326 . 199338) (open-paren 199325 . 199326) (symbol 199309 . 199324) (symbol 199300 . 199308) (open-paren 199299 . 199300) (close-paren 199296 . 199297) (close-paren 199295 . 199296) (close-paren 199294 . 199295) (close-paren 199293 . 199294) (close-paren 199292 . 199293) (symbol 199277 . 199292) (open-paren 199276 . 199277) (close-paren 199266 . 199267) (close-paren 199265 . 199266) (close-paren 199264 . 199265) (symbol 199247 . 199264) (open-paren 199246 . 199247) (symbol 199223 . 199245) (open-paren 199222 . 199223) (open-paren 199221 . 199222) (symbol 199217 . 199220) (open-paren 199216 . 199217) (symbol 199189 . 199209) (symbol 199184 . 199188) (open-paren 199183 . 199184) (close-paren 199177 . 199178) (close-paren 199176 . 199177) (string 199173 . 199176) (symbol 199166 . 199172) (open-paren 199165 . 199166) (symbol 199144 . 199158) (open-paren 199143 . 199144) (close-paren 199137 . 199138) (close-paren 199136 . 199137) (symbol 199103 . 199136) (open-paren 199102 . 199103) (close-paren 199086 . 199087) (close-paren 199085 . 199086) (string 199077 . 199085) (symbol 199066 . 199076) (open-paren 199065 . 199066) (symbol 199061 . 199064) (open-paren 199060 . 199061) (symbol 199057 . 199059) (open-paren 199056 . 199057) (symbol 199049 . 199055) (open-paren 199048 . 199049) (close-paren 199044 . 199045) (string 199041 . 199044) (symbol 199034 . 199040) (open-paren 199033 . 199034) (close-paren 199029 . 199030) (symbol 199018 . 199029) (open-paren 199017 . 199018) (string 198966 . 199014) (close-paren 198962 . 198963) (open-paren 198961 . 198962) (symbol 198940 . 198960) (symbol 198934 . 198939) (open-paren 198933 . 198934) (close-paren 198930 . 198931) (close-paren 198929 . 198930) (close-paren 198928 . 198929) (close-paren 198927 . 198928) (close-paren 198926 . 198927) (symbol 198911 . 198926) (open-paren 198910 . 198911) (close-paren 198900 . 198901) (close-paren 198899 . 198900) (close-paren 198898 . 198899) (symbol 198881 . 198898) (open-paren 198880 . 198881) (symbol 198857 . 198879) (open-paren 198856 . 198857) (open-paren 198855 . 198856) (symbol 198851 . 198854) (open-paren 198850 . 198851) (symbol 198823 . 198843) (symbol 198818 . 198822) (open-paren 198817 . 198818) (close-paren 198811 . 198812) (close-paren 198810 . 198811) (string 198807 . 198810) (symbol 198800 . 198806) (open-paren 198799 . 198800) (symbol 198778 . 198792) (open-paren 198777 . 198778) (close-paren 198771 . 198772) (close-paren 198770 . 198771) (symbol 198737 . 198770) (open-paren 198736 . 198737) (close-paren 198720 . 198721) (close-paren 198719 . 198720) (string 198711 . 198719) (symbol 198700 . 198710) (open-paren 198699 . 198700) (symbol 198695 . 198698) (open-paren 198694 . 198695) (symbol 198691 . 198693) (open-paren 198690 . 198691) (symbol 198683 . 198689) (open-paren 198682 . 198683) (close-paren 198678 . 198679) (string 198675 . 198678) (symbol 198668 . 198674) (open-paren 198667 . 198668) (close-paren 198663 . 198664) (symbol 198652 . 198663) (open-paren 198651 . 198652) (string 198622 . 198648) (close-paren 198618 . 198619) (open-paren 198617 . 198618) (symbol 198594 . 198616) (symbol 198588 . 198593) (open-paren 198587 . 198588) (close-paren 198584 . 198585) (close-paren 198583 . 198584) (close-paren 198582 . 198583) (close-paren 198581 . 198582) (close-paren 198580 . 198581) (close-paren 198579 . 198580) (symbol 198564 . 198579) (open-paren 198563 . 198564) (close-paren 198551 . 198552) (close-paren 198550 . 198551) (close-paren 198549 . 198550) (symbol 198532 . 198549) (open-paren 198531 . 198532) (symbol 198508 . 198530) (open-paren 198507 . 198508) (open-paren 198506 . 198507) (symbol 198502 . 198505) (open-paren 198501 . 198502) (close-paren 198491 . 198492) (string 198486 . 198491) (symbol 198479 . 198485) (open-paren 198478 . 198479) (symbol 198455 . 198469) (open-paren 198454 . 198455) (close-paren 198446 . 198447) (symbol 198431 . 198446) (open-paren 198430 . 198431) (close-paren 198421 . 198422) (close-paren 198420 . 198421) (close-paren 198419 . 198420) (symbol 198403 . 198419) (symbol 198398 . 198402) (open-paren 198397 . 198398) (symbol 198392 . 198396) (open-paren 198391 . 198392) (symbol 198369 . 198382) (open-paren 198368 . 198369) (close-paren 198360 . 198361) (string 198356 . 198360) (symbol 198349 . 198355) (open-paren 198348 . 198349) (close-paren 197769 . 197770) (symbol 197756 . 197769) (open-paren 197755 . 197756) (close-paren 197747 . 197748) (close-paren 197746 . 197747) (symbol 197713 . 197746) (open-paren 197712 . 197713) (close-paren 197694 . 197695) (close-paren 197693 . 197694) (string 197685 . 197693) (symbol 197674 . 197684) (open-paren 197673 . 197674) (symbol 197669 . 197672) (open-paren 197668 . 197669) (symbol 197665 . 197667) (open-paren 197664 . 197665) (symbol 197657 . 197663) (open-paren 197656 . 197657) (close-paren 197650 . 197651) (close-paren 197649 . 197650) (string 197646 . 197649) (symbol 197639 . 197645) (open-paren 197638 . 197639) (symbol 197615 . 197629) (open-paren 197614 . 197615) (symbol 197589 . 197607) (symbol 197586 . 197588) (open-paren 197585 . 197586) (close-paren 197581 . 197582) (string 197578 . 197581) (symbol 197571 . 197577) (open-paren 197570 . 197571) (close-paren 197566 . 197567) (string 197563 . 197566) (symbol 197551 . 197562) (open-paren 197550 . 197551) (string 197517 . 197547) (close-paren 197513 . 197514) (symbol 197510 . 197513) (open-paren 197509 . 197510) (symbol 197488 . 197508) (symbol 197482 . 197487) (open-paren 197481 . 197482) (close-paren 197478 . 197479) (close-paren 197477 . 197478) (close-paren 197476 . 197477) (close-paren 197475 . 197476) (close-paren 197474 . 197475) (symbol 197463 . 197474) (number 197461 . 197462) (symbol 197457 . 197460) (open-paren 197456 . 197457) (close-paren 197445 . 197446) (symbol 197434 . 197445) (number 197432 . 197433) (symbol 197428 . 197431) (open-paren 197427 . 197428) (symbol 197424 . 197426) (open-paren 197423 . 197424) (close-paren 197416 . 197417) (close-paren 197415 . 197416) (close-paren 197414 . 197415) (close-paren 197413 . 197414) (close-paren 197412 . 197413) (symbol 197407 . 197412) (open-paren 197406 . 197407) (close-paren 197404 . 197405) (symbol 197395 . 197404) (open-paren 197394 . 197395) (symbol 197375 . 197393) (open-paren 197374 . 197375) (symbol 197335 . 197349) (open-paren 197334 . 197335) (symbol 197322 . 197333) (open-paren 197321 . 197322) (open-paren 197320 . 197321) (symbol 197316 . 197319) (open-paren 197315 . 197316) (close-paren 197310 . 197311) (close-paren 197309 . 197310) (close-paren 197308 . 197309) (close-paren 197307 . 197308) (symbol 197302 . 197307) (open-paren 197301 . 197302) (symbol 197287 . 197300) (symbol 197284 . 197286) (open-paren 197283 . 197284) (symbol 197259 . 197272) (symbol 197255 . 197258) (open-paren 197254 . 197255) (close-paren 197247 . 197248) (close-paren 197246 . 197247) (close-paren 197245 . 197246) (close-paren 197244 . 197245) (close-paren 197243 . 197244) (number 197242 . 197243) (symbol 197226 . 197241) (open-paren 197225 . 197226) (close-paren 197207 . 197208) (symbol 197206 . 197207) (close-paren 197204 . 197205) (symbol 197192 . 197204) (open-paren 197191 . 197192) (string 197186 . 197190) (symbol 197168 . 197185) (open-paren 197167 . 197168) (symbol 197164 . 197166) (open-paren 197163 . 197164) (close-paren 197149 . 197150) (close-paren 197148 . 197149) (symbol 197136 . 197148) (open-paren 197135 . 197136) (symbol 197125 . 197134) (open-paren 197124 . 197125) (symbol 197097 . 197111) (open-paren 197096 . 197097) (symbol 197072 . 197085) (open-paren 197071 . 197072) (open-paren 197070 . 197071) (symbol 197066 . 197069) (open-paren 197065 . 197066) (symbol 197059 . 197061) (open-paren 197058 . 197059) (string 197008 . 197055) (close-paren 197004 . 197005) (open-paren 197003 . 197004) (symbol 196969 . 197002) (symbol 196960 . 196968) (open-paren 196959 . 196960) (close-paren 196956 . 196957) (close-paren 196955 . 196956) (close-paren 196954 . 196955) (symbol 196943 . 196954) (number 196941 . 196942) (symbol 196937 . 196940) (open-paren 196936 . 196937) (close-paren 196928 . 196929) (close-paren 196927 . 196928) (close-paren 196926 . 196927) (close-paren 196925 . 196926) (close-paren 196924 . 196925) (symbol 196919 . 196924) (open-paren 196918 . 196919) (close-paren 196916 . 196917) (symbol 196907 . 196916) (open-paren 196906 . 196907) (symbol 196887 . 196905) (open-paren 196886 . 196887) (symbol 196847 . 196861) (open-paren 196846 . 196847) (symbol 196834 . 196845) (open-paren 196833 . 196834) (open-paren 196832 . 196833) (symbol 196828 . 196831) (open-paren 196827 . 196828) (string 196726 . 196823) (close-paren 196722 . 196723) (open-paren 196721 . 196722) (symbol 196698 . 196720) (symbol 196689 . 196697) (open-paren 196688 . 196689) (close-paren 196685 . 196686) (close-paren 196684 . 196685) (close-paren 196683 . 196684) (symbol 196664 . 196683) (punctuation 196663 . 196664) (close-paren 196661 . 196662) (symbol 196658 . 196661) (symbol 196643 . 196657) (open-paren 196642 . 196643) (symbol 196629 . 196641) (symbol 196618 . 196628) (open-paren 196617 . 196618) (close-paren 196611 . 196612) (close-paren 196610 . 196611) (string 196607 . 196610) (string 196603 . 196606) (string 196599 . 196602) (string 196595 . 196598) (string 196591 . 196594) (string 196586 . 196590) (string 196582 . 196585) (open-paren 196581 . 196582) (punctuation 196580 . 196581) (symbol 196576 . 196579) (open-paren 196575 . 196576) (symbol 196568 . 196574) (open-paren 196567 . 196568) (close-paren 196563 . 196564) (symbol 196552 . 196563) (open-paren 196551 . 196552) (string 196524 . 196548) (close-paren 196520 . 196521) (open-paren 196519 . 196520) (symbol 196498 . 196519) (symbol 196492 . 196497) (open-paren 196491 . 196492) (close-paren 196488 . 196489) (close-paren 196487 . 196488) (symbol 196461 . 196487) (punctuation 196460 . 196461) (close-paren 196457 . 196458) (string 196454 . 196457) (symbol 196439 . 196453) (open-paren 196438 . 196439) (symbol 196425 . 196437) (symbol 196414 . 196424) (open-paren 196413 . 196414) (close-paren 196409 . 196410) (symbol 196387 . 196409) (punctuation 196386 . 196387) (close-paren 196383 . 196384) (string 196380 . 196383) (symbol 196365 . 196379) (open-paren 196364 . 196365) (symbol 196351 . 196363) (symbol 196340 . 196350) (open-paren 196339 . 196340) (close-paren 196335 . 196336) (symbol 196309 . 196335) (punctuation 196308 . 196309) (close-paren 196305 . 196306) (string 196302 . 196305) (symbol 196287 . 196301) (open-paren 196286 . 196287) (symbol 196273 . 196285) (symbol 196262 . 196272) (open-paren 196261 . 196262) (close-paren 196257 . 196258) (symbol 196237 . 196257) (punctuation 196236 . 196237) (close-paren 196233 . 196234) (string 196230 . 196233) (symbol 196215 . 196229) (open-paren 196214 . 196215) (symbol 196201 . 196213) (symbol 196190 . 196200) (open-paren 196189 . 196190) (close-paren 196185 . 196186) (symbol 196158 . 196185) (punctuation 196157 . 196158) (close-paren 196154 . 196155) (string 196151 . 196154) (symbol 196136 . 196150) (open-paren 196135 . 196136) (symbol 196122 . 196134) (symbol 196111 . 196121) (open-paren 196110 . 196111) (close-paren 196106 . 196107) (symbol 196079 . 196106) (punctuation 196078 . 196079) (close-paren 196076 . 196077) (string 196072 . 196076) (symbol 196057 . 196071) (open-paren 196056 . 196057) (symbol 196043 . 196055) (symbol 196032 . 196042) (open-paren 196031 . 196032) (close-paren 196027 . 196028) (symbol 196001 . 196027) (punctuation 196000 . 196001) (close-paren 195997 . 195998) (string 195994 . 195997) (symbol 195979 . 195993) (open-paren 195978 . 195979) (symbol 195965 . 195977) (symbol 195954 . 195964) (open-paren 195953 . 195954) (close-paren 195949 . 195950) (symbol 195929 . 195949) (punctuation 195928 . 195929) (close-paren 195925 . 195926) (string 195922 . 195925) (symbol 195907 . 195921) (open-paren 195906 . 195907) (symbol 195893 . 195905) (symbol 195882 . 195892) (open-paren 195881 . 195882) (close-paren 195877 . 195878) (symbol 195866 . 195877) (open-paren 195865 . 195866) (string 195769 . 195862) (close-paren 195765 . 195766) (open-paren 195764 . 195765) (symbol 195743 . 195764) (symbol 195737 . 195742) (open-paren 195736 . 195737) (close-paren 195733 . 195734) (close-paren 195732 . 195733) (close-paren 195731 . 195732) (close-paren 195730 . 195731) (symbol 195718 . 195730) (open-paren 195717 . 195718) (symbol 195707 . 195716) (open-paren 195706 . 195707) (close-paren 195700 . 195701) (string 195695 . 195700) (symbol 195675 . 195694) (open-paren 195674 . 195675) (close-paren 195666 . 195667) (symbol 195662 . 195666) (open-paren 195661 . 195662) (symbol 195658 . 195660) (open-paren 195657 . 195658) (close-paren 195653 . 195654) (symbol 195642 . 195653) (open-paren 195641 . 195642) (string 195573 . 195638) (close-paren 195569 . 195570) (open-paren 195568 . 195569) (symbol 195552 . 195567) (symbol 195546 . 195551) (open-paren 195545 . 195546) (close-paren 195542 . 195543) (close-paren 195541 . 195542) (close-paren 195540 . 195541) (close-paren 195539 . 195540) (close-paren 195538 . 195539) (close-paren 195537 . 195538) (symbol 195525 . 195537) (open-paren 195524 . 195525) (symbol 195514 . 195523) (open-paren 195513 . 195514) (symbol 195505 . 195506) (open-paren 195504 . 195505) (close-paren 195497 . 195498) (close-paren 195496 . 195497) (string 195489 . 195496) (symbol 195470 . 195488) (open-paren 195469 . 195470) (close-paren 195461 . 195462) (close-paren 195460 . 195461) (close-paren 195459 . 195460) (symbol 195455 . 195459) (open-paren 195454 . 195455) (close-paren 195439 . 195440) (string 195434 . 195439) (symbol 195414 . 195433) (open-paren 195413 . 195414) (symbol 195385 . 195399) (open-paren 195384 . 195385) (close-paren 195371 . 195372) (close-paren 195370 . 195371) (symbol 195365 . 195370) (symbol 195359 . 195364) (open-paren 195358 . 195359) (punctuation 195357 . 195358) (close-paren 195355 . 195356) (symbol 195351 . 195355) (symbol 195327 . 195350) (open-paren 195326 . 195327) (symbol 195321 . 195325) (open-paren 195320 . 195321) (close-paren 195307 . 195308) (close-paren 195306 . 195307) (symbol 195286 . 195306) (open-paren 195285 . 195286) (symbol 195280 . 195284) (symbol 195275 . 195279) (open-paren 195274 . 195275) (close-paren 195261 . 195262) (symbol 195259 . 195261) (close-paren 195257 . 195258) (symbol 195247 . 195257) (open-paren 195246 . 195247) (symbol 195243 . 195245) (open-paren 195242 . 195243) (symbol 195238 . 195241) (open-paren 195237 . 195238) (open-paren 195236 . 195237) (close-paren 195229 . 195230) (close-paren 195228 . 195229) (string 195222 . 195228) (symbol 195203 . 195221) (open-paren 195202 . 195203) (close-paren 195194 . 195195) (string 195190 . 195194) (symbol 195179 . 195189) (open-paren 195178 . 195179) (open-paren 195177 . 195178) (close-paren 195170 . 195171) (close-paren 195169 . 195170) (symbol 195150 . 195169) (open-paren 195149 . 195150) (close-paren 195141 . 195142) (symbol 195137 . 195141) (open-paren 195136 . 195137) (open-paren 195135 . 195136) (symbol 195125 . 195129) (open-paren 195124 . 195125) (close-paren 195118 . 195119) (symbol 195115 . 195118) (symbol 195110 . 195114) (open-paren 195109 . 195110) (symbol 195105 . 195108) (open-paren 195104 . 195105) (close-paren 195100 . 195101) (symbol 195089 . 195100) (open-paren 195088 . 195089) (string 194962 . 195085) (close-paren 194958 . 194959) (open-paren 194957 . 194958) (symbol 194935 . 194956) (symbol 194929 . 194934) (open-paren 194928 . 194929) (close-paren 194925 . 194926) (close-paren 194924 . 194925) (close-paren 194923 . 194924) (close-paren 194922 . 194923) (close-paren 194921 . 194922) (symbol 194906 . 194921) (open-paren 194905 . 194906) (close-paren 194895 . 194896) (symbol 194885 . 194895) (symbol 194875 . 194884) (open-paren 194874 . 194875) (symbol 194851 . 194865) (open-paren 194850 . 194851) (symbol 194833 . 194843) (symbol 194828 . 194832) (open-paren 194827 . 194828) (close-paren 194764 . 194765) (close-paren 194763 . 194764) (symbol 194760 . 194763) (symbol 194743 . 194759) (open-paren 194742 . 194743) (close-paren 194455 . 194456) (symbol 194449 . 194455) (symbol 194434 . 194448) (open-paren 194433 . 194434) (close-paren 194425 . 194426) (string 194416 . 194425) (symbol 194397 . 194415) (open-paren 194396 . 194397) (close-paren 194388 . 194389) (close-paren 194387 . 194388) (symbol 194375 . 194387) (open-paren 194374 . 194375) (symbol 194364 . 194373) (open-paren 194363 . 194364) (close-paren 194355 . 194356) (close-paren 194354 . 194355) (close-paren 194353 . 194354) (symbol 194339 . 194353) (open-paren 194338 . 194339) (symbol 194336 . 194337) (number 194335 . 194336) (open-paren 194334 . 194335) (symbol 194327 . 194333) (symbol 194322 . 194326) (open-paren 194321 . 194322) (close-paren 194313 . 194314) (symbol 194310 . 194313) (symbol 194300 . 194309) (open-paren 194299 . 194300) (symbol 194278 . 194292) (open-paren 194277 . 194278) (close-paren 193983 . 193984) (close-paren 193982 . 193983) (close-paren 193981 . 193982) (close-paren 193980 . 193981) (close-paren 193979 . 193980) (string 193976 . 193979) (symbol 193962 . 193975) (open-paren 193961 . 193962) (close-paren 193947 . 193948) (symbol 193946 . 193947) (symbol 193942 . 193945) (string 193928 . 193941) (symbol 193910 . 193927) (open-paren 193909 . 193910) (symbol 193903 . 193908) (open-paren 193902 . 193903) (close-paren 193890 . 193891) (close-paren 193889 . 193890) (symbol 193880 . 193889) (open-paren 193879 . 193880) (symbol 193869 . 193878) (open-paren 193868 . 193869) (close-paren 193856 . 193857) (symbol 193853 . 193856) (symbol 193849 . 193852) (symbol 193832 . 193848) (open-paren 193831 . 193832) (symbol 193804 . 193820) (open-paren 193803 . 193804) (symbol 193780 . 193794) (open-paren 193779 . 193780) (close-paren 193771 . 193772) (symbol 193748 . 193771) (symbol 193744 . 193747) (symbol 193740 . 193743) (open-paren 193739 . 193740) (symbol 193734 . 193738) (open-paren 193733 . 193734) (close-paren 193727 . 193728) (close-paren 193726 . 193727) (symbol 193723 . 193726) (symbol 193712 . 193722) (symbol 193700 . 193711) (open-paren 193699 . 193700) (close-paren 193691 . 193692) (close-paren 193690 . 193691) (symbol 193679 . 193690) (open-paren 193678 . 193679) (symbol 193667 . 193677) (symbol 193662 . 193666) (open-paren 193661 . 193662) (symbol 193651 . 193654) (symbol 193646 . 193650) (open-paren 193645 . 193646) (close-paren 193639 . 193640) (symbol 193629 . 193639) (symbol 193613 . 193619) (close-paren 193602 . 193603) (close-paren 193601 . 193602) (close-paren 193600 . 193601) (symbol 193599 . 193600) (symbol 193595 . 193598) (string 193583 . 193594) (symbol 193565 . 193582) (open-paren 193564 . 193565) (close-paren 193546 . 193547) (symbol 193543 . 193546) (symbol 193533 . 193542) (open-paren 193532 . 193533) (symbol 193501 . 193515) (open-paren 193500 . 193501) (symbol 193496 . 193499) (open-paren 193495 . 193496) (close-paren 193484 . 193485) (close-paren 193483 . 193484) (symbol 193471 . 193483) (number 193469 . 193470) (symbol 193465 . 193468) (open-paren 193464 . 193465) (symbol 193460 . 193463) (open-paren 193459 . 193460) (open-paren 193458 . 193459) (symbol 193453 . 193457) (open-paren 193452 . 193453) (string 193413 . 193449) (close-paren 193409 . 193410) (symbol 193406 . 193409) (symbol 193393 . 193405) (open-paren 193392 . 193393) (symbol 193375 . 193391) (symbol 193369 . 193374) (open-paren 193368 . 193369) (close-paren 193365 . 193366) (close-paren 193364 . 193365) (close-paren 193363 . 193364) (close-paren 193362 . 193363) (close-paren 193361 . 193362) (symbol 193358 . 193361) (symbol 193343 . 193357) (open-paren 193342 . 193343) (symbol 193334 . 193335) (open-paren 193333 . 193334) (close-paren 193326 . 193327) (close-paren 193325 . 193326) (symbol 193322 . 193325) (symbol 193309 . 193321) (symbol 193292 . 193308) (open-paren 193291 . 193292) (close-paren 193262 . 193263) (symbol 193250 . 193262) (number 193248 . 193249) (symbol 193244 . 193247) (open-paren 193243 . 193244) (open-paren 193242 . 193243) (close-paren 193187 . 193188) (symbol 193186 . 193187) (close-paren 193178 . 193179) (symbol 193168 . 193178) (close-paren 193143 . 193144) (close-paren 193142 . 193143) (symbol 193137 . 193142) (open-paren 193136 . 193137) (close-paren 193107 . 193108) (symbol 193095 . 193107) (number 193093 . 193094) (symbol 193089 . 193092) (open-paren 193088 . 193089) (symbol 193085 . 193087) (open-paren 193084 . 193085) (symbol 193068 . 193083) (open-paren 193067 . 193068) (symbol 193050 . 193060) (open-paren 193049 . 193050) (symbol 193039 . 193043) (open-paren 193038 . 193039) (close-paren 193032 . 193033) (close-paren 193031 . 193032) (close-paren 193030 . 193031) (close-paren 193029 . 193030) (close-paren 193028 . 193029) (close-paren 193027 . 193028) (symbol 193017 . 193027) (open-paren 193016 . 193017) (close-paren 192983 . 192984) (string 192975 . 192983) (symbol 192964 . 192974) (open-paren 192963 . 192964) (symbol 192960 . 192962) (open-paren 192959 . 192960) (symbol 192916 . 192931) (open-paren 192915 . 192916) (close-paren 192888 . 192889) (symbol 192876 . 192888) (number 192874 . 192875) (symbol 192870 . 192873) (open-paren 192869 . 192870) (symbol 192866 . 192868) (open-paren 192865 . 192866) (symbol 192854 . 192864) (open-paren 192853 . 192854) (close-paren 192842 . 192843) (close-paren 192841 . 192842) (close-paren 192840 . 192841) (close-paren 192839 . 192840) (symbol 192834 . 192839) (open-paren 192833 . 192834) (close-paren 192831 . 192832) (symbol 192822 . 192831) (open-paren 192821 . 192822) (symbol 192802 . 192820) (open-paren 192801 . 192802) (symbol 192761 . 192775) (open-paren 192760 . 192761) (symbol 192747 . 192759) (open-paren 192746 . 192747) (open-paren 192745 . 192746) (symbol 192740 . 192744) (open-paren 192739 . 192740) (string 192614 . 192736) (close-paren 192610 . 192611) (symbol 192607 . 192610) (open-paren 192606 . 192607) (symbol 192587 . 192605) (symbol 192581 . 192586) (open-paren 192580 . 192581) (close-paren 192577 . 192578) (close-paren 192576 . 192577) (close-paren 192575 . 192576) (close-paren 192574 . 192575) (symbol 192571 . 192574) (symbol 192567 . 192570) (symbol 192555 . 192566) (open-paren 192554 . 192555) (close-paren 192546 . 192547) (close-paren 192545 . 192546) (close-paren 192544 . 192545) (close-paren 192543 . 192544) (close-paren 192542 . 192543) (symbol 192536 . 192542) (string 192531 . 192535) (symbol 192524 . 192530) (open-paren 192523 . 192524) (close-paren 192505 . 192506) (close-paren 192504 . 192505) (symbol 192501 . 192504) (symbol 192472 . 192485) (open-paren 192471 . 192472) (close-paren 192449 . 192450) (symbol 192447 . 192449) (symbol 192434 . 192446) (open-paren 192433 . 192434) (close-paren 192411 . 192412) (symbol 192393 . 192396) (symbol 192388 . 192392) (open-paren 192387 . 192388) (symbol 192361 . 192366) (open-paren 192360 . 192361) (close-paren 192340 . 192341) (close-paren 192339 . 192340) (string 192331 . 192339) (symbol 192324 . 192330) (symbol 192317 . 192323) (open-paren 192316 . 192317) (symbol 192305 . 192315) (open-paren 192304 . 192305) (symbol 192301 . 192303) (open-paren 192300 . 192301) (close-paren 192284 . 192285) (symbol 192265 . 192284) (open-paren 192264 . 192265) (close-paren 192248 . 192249) (close-paren 192247 . 192248) (number 192246 . 192247) (symbol 192233 . 192245) (open-paren 192232 . 192233) (symbol 192226 . 192231) (open-paren 192225 . 192226) (symbol 192220 . 192224) (open-paren 192219 . 192220) (close-paren 192205 . 192206) (symbol 192199 . 192205) (symbol 192192 . 192198) (open-paren 192191 . 192192) (close-paren 192177 . 192178) (close-paren 192176 . 192177) (symbol 192164 . 192176) (open-paren 192163 . 192164) (symbol 192153 . 192162) (open-paren 192152 . 192153) (close-paren 192138 . 192139) (close-paren 192137 . 192138) (symbol 192134 . 192137) (symbol 192120 . 192133) (open-paren 192119 . 192120) (symbol 192115 . 192118) (open-paren 192114 . 192115) (symbol 192108 . 192113) (open-paren 192107 . 192108) (close-paren 192095 . 192096) (symbol 192092 . 192095) (symbol 192082 . 192091) (open-paren 192081 . 192082) (close-paren 192069 . 192070) (symbol 192066 . 192069) (symbol 192051 . 192065) (open-paren 192050 . 192051) (close-paren 192038 . 192039) (symbol 192035 . 192038) (symbol 192031 . 192034) (symbol 192019 . 192030) (open-paren 192018 . 192019) (symbol 192002 . 192007) (open-paren 192001 . 192002) (symbol 191978 . 191992) (open-paren 191977 . 191978) (close-paren 191958 . 191959) (close-paren 191957 . 191958) (close-paren 191956 . 191957) (number 191955 . 191956) (symbol 191943 . 191954) (symbol 191941 . 191942) (open-paren 191940 . 191941) (symbol 191928 . 191939) (open-paren 191927 . 191928) (close-paren 191916 . 191917) (close-paren 191915 . 191916) (symbol 191904 . 191915) (open-paren 191903 . 191904) (symbol 191899 . 191902) (open-paren 191898 . 191899) (close-paren 191887 . 191888) (close-paren 191886 . 191887) (close-paren 191885 . 191886) (symbol 191873 . 191885) (open-paren 191872 . 191873) (close-paren 191854 . 191855) (close-paren 191853 . 191854) (number 191852 . 191853) (symbol 191836 . 191851) (open-paren 191835 . 191836) (symbol 191833 . 191834) (number 191832 . 191833) (open-paren 191831 . 191832) (close-paren 191811 . 191812) (symbol 191810 . 191811) (close-paren 191808 . 191809) (symbol 191796 . 191808) (open-paren 191795 . 191796) (close-paren 191756 . 191757) (symbol 191750 . 191756) (string 191742 . 191749) (symbol 191735 . 191741) (open-paren 191734 . 191735) (symbol 191716 . 191733) (open-paren 191715 . 191716) (symbol 191712 . 191714) (open-paren 191711 . 191712) (symbol 191707 . 191710) (open-paren 191706 . 191707) (close-paren 191695 . 191696) (close-paren 191694 . 191695) (symbol 191689 . 191694) (symbol 191682 . 191688) (open-paren 191681 . 191682) (symbol 191674 . 191680) (open-paren 191673 . 191674) (open-paren 191672 . 191673) (symbol 191667 . 191671) (open-paren 191666 . 191667) (string 191551 . 191663) (close-paren 191547 . 191548) (symbol 191542 . 191547) (symbol 191538 . 191541) (open-paren 191537 . 191538) (symbol 191521 . 191536) (symbol 191515 . 191520) (open-paren 191514 . 191515) (close-paren 191511 . 191512) (close-paren 191510 . 191511) (close-paren 191509 . 191510) (close-paren 191508 . 191509) (close-paren 191507 . 191508) (close-paren 191506 . 191507) (string 191501 . 191506) (symbol 191494 . 191500) (open-paren 191493 . 191494) (close-paren 191483 . 191484) (symbol 191480 . 191483) (symbol 191470 . 191479) (open-paren 191469 . 191470) (close-paren 191459 . 191460) (close-paren 191458 . 191459) (close-paren 191457 . 191458) (string 191448 . 191457) (symbol 191437 . 191447) (open-paren 191436 . 191437) (close-paren 191415 . 191416) (close-paren 191414 . 191415) (number 191413 . 191414) (symbol 191400 . 191412) (open-paren 191399 . 191400) (symbol 191393 . 191398) (open-paren 191392 . 191393) (symbol 191388 . 191391) (open-paren 191387 . 191388) (symbol 191358 . 191372) (open-paren 191357 . 191358) (symbol 191352 . 191356) (open-paren 191351 . 191352) (symbol 191338 . 191344) (open-paren 191337 . 191338) (close-paren 191330 . 191331) (close-paren 191329 . 191330) (close-paren 191328 . 191329) (close-paren 191327 . 191328) (string 191323 . 191327) (symbol 191316 . 191322) (open-paren 191315 . 191316) (close-paren 191301 . 191302) (symbol 191298 . 191301) (symbol 191288 . 191297) (open-paren 191287 . 191288) (close-paren 191273 . 191274) (string 191269 . 191273) (symbol 191262 . 191268) (open-paren 191261 . 191262) (symbol 191234 . 191248) (open-paren 191233 . 191234) (close-paren 191221 . 191222) (symbol 191210 . 191221) (symbol 191199 . 191209) (symbol 191195 . 191198) (open-paren 191194 . 191195) (symbol 191191 . 191193) (open-paren 191190 . 191191) (close-paren 191182 . 191183) (string 191178 . 191182) (symbol 191171 . 191177) (open-paren 191170 . 191171) (close-paren 191162 . 191163) (symbol 191159 . 191162) (symbol 191149 . 191158) (open-paren 191148 . 191149) (symbol 191137 . 191141) (open-paren 191136 . 191137) (symbol 191126 . 191130) (open-paren 191125 . 191126) (close-paren 191119 . 191120) (string 191115 . 191119) (symbol 191108 . 191114) (open-paren 191107 . 191108) (close-paren 191101 . 191102) (close-paren 191100 . 191101) (close-paren 191099 . 191100) (close-paren 191098 . 191099) (close-paren 191097 . 191098) (close-paren 191096 . 191097) (symbol 191094 . 191096) (close-paren 191092 . 191093) (symbol 191082 . 191092) (open-paren 191081 . 191082) (symbol 191078 . 191080) (open-paren 191077 . 191078) (symbol 191073 . 191076) (open-paren 191072 . 191073) (close-paren 191052 . 191053) (string 191049 . 191052) (symbol 191029 . 191048) (open-paren 191028 . 191029) (symbol 190995 . 191009) (open-paren 190994 . 190995) (close-paren 190976 . 190977) (symbol 190972 . 190976) (open-paren 190971 . 190972) (symbol 190944 . 190954) (symbol 190940 . 190943) (open-paren 190939 . 190940) (close-paren 190589 . 190590) (symbol 190575 . 190589) (punctuation 190574 . 190575) (close-paren 190557 . 190558) (symbol 190544 . 190557) (punctuation 190543 . 190544) (close-paren 190541 . 190542) (close-paren 190540 . 190541) (symbol 190535 . 190540) (open-paren 190534 . 190535) (symbol 190532 . 190533) (number 190531 . 190532) (open-paren 190530 . 190531) (symbol 190512 . 190529) (open-paren 190511 . 190512) (symbol 190508 . 190510) (open-paren 190507 . 190508) (symbol 190493 . 190495) (open-paren 190492 . 190493) (symbol 190470 . 190481) (symbol 190465 . 190469) (open-paren 190464 . 190465) (close-paren 190315 . 190316) (close-paren 190314 . 190315) (close-paren 190313 . 190314) (close-paren 190312 . 190313) (close-paren 190311 . 190312) (symbol 190297 . 190311) (open-paren 190296 . 190297) (symbol 190292 . 190295) (symbol 190276 . 190277) (symbol 190269 . 190275) (symbol 190264 . 190268) (open-paren 190263 . 190264) (close-paren 190253 . 190254) (string 190249 . 190253) (symbol 190238 . 190248) (open-paren 190237 . 190238) (open-paren 190236 . 190237) (close-paren 190227 . 190228) (close-paren 190226 . 190227) (close-paren 190225 . 190226) (close-paren 190224 . 190225) (symbol 190210 . 190224) (open-paren 190209 . 190210) (symbol 190207 . 190208) (number 190206 . 190207) (open-paren 190205 . 190206) (symbol 190201 . 190204) (symbol 190185 . 190186) (symbol 190174 . 190184) (symbol 190158 . 190159) (symbol 190153 . 190157) (symbol 190148 . 190152) (open-paren 190147 . 190148) (close-paren 190137 . 190138) (string 190131 . 190137) (symbol 190120 . 190130) (open-paren 190119 . 190120) (open-paren 190118 . 190119) (close-paren 190109 . 190110) (close-paren 190108 . 190109) (close-paren 190107 . 190108) (symbol 190093 . 190107) (open-paren 190092 . 190093) (symbol 190088 . 190091) (symbol 190072 . 190073) (symbol 190067 . 190071) (symbol 190062 . 190066) (open-paren 190061 . 190062) (close-paren 190051 . 190052) (string 190042 . 190051) (symbol 190031 . 190041) (open-paren 190030 . 190031) (open-paren 190029 . 190030) (symbol 190017 . 190021) (open-paren 190016 . 190017) (close-paren 190008 . 190009) (symbol 189989 . 190008) (open-paren 189988 . 189989) (symbol 189967 . 189981) (open-paren 189966 . 189967) (close-paren 189960 . 189961) (symbol 189949 . 189960) (symbol 189938 . 189948) (symbol 189934 . 189937) (symbol 189927 . 189933) (symbol 189922 . 189926) (open-paren 189921 . 189922) (symbol 189917 . 189920) (open-paren 189916 . 189917) (string 189863 . 189913) (close-paren 189859 . 189860) (open-paren 189858 . 189859) (symbol 189834 . 189857) (symbol 189828 . 189833) (open-paren 189827 . 189828) (close-paren 189824 . 189825) (close-paren 189823 . 189824) (close-paren 189822 . 189823) (close-paren 189821 . 189822) (number 189820 . 189821) (symbol 189806 . 189819) (open-paren 189805 . 189806) (close-paren 189797 . 189798) (symbol 189785 . 189797) (symbol 189778 . 189784) (open-paren 189777 . 189778) (close-paren 189769 . 189770) (symbol 189765 . 189769) (open-paren 189764 . 189765) (symbol 189759 . 189763) (open-paren 189758 . 189759) (close-paren 189752 . 189753) (symbol 189740 . 189752) (string 189735 . 189739) (symbol 189728 . 189734) (open-paren 189727 . 189728) (close-paren 189721 . 189722) (symbol 189715 . 189721) (symbol 189705 . 189714) (open-paren 189704 . 189705) (close-paren 189698 . 189699) (string 189694 . 189698) (symbol 189683 . 189693) (symbol 189676 . 189682) (open-paren 189675 . 189676) (close-paren 189669 . 189670) (close-paren 189668 . 189669) (close-paren 189667 . 189668) (close-paren 189666 . 189667) (close-paren 189665 . 189666) (close-paren 189664 . 189665) (symbol 189650 . 189664) (open-paren 189649 . 189650) (close-paren 189625 . 189626) (close-paren 189624 . 189625) (symbol 189595 . 189604) (open-paren 189594 . 189595) (close-paren 189566 . 189567) (string 189556 . 189566) (symbol 189543 . 189555) (open-paren 189542 . 189543) (symbol 189539 . 189541) (open-paren 189538 . 189539) (close-paren 189514 . 189515) (symbol 189504 . 189514) (symbol 189494 . 189503) (open-paren 189493 . 189494) (symbol 189456 . 189470) (open-paren 189455 . 189456) (close-paren 189433 . 189434) (close-paren 189432 . 189433) (close-paren 189431 . 189432) (symbol 189417 . 189431) (open-paren 189416 . 189417) (close-paren 189388 . 189389) (string 189383 . 189388) (symbol 189372 . 189382) (open-paren 189371 . 189372) (symbol 189368 . 189370) (open-paren 189367 . 189368) (close-paren 189343 . 189344) (symbol 189324 . 189343) (open-paren 189323 . 189324) (symbol 189286 . 189300) (open-paren 189285 . 189286) (symbol 189262 . 189264) (open-paren 189261 . 189262) (symbol 189226 . 189241) (open-paren 189225 . 189226) (symbol 189218 . 189224) (open-paren 189217 . 189218) (close-paren 189206 . 189207) (close-paren 189205 . 189206) (symbol 189193 . 189205) (number 189191 . 189192) (symbol 189187 . 189190) (open-paren 189186 . 189187) (symbol 189175 . 189185) (open-paren 189174 . 189175) (close-paren 189163 . 189164) (close-paren 189162 . 189163) (symbol 189152 . 189162) (symbol 189145 . 189151) (open-paren 189144 . 189145) (symbol 189131 . 189143) (open-paren 189130 . 189131) (close-paren 189119 . 189120) (close-paren 189118 . 189119) (symbol 189106 . 189118) (number 189104 . 189105) (symbol 189100 . 189103) (open-paren 189099 . 189100) (symbol 189088 . 189098) (open-paren 189087 . 189088) (close-paren 189076 . 189077) (close-paren 189075 . 189076) (symbol 189061 . 189075) (open-paren 189060 . 189061) (symbol 189056 . 189059) (open-paren 189055 . 189056) (open-paren 189054 . 189055) (symbol 189049 . 189053) (open-paren 189048 . 189049) (string 188986 . 189045) (close-paren 188982 . 188983) (symbol 188970 . 188982) (open-paren 188969 . 188970) (symbol 188947 . 188968) (symbol 188941 . 188946) (open-paren 188940 . 188941) (close-paren 188937 . 188938) (close-paren 188936 . 188937) (close-paren 188935 . 188936) (close-paren 188934 . 188935) (close-paren 188933 . 188934) (close-paren 188932 . 188933) (close-paren 188931 . 188932) (symbol 188916 . 188931) (open-paren 188915 . 188916) (close-paren 188901 . 188902) (close-paren 188900 . 188901) (symbol 188897 . 188900) (symbol 188874 . 188896) (open-paren 188873 . 188874) (open-paren 188872 . 188873) (symbol 188868 . 188871) (open-paren 188867 . 188868) (symbol 188831 . 188856) (symbol 188828 . 188830) (open-paren 188827 . 188828) (close-paren 188819 . 188820) (string 188815 . 188819) (symbol 188808 . 188814) (open-paren 188807 . 188808) (close-paren 188799 . 188800) (close-paren 188798 . 188799) (close-paren 188797 . 188798) (symbol 188782 . 188797) (open-paren 188781 . 188782) (close-paren 188767 . 188768) (close-paren 188766 . 188767) (symbol 188763 . 188766) (symbol 188740 . 188762) (open-paren 188739 . 188740) (open-paren 188738 . 188739) (symbol 188734 . 188737) (open-paren 188733 . 188734) (symbol 188699 . 188722) (symbol 188696 . 188698) (open-paren 188695 . 188696) (symbol 188615 . 188616) (open-paren 188614 . 188615) (close-paren 188607 . 188608) (close-paren 188606 . 188607) (symbol 188583 . 188606) (open-paren 188582 . 188583) (close-paren 188574 . 188575) (symbol 188562 . 188574) (number 188560 . 188561) (symbol 188556 . 188559) (open-paren 188555 . 188556) (open-paren 188554 . 188555) (close-paren 188507 . 188508) (close-paren 188506 . 188507) (symbol 188494 . 188506) (symbol 188472 . 188493) (open-paren 188471 . 188472) (close-paren 188463 . 188464) (symbol 188451 . 188463) (number 188449 . 188450) (symbol 188445 . 188448) (open-paren 188444 . 188445) (open-paren 188443 . 188444) (symbol 188394 . 188398) (open-paren 188393 . 188394) (close-paren 188387 . 188388) (close-paren 188386 . 188387) (close-paren 188385 . 188386) (close-paren 188384 . 188385) (close-paren 188383 . 188384) (symbol 188378 . 188383) (open-paren 188377 . 188378) (close-paren 188375 . 188376) (symbol 188366 . 188375) (open-paren 188365 . 188366) (symbol 188346 . 188364) (open-paren 188345 . 188346) (symbol 188306 . 188320) (open-paren 188305 . 188306) (symbol 188292 . 188304) (open-paren 188291 . 188292) (open-paren 188290 . 188291) (symbol 188286 . 188289) (open-paren 188285 . 188286) (close-paren 188281 . 188282) (symbol 188270 . 188281) (open-paren 188269 . 188270) (string 188229 . 188266) (close-paren 188225 . 188226) (open-paren 188224 . 188225) (symbol 188210 . 188223) (symbol 188204 . 188209) (open-paren 188203 . 188204) (close-paren 188200 . 188201) (symbol 188186 . 188200) (punctuation 188185 . 188186) (punctuation 188184 . 188185) (symbol 188170 . 188183) (punctuation 188169 . 188170) (punctuation 188168 . 188169) (symbol 188159 . 188167) (open-paren 188158 . 188159) (close-paren 188155 . 188156) (close-paren 188154 . 188155) (close-paren 188153 . 188154) (close-paren 188152 . 188153) (symbol 188149 . 188152) (symbol 188141 . 188148) (open-paren 188140 . 188141) (symbol 188128 . 188131) (symbol 188125 . 188127) (open-paren 188124 . 188125) (close-paren 188118 . 188119) (close-paren 188117 . 188118) (close-paren 188116 . 188117) (symbol 188107 . 188116) (punctuation 188106 . 188107) (symbol 188096 . 188105) (symbol 188078 . 188095) (open-paren 188077 . 188078) (symbol 188073 . 188076) (open-paren 188072 . 188073) (open-paren 188071 . 188072) (symbol 188067 . 188070) (open-paren 188066 . 188067) (string 188032 . 188063) (close-paren 188028 . 188029) (symbol 188019 . 188028) (symbol 188009 . 188018) (open-paren 188008 . 188009) (symbol 187993 . 188007) (symbol 187987 . 187992) (open-paren 187986 . 187987) (close-paren 187983 . 187984) (close-paren 187982 . 187983) (close-paren 187981 . 187982) (close-paren 187980 . 187981) (symbol 187964 . 187980) (punctuation 187963 . 187964) (symbol 187961 . 187962) (symbol 187935 . 187960) (open-paren 187934 . 187935) (close-paren 187926 . 187927) (close-paren 187925 . 187926) (symbol 187913 . 187925) (symbol 187891 . 187912) (open-paren 187890 . 187891) (symbol 187888 . 187889) (open-paren 187887 . 187888) (symbol 187880 . 187886) (open-paren 187879 . 187880) (symbol 187845 . 187874) (symbol 187840 . 187844) (open-paren 187839 . 187840) (string 187803 . 187836) (close-paren 187799 . 187800) (open-paren 187798 . 187799) (symbol 187775 . 187797) (symbol 187769 . 187774) (open-paren 187768 . 187769) (close-paren 187765 . 187766) (close-paren 187764 . 187765) (close-paren 187763 . 187764) (close-paren 187762 . 187763) (symbol 187750 . 187762) (symbol 187728 . 187749) (open-paren 187727 . 187728) (close-paren 187716 . 187717) (close-paren 187715 . 187716) (close-paren 187714 . 187715) (close-paren 187713 . 187714) (close-paren 187712 . 187713) (close-paren 187711 . 187712) (symbol 187458 . 187460) (symbol 187454 . 187457) (open-paren 187453 . 187454) (close-paren 187430 . 187431) (open-paren 187091 . 187092) (symbol 187086 . 187090) (open-paren 187085 . 187086) (close-paren 187064 . 187065) (string 187046 . 187064) (symbol 187042 . 187045) (symbol 187034 . 187041) (open-paren 187033 . 187034) (symbol 186979 . 187013) (symbol 186975 . 186978) (open-paren 186974 . 186975) (close-paren 186958 . 186959) (close-paren 186957 . 186958) (string 186936 . 186957) (symbol 186932 . 186935) (symbol 186924 . 186931) (open-paren 186923 . 186924) (close-paren 186902 . 186903) (symbol 186872 . 186902) (symbol 186868 . 186871) (open-paren 186867 . 186868) (symbol 186863 . 186866) (open-paren 186862 . 186863) (close-paren 186846 . 186847) (close-paren 186845 . 186846) (symbol 186842 . 186845) (string 186823 . 186841) (symbol 186810 . 186822) (open-paren 186809 . 186810) (close-paren 186788 . 186789) (symbol 186755 . 186788) (symbol 186751 . 186754) (open-paren 186750 . 186751) (symbol 186746 . 186749) (open-paren 186745 . 186746) (symbol 186728 . 186730) (open-paren 186727 . 186728) (close-paren 186712 . 186713) (close-paren 186711 . 186712) (close-paren 186710 . 186711) (symbol 186709 . 186710) (symbol 186704 . 186708) (open-paren 186703 . 186704) (symbol 186699 . 186702) (open-paren 186698 . 186699) (open-paren 186697 . 186698) (symbol 186693 . 186696) (open-paren 186692 . 186693) (close-paren 186679 . 186680) (symbol 186678 . 186679) (open-paren 186677 . 186678) (symbol 186670 . 186676) (open-paren 186669 . 186670) (symbol 186646 . 186659) (open-paren 186645 . 186646) (close-paren 186635 . 186636) (symbol 186623 . 186635) (symbol 186601 . 186622) (open-paren 186600 . 186601) (symbol 186595 . 186599) (open-paren 186594 . 186595) (string 186476 . 186591) (close-paren 186472 . 186473) (open-paren 186471 . 186472) (symbol 186435 . 186470) (symbol 186429 . 186434) (open-paren 186428 . 186429) (close-paren 186425 . 186426) (close-paren 186424 . 186425) (close-paren 186423 . 186424) (close-paren 186422 . 186423) (symbol 186408 . 186422) (punctuation 186407 . 186408) (symbol 186405 . 186406) (symbol 186379 . 186404) (open-paren 186378 . 186379) (close-paren 186370 . 186371) (close-paren 186369 . 186370) (symbol 186357 . 186369) (symbol 186337 . 186356) (open-paren 186336 . 186337) (symbol 186334 . 186335) (open-paren 186333 . 186334) (symbol 186326 . 186332) (open-paren 186325 . 186326) (symbol 186294 . 186320) (symbol 186289 . 186293) (open-paren 186288 . 186289) (string 186259 . 186285) (close-paren 186255 . 186256) (open-paren 186254 . 186255) (symbol 186233 . 186253) (symbol 186227 . 186232) (open-paren 186226 . 186227) (close-paren 186223 . 186224) (close-paren 186222 . 186223) (symbol 186219 . 186222) (symbol 186190 . 186218) (symbol 186185 . 186189) (open-paren 186184 . 186185) (close-paren 186180 . 186181) (close-paren 186179 . 186180) (symbol 186178 . 186179) (symbol 186160 . 186177) (punctuation 186159 . 186160) (punctuation 186158 . 186159) (symbol 186152 . 186157) (open-paren 186151 . 186152) (close-paren 186145 . 186146) (symbol 186117 . 186145) (symbol 186115 . 186116) (open-paren 186114 . 186115) (symbol 186107 . 186113) (open-paren 186106 . 186107) (close-paren 186102 . 186103) (symbol 186099 . 186102) (symbol 186075 . 186098) (symbol 186070 . 186074) (open-paren 186069 . 186070) (close-paren 186065 . 186066) (close-paren 186064 . 186065) (close-paren 186063 . 186064) (symbol 186062 . 186063) (symbol 186056 . 186061) (open-paren 186055 . 186056) (symbol 186050 . 186054) (punctuation 186049 . 186050) (close-paren 186047 . 186048) (symbol 186046 . 186047) (symbol 186039 . 186045) (open-paren 186038 . 186039) (close-paren 186036 . 186037) (symbol 186035 . 186036) (symbol 186029 . 186034) (open-paren 186028 . 186029) (symbol 186010 . 186027) (open-paren 186009 . 186010) (close-paren 186003 . 186004) (close-paren 186002 . 186003) (symbol 185979 . 186002) (symbol 185970 . 185978) (open-paren 185969 . 185970) (symbol 185967 . 185968) (open-paren 185966 . 185967) (symbol 185959 . 185965) (open-paren 185958 . 185959) (close-paren 185836 . 185837) (close-paren 185835 . 185836) (symbol 185826 . 185835) (open-paren 185825 . 185826) (close-paren 185823 . 185824) (symbol 185814 . 185823) (open-paren 185813 . 185814) (symbol 185798 . 185812) (open-paren 185797 . 185798) (string 185675 . 185722) (close-paren 185671 . 185672) (open-paren 185670 . 185671) (symbol 185645 . 185669) (symbol 185639 . 185644) (open-paren 185638 . 185639) (close-paren 185635 . 185636) (close-paren 185634 . 185635) (close-paren 185633 . 185634) (close-paren 185632 . 185633) (close-paren 185631 . 185632) (close-paren 185630 . 185631) (symbol 185629 . 185630) (symbol 185614 . 185628) (open-paren 185613 . 185614) (close-paren 185601 . 185602) (symbol 185598 . 185601) (punctuation 185597 . 185598) (symbol 185595 . 185596) (symbol 185583 . 185594) (open-paren 185582 . 185583) (symbol 185577 . 185581) (open-paren 185576 . 185577) (close-paren 185566 . 185567) (close-paren 185565 . 185566) (symbol 185562 . 185565) (symbol 185558 . 185561) (symbol 185546 . 185557) (open-paren 185545 . 185546) (symbol 185543 . 185544) (open-paren 185542 . 185543) (symbol 185535 . 185541) (open-paren 185534 . 185535) (symbol 185513 . 185527) (open-paren 185512 . 185513) (close-paren 185506 . 185507) (close-paren 185505 . 185506) (close-paren 185504 . 185505) (symbol 185495 . 185504) (open-paren 185494 . 185495) (symbol 185490 . 185493) (open-paren 185489 . 185490) (close-paren 185479 . 185480) (close-paren 185478 . 185479) (symbol 185469 . 185478) (open-paren 185468 . 185469) (symbol 185464 . 185467) (open-paren 185463 . 185464) (open-paren 185462 . 185463) (symbol 185458 . 185461) (open-paren 185457 . 185458) (string 185397 . 185454) (close-paren 185393 . 185394) (open-paren 185392 . 185393) (symbol 185372 . 185391) (symbol 185366 . 185371) (open-paren 185365 . 185366) (close-paren 185362 . 185363) (close-paren 185361 . 185362) (close-paren 185360 . 185361) (symbol 185346 . 185360) (punctuation 185345 . 185346) (punctuation 185344 . 185345) (symbol 185330 . 185343) (punctuation 185329 . 185330) (symbol 185325 . 185328) (symbol 185321 . 185324) (symbol 185303 . 185320) (open-paren 185302 . 185303) (close-paren 185296 . 185297) (close-paren 185295 . 185296) (symbol 185292 . 185295) (symbol 185280 . 185291) (open-paren 185279 . 185280) (symbol 185269 . 185278) (punctuation 185268 . 185269) (symbol 185264 . 185267) (symbol 185260 . 185263) (symbol 185242 . 185259) (open-paren 185241 . 185242) (close-paren 185235 . 185236) (symbol 185234 . 185235) (symbol 185230 . 185233) (punctuation 185229 . 185230) (symbol 185225 . 185228) (symbol 185213 . 185224) (open-paren 185212 . 185213) (close-paren 185206 . 185207) (symbol 185202 . 185206) (symbol 185197 . 185201) (punctuation 185196 . 185197) (symbol 185192 . 185195) (symbol 185180 . 185191) (open-paren 185179 . 185180) (close-paren 185173 . 185174) (close-paren 185172 . 185173) (close-paren 185171 . 185172) (symbol 185168 . 185171) (symbol 185164 . 185167) (symbol 185151 . 185163) (open-paren 185150 . 185151) (symbol 185146 . 185149) (open-paren 185145 . 185146) (close-paren 185097 . 185098) (number 185096 . 185097) (symbol 185076 . 185095) (open-paren 185075 . 185076) (close-paren 185064 . 185065) (close-paren 185063 . 185064) (close-paren 185062 . 185063) (close-paren 185061 . 185062) (symbol 185052 . 185061) (open-paren 185051 . 185052) (symbol 185047 . 185050) (symbol 185043 . 185046) (open-paren 185042 . 185043) (close-paren 185040 . 185041) (symbol 185031 . 185040) (open-paren 185030 . 185031) (symbol 185026 . 185029) (open-paren 185025 . 185026) (symbol 185021 . 185024) (open-paren 185020 . 185021) (close-paren 185009 . 185010) (close-paren 185008 . 185009) (close-paren 185007 . 185008) (close-paren 185006 . 185007) (symbol 184997 . 185006) (open-paren 184996 . 184997) (symbol 184992 . 184995) (symbol 184988 . 184991) (open-paren 184987 . 184988) (close-paren 184985 . 184986) (symbol 184976 . 184985) (open-paren 184975 . 184976) (symbol 184971 . 184974) (open-paren 184970 . 184971) (symbol 184966 . 184969) (open-paren 184965 . 184966) (close-paren 184904 . 184905) (close-paren 184903 . 184904) (close-paren 184902 . 184903) (symbol 184901 . 184902) (symbol 184895 . 184900) (open-paren 184894 . 184895) (symbol 184890 . 184893) (symbol 184888 . 184889) (open-paren 184887 . 184888) (symbol 184883 . 184886) (open-paren 184882 . 184883) (close-paren 184871 . 184872) (close-paren 184870 . 184871) (symbol 184869 . 184870) (symbol 184862 . 184868) (open-paren 184861 . 184862) (symbol 184857 . 184860) (open-paren 184856 . 184857) (close-paren 184845 . 184846) (close-paren 184844 . 184845) (symbol 184843 . 184844) (symbol 184837 . 184842) (open-paren 184836 . 184837) (symbol 184832 . 184835) (open-paren 184831 . 184832) (open-paren 184830 . 184831) (symbol 184825 . 184829) (open-paren 184824 . 184825) (string 184734 . 184821) (close-paren 184730 . 184731) (symbol 184726 . 184730) (symbol 184724 . 184725) (open-paren 184723 . 184724) (symbol 184697 . 184722) (symbol 184688 . 184696) (open-paren 184687 . 184688) (close-paren 184684 . 184685) (close-paren 184683 . 184684) (symbol 184675 . 184683) (open-paren 184674 . 184675) (close-paren 184670 . 184671) (symbol 184657 . 184670) (open-paren 184656 . 184657) (close-paren 184652 . 184653) (symbol 184641 . 184652) (open-paren 184640 . 184641) (string 184599 . 184637) (close-paren 184595 . 184596) (open-paren 184594 . 184595) (symbol 184579 . 184593) (symbol 184573 . 184578) (open-paren 184572 . 184573) (close-paren 184569 . 184570) (close-paren 184568 . 184569) (close-paren 184567 . 184568) (close-paren 184566 . 184567) (close-paren 184565 . 184566) (symbol 184562 . 184565) (symbol 184540 . 184561) (symbol 184535 . 184539) (open-paren 184534 . 184535) (close-paren 184524 . 184525) (symbol 184503 . 184524) (symbol 184488 . 184502) (open-paren 184487 . 184488) (close-paren 184477 . 184478) (close-paren 184476 . 184477) (close-paren 184475 . 184476) (symbol 184472 . 184475) (symbol 184461 . 184471) (open-paren 184460 . 184461) (punctuation 184459 . 184460) (symbol 184455 . 184458) (symbol 184451 . 184454) (symbol 184428 . 184450) (open-paren 184427 . 184428) (symbol 184374 . 184416) (open-paren 184373 . 184374) (close-paren 184363 . 184364) (close-paren 184362 . 184363) (symbol 184359 . 184362) (symbol 184356 . 184358) (symbol 184353 . 184355) (open-paren 184352 . 184353) (close-paren 184331 . 184332) (symbol 184328 . 184331) (symbol 184325 . 184327) (symbol 184322 . 184324) (open-paren 184321 . 184322) (symbol 184299 . 184301) (symbol 184295 . 184298) (open-paren 184294 . 184295) (symbol 184287 . 184293) (open-paren 184286 . 184287) (close-paren 184234 . 184235) (close-paren 184233 . 184234) (close-paren 184232 . 184233) (symbol 184211 . 184232) (symbol 184199 . 184210) (open-paren 184198 . 184199) (symbol 184194 . 184197) (open-paren 184193 . 184194) (close-paren 184181 . 184182) (close-paren 184180 . 184181) (symbol 184159 . 184180) (symbol 184145 . 184158) (open-paren 184144 . 184145) (symbol 184140 . 184143) (open-paren 184139 . 184140) (open-paren 184138 . 184139) (symbol 184134 . 184137) (open-paren 184133 . 184134) (symbol 184107 . 184128) (symbol 184102 . 184106) (open-paren 184101 . 184102) (string 184046 . 184098) (close-paren 184042 . 184043) (symbol 184040 . 184042) (symbol 184037 . 184039) (symbol 184027 . 184036) (open-paren 184026 . 184027) (symbol 184004 . 184025) (symbol 183998 . 184003) (open-paren 183997 . 183998) (close-paren 183994 . 183995) (close-paren 183993 . 183994) (close-paren 183992 . 183993) (close-paren 183991 . 183992) (close-paren 183990 . 183991) (close-paren 183989 . 183990) (string 183984 . 183989) (close-paren 183963 . 183964) (close-paren 183962 . 183963) (symbol 183958 . 183962) (symbol 183942 . 183957) (open-paren 183941 . 183942) (symbol 183921 . 183940) (open-paren 183920 . 183921) (close-paren 183897 . 183898) (symbol 183893 . 183897) (symbol 183877 . 183892) (open-paren 183876 . 183877) (symbol 183873 . 183875) (open-paren 183872 . 183873) (close-paren 183853 . 183854) (symbol 183849 . 183853) (symbol 183829 . 183848) (open-paren 183828 . 183829) (string 183794 . 183810) (symbol 183786 . 183793) (open-paren 183785 . 183786) (close-paren 183775 . 183776) (close-paren 183774 . 183775) (symbol 183753 . 183774) (punctuation 183752 . 183753) (punctuation 183751 . 183752) (symbol 183740 . 183750) (punctuation 183739 . 183740) (symbol 183735 . 183738) (symbol 183731 . 183734) (symbol 183713 . 183730) (open-paren 183712 . 183713) (symbol 183659 . 183701) (open-paren 183658 . 183659) (close-paren 183648 . 183649) (close-paren 183647 . 183648) (symbol 183638 . 183647) (punctuation 183637 . 183638) (symbol 183632 . 183636) (punctuation 183631 . 183632) (symbol 183609 . 183630) (symbol 183597 . 183608) (open-paren 183596 . 183597) (close-paren 183584 . 183585) (close-paren 183583 . 183584) (symbol 183580 . 183583) (symbol 183576 . 183579) (symbol 183563 . 183575) (open-paren 183562 . 183563) (symbol 183540 . 183561) (symbol 183535 . 183539) (open-paren 183534 . 183535) (close-paren 183522 . 183523) (symbol 183519 . 183522) (symbol 183515 . 183518) (symbol 183493 . 183514) (symbol 183480 . 183492) (open-paren 183479 . 183480) (symbol 183445 . 183466) (symbol 183442 . 183444) (open-paren 183441 . 183442) (close-paren 183431 . 183432) (close-paren 183430 . 183431) (close-paren 183429 . 183430) (symbol 183425 . 183429) (symbol 183412 . 183424) (open-paren 183411 . 183412) (symbol 183407 . 183410) (symbol 183405 . 183406) (open-paren 183404 . 183405) (symbol 183400 . 183403) (close-paren 183384 . 183385) (symbol 183380 . 183384) (symbol 183363 . 183379) (open-paren 183362 . 183363) (symbol 183358 . 183361) (symbol 183353 . 183357) (open-paren 183352 . 183353) (close-paren 183342 . 183343) (close-paren 183341 . 183342) (symbol 183336 . 183341) (open-paren 183335 . 183336) (string 183304 . 183334) (symbol 183296 . 183303) (open-paren 183295 . 183296) (close-paren 183283 . 183284) (symbol 183279 . 183283) (symbol 183274 . 183278) (open-paren 183273 . 183274) (symbol 183270 . 183272) (open-paren 183269 . 183270) (symbol 183241 . 183262) (symbol 183236 . 183240) (open-paren 183235 . 183236) (close-paren 183229 . 183230) (symbol 183226 . 183229) (symbol 183214 . 183217) (close-paren 183204 . 183205) (close-paren 183203 . 183204) (symbol 183186 . 183203) (open-paren 183185 . 183186) (symbol 183180 . 183184) (open-paren 183179 . 183180) (open-paren 183178 . 183179) (symbol 183174 . 183177) (open-paren 183173 . 183174) (close-paren 183169 . 183170) (symbol 183158 . 183169) (open-paren 183157 . 183158) (string 183093 . 183154) (close-paren 183089 . 183090) (open-paren 183088 . 183089) (symbol 183069 . 183087) (symbol 183063 . 183068) (open-paren 183062 . 183063) (close-paren 183059 . 183060) (close-paren 183058 . 183059) (close-paren 183057 . 183058) (close-paren 183056 . 183057) (close-paren 183055 . 183056) (close-paren 183054 . 183055) (symbol 183051 . 183054) (symbol 183030 . 183050) (symbol 183025 . 183029) (open-paren 183024 . 183025) (symbol 183000 . 183013) (symbol 182993 . 182999) (open-paren 182992 . 182993) (close-paren 182982 . 182983) (symbol 182979 . 182982) (symbol 182962 . 182978) (symbol 182957 . 182961) (open-paren 182956 . 182957) (close-paren 182927 . 182928) (close-paren 182926 . 182927) (close-paren 182925 . 182926) (close-paren 182924 . 182925) (close-paren 182923 . 182924) (symbol 182919 . 182923) (string 182902 . 182918) (symbol 182894 . 182901) (open-paren 182893 . 182894) (symbol 182848 . 182872) (symbol 182845 . 182847) (open-paren 182844 . 182845) (close-paren 182826 . 182827) (close-paren 182825 . 182826) (symbol 182805 . 182825) (open-paren 182804 . 182805) (close-paren 182782 . 182783) (symbol 182781 . 182782) (symbol 182757 . 182780) (symbol 182752 . 182756) (open-paren 182751 . 182752) (symbol 182672 . 182677) (open-paren 182671 . 182672) (symbol 182639 . 182652) (symbol 182636 . 182638) (open-paren 182635 . 182636) (close-paren 182619 . 182620) (close-paren 182618 . 182619) (close-paren 182617 . 182618) (symbol 182027 . 182040) (symbol 182022 . 182026) (open-paren 182021 . 182022) (symbol 181991 . 181999) (open-paren 181990 . 181991) (symbol 181965 . 181969) (symbol 181960 . 181964) (open-paren 181959 . 181960) (close-paren 181943 . 181944) (close-paren 181942 . 181943) (string 181930 . 181942) (symbol 181922 . 181929) (open-paren 181921 . 181922) (symbol 181878 . 181902) (symbol 181875 . 181877) (open-paren 181874 . 181875) (close-paren 181858 . 181859) (symbol 181855 . 181858) (symbol 181826 . 181854) (symbol 181802 . 181805) (symbol 181778 . 181801) (symbol 181754 . 181757) (symbol 181730 . 181753) (symbol 181725 . 181729) (open-paren 181724 . 181725) (symbol 181667 . 181709) (open-paren 181666 . 181667) (close-paren 181652 . 181653) (symbol 181633 . 181652) (open-paren 181632 . 181633) (close-paren 181618 . 181619) (symbol 181613 . 181618) (symbol 181589 . 181612) (symbol 181586 . 181588) (open-paren 181585 . 181586) (symbol 181580 . 181584) (open-paren 181579 . 181580) (symbol 181554 . 181568) (open-paren 181553 . 181554) (close-paren 181545 . 181546) (symbol 181544 . 181545) (symbol 181527 . 181543) (symbol 181522 . 181526) (open-paren 181521 . 181522) (symbol 181498 . 181514) (symbol 181491 . 181497) (open-paren 181490 . 181491) (close-paren 181484 . 181485) (close-paren 181483 . 181484) (symbol 181454 . 181483) (symbol 181429 . 181453) (open-paren 181428 . 181429) (symbol 181406 . 181419) (symbol 181393 . 181397) (open-paren 181392 . 181393) (symbol 181388 . 181391) (open-paren 181387 . 181388) (string 181122 . 181384) (close-paren 181118 . 181119) (symbol 181113 . 181118) (symbol 181103 . 181112) (open-paren 181102 . 181103) (symbol 181090 . 181101) (symbol 181084 . 181089) (open-paren 181083 . 181084) (close-paren 181080 . 181081) (close-paren 181079 . 181080) (close-paren 181078 . 181079) (close-paren 181077 . 181078) (symbol 181045 . 181077) (open-paren 181044 . 181045) (close-paren 181036 . 181037) (symbol 181019 . 181036) (open-paren 181018 . 181019) (symbol 181014 . 181017) (open-paren 181013 . 181014) (close-paren 181007 . 181008) (close-paren 181006 . 181007) (symbol 180993 . 181006) (punctuation 180992 . 180993) (symbol 180973 . 180991) (symbol 180968 . 180972) (open-paren 180967 . 180968) (symbol 180948 . 180966) (symbol 180943 . 180947) (open-paren 180942 . 180943) (close-paren 180675 . 180676) (symbol 180661 . 180675) (close-paren 180646 . 180647) (symbol 180632 . 180646) (punctuation 180631 . 180632) (symbol 180624 . 180630) (open-paren 180623 . 180624) (symbol 180591 . 180609) (close-paren 180576 . 180577) (symbol 180558 . 180576) (punctuation 180557 . 180558) (symbol 180550 . 180556) (open-paren 180549 . 180550) (symbol 180545 . 180548) (open-paren 180544 . 180545) (symbol 180539 . 180543) (open-paren 180538 . 180539) (string 180257 . 180535) (close-paren 180253 . 180254) (open-paren 180252 . 180253) (symbol 180229 . 180251) (symbol 180223 . 180228) (open-paren 180222 . 180223) (close-paren 180219 . 180220) (close-paren 180218 . 180219) (symbol 180198 . 180218) (open-paren 180197 . 180198) (close-paren 180193 . 180194) (symbol 180172 . 180193) (open-paren 180171 . 180172) (close-paren 180167 . 180168) (symbol 180166 . 180167) (symbol 180142 . 180165) (symbol 180137 . 180141) (open-paren 180136 . 180137) (string 180087 . 180133) (close-paren 180083 . 180084) (symbol 180080 . 180083) (symbol 180076 . 180079) (symbol 180072 . 180075) (open-paren 180071 . 180072) (symbol 180057 . 180070) (symbol 180051 . 180056) (open-paren 180050 . 180051) (close-paren 180047 . 180048) (close-paren 180046 . 180047) (close-paren 180045 . 180046) (symbol 180034 . 180045) (punctuation 180033 . 180034) (punctuation 180032 . 180033) (symbol 180028 . 180031) (symbol 180007 . 180027) (symbol 179987 . 180006) (open-paren 179986 . 179987) (symbol 179957 . 179977) (symbol 179952 . 179956) (open-paren 179951 . 179952) (close-paren 179947 . 179948) (symbol 179944 . 179947) (symbol 179927 . 179943) (symbol 179922 . 179926) (open-paren 179921 . 179922) (close-paren 179917 . 179918) (close-paren 179916 . 179917) (symbol 179896 . 179916) (symbol 179883 . 179895) (open-paren 179882 . 179883) (symbol 179855 . 179875) (symbol 179852 . 179854) (open-paren 179851 . 179852) (close-paren 179847 . 179848) (open-paren 179846 . 179847) (symbol 179825 . 179845) (symbol 179816 . 179824) (open-paren 179815 . 179816) (close-paren 179812 . 179813) (close-paren 179811 . 179812) (close-paren 179810 . 179811) (close-paren 179809 . 179810) (close-paren 179808 . 179809) (symbol 179805 . 179808) (symbol 179795 . 179804) (open-paren 179794 . 179795) (close-paren 179784 . 179785) (symbol 179781 . 179784) (close-paren 179779 . 179780) (symbol 179765 . 179779) (open-paren 179764 . 179765) (symbol 179761 . 179763) (open-paren 179760 . 179761) (symbol 179753 . 179759) (open-paren 179752 . 179753) (close-paren 179686 . 179687) (symbol 179660 . 179686) (open-paren 179659 . 179660) (close-paren 179651 . 179652) (close-paren 179650 . 179651) (close-paren 179649 . 179650) (symbol 179635 . 179649) (open-paren 179634 . 179635) (symbol 179630 . 179633) (open-paren 179629 . 179630) (open-paren 179628 . 179629) (symbol 179624 . 179627) (open-paren 179623 . 179624) (symbol 179596 . 179618) (symbol 179591 . 179595) (open-paren 179590 . 179591) (string 179484 . 179587) (close-paren 179480 . 179481) (open-paren 179479 . 179480) (symbol 179463 . 179478) (symbol 179457 . 179462) (open-paren 179456 . 179457) (close-paren 179453 . 179454) (close-paren 179452 . 179453) (close-paren 179451 . 179452) (close-paren 179450 . 179451) (symbol 179441 . 179450) (open-paren 179440 . 179441) (close-paren 179438 . 179439) (symbol 179429 . 179438) (open-paren 179428 . 179429) (symbol 179413 . 179427) (open-paren 179412 . 179413) (symbol 179365 . 179407) (open-paren 179364 . 179365) (close-paren 179360 . 179361) (symbol 179343 . 179360) (open-paren 179342 . 179343) (close-paren 179338 . 179339) (close-paren 179337 . 179338) (symbol 179336 . 179337) (symbol 179334 . 179335) (symbol 179322 . 179333) (open-paren 179321 . 179322) (punctuation 179320 . 179321) (symbol 179290 . 179319) (open-paren 179289 . 179290) (close-paren 179285 . 179286) (symbol 179284 . 179285) (symbol 179270 . 179283) (punctuation 179269 . 179270) (punctuation 179268 . 179269) (symbol 179245 . 179267) (punctuation 179244 . 179245) (symbol 179232 . 179243) (open-paren 179231 . 179232) (close-paren 179227 . 179228) (symbol 179224 . 179227) (symbol 179211 . 179223) (symbol 179206 . 179210) (open-paren 179205 . 179206) (close-paren 179201 . 179202) (symbol 179182 . 179201) (open-paren 179181 . 179182) (close-paren 179177 . 179178) (close-paren 179176 . 179177) (symbol 179173 . 179176) (symbol 179151 . 179172) (symbol 179146 . 179150) (open-paren 179145 . 179146) (close-paren 179139 . 179140) (symbol 179118 . 179139) (symbol 179103 . 179117) (open-paren 179102 . 179103) (symbol 179076 . 179097) (symbol 179071 . 179075) (open-paren 179070 . 179071) (close-paren 179066 . 179067) (symbol 179055 . 179066) (open-paren 179054 . 179055) (close-paren 179050 . 179051) (open-paren 179049 . 179050) (symbol 179035 . 179048) (symbol 179029 . 179034) (open-paren 179028 . 179029) (close-paren 179025 . 179026) (close-paren 179024 . 179025) (close-paren 179023 . 179024) (string 178973 . 179023) (symbol 178967 . 178972) (open-paren 178966 . 178967) (close-paren 178960 . 178961) (number 178958 . 178960) (symbol 178938 . 178957) (symbol 178935 . 178937) (open-paren 178934 . 178935) (symbol 178927 . 178933) (open-paren 178926 . 178927) (close-paren 178922 . 178923) (close-paren 178921 . 178922) (string 178881 . 178921) (symbol 178875 . 178880) (open-paren 178874 . 178875) (close-paren 178866 . 178867) (symbol 178852 . 178866) (close-paren 178839 . 178840) (symbol 178825 . 178839) (punctuation 178824 . 178825) (symbol 178817 . 178823) (open-paren 178816 . 178817) (symbol 178812 . 178815) (open-paren 178811 . 178812) (symbol 178808 . 178810) (open-paren 178807 . 178808) (close-paren 178803 . 178804) (close-paren 178802 . 178803) (string 178753 . 178802) (symbol 178747 . 178752) (open-paren 178746 . 178747) (close-paren 178738 . 178739) (close-paren 178737 . 178738) (close-paren 178736 . 178737) (close-paren 178735 . 178736) (symbol 178727 . 178735) (punctuation 178726 . 178727) (symbol 178710 . 178725) (open-paren 178709 . 178710) (symbol 178688 . 178708) (open-paren 178687 . 178688) (symbol 178683 . 178686) (open-paren 178682 . 178683) (symbol 178644 . 178670) (symbol 178640 . 178643) (open-paren 178639 . 178640) (symbol 178636 . 178638) (open-paren 178635 . 178636) (string 178571 . 178632) (close-paren 178567 . 178568) (open-paren 178566 . 178567) (symbol 178544 . 178565) (symbol 178538 . 178543) (open-paren 178537 . 178538) (close-paren 178534 . 178535) (close-paren 178533 . 178534) (symbol 178520 . 178533) (punctuation 178519 . 178520) (symbol 178509 . 178518) (open-paren 178508 . 178509) (close-paren 178504 . 178505) (symbol 178493 . 178504) (open-paren 178492 . 178493) (close-paren 178488 . 178489) (symbol 178485 . 178488) (symbol 178468 . 178484) (symbol 178458 . 178459) (symbol 178434 . 178457) (symbol 178422 . 178425) (symbol 178397 . 178421) (symbol 178385 . 178388) (symbol 178359 . 178384) (symbol 178354 . 178358) (open-paren 178353 . 178354) (close-paren 178349 . 178350) (symbol 178328 . 178349) (punctuation 178327 . 178328) (punctuation 178326 . 178327) (close-paren 178324 . 178325) (symbol 178303 . 178324) (punctuation 178302 . 178303) (symbol 178282 . 178301) (open-paren 178281 . 178282) (symbol 178277 . 178280) (open-paren 178276 . 178277) (close-paren 178272 . 178273) (symbol 178271 . 178272) (close-paren 178269 . 178270) (symbol 178243 . 178269) (punctuation 178242 . 178243) (symbol 178222 . 178241) (open-paren 178221 . 178222) (symbol 178217 . 178220) (open-paren 178216 . 178217) (close-paren 178212 . 178213) (close-paren 178211 . 178212) (symbol 178210 . 178211) (symbol 178208 . 178209) (symbol 178196 . 178207) (open-paren 178195 . 178196) (punctuation 178194 . 178195) (symbol 178169 . 178193) (open-paren 178168 . 178169) (close-paren 178164 . 178165) (close-paren 178163 . 178164) (symbol 178142 . 178163) (open-paren 178141 . 178142) (symbol 178121 . 178136) (symbol 178116 . 178120) (open-paren 178115 . 178116) (close-paren 178111 . 178112) (close-paren 178110 . 178111) (symbol 178101 . 178110) (string 178095 . 178100) (symbol 178088 . 178094) (open-paren 178087 . 178088) (symbol 178066 . 178086) (open-paren 178065 . 178066) (close-paren 178061 . 178062) (symbol 178034 . 178061) (punctuation 178033 . 178034) (punctuation 178032 . 178033) (symbol 178004 . 178031) (symbol 177999 . 178003) (open-paren 177998 . 177999) (close-paren 177994 . 177995) (symbol 177993 . 177994) (symbol 177989 . 177992) (symbol 177975 . 177988) (punctuation 177974 . 177975) (punctuation 177973 . 177974) (symbol 177950 . 177972) (punctuation 177949 . 177950) (symbol 177940 . 177948) (open-paren 177939 . 177940) (close-paren 177935 . 177936) (symbol 177934 . 177935) (symbol 177930 . 177933) (symbol 177916 . 177929) (punctuation 177915 . 177916) (punctuation 177914 . 177915) (symbol 177891 . 177913) (punctuation 177890 . 177891) (symbol 177881 . 177889) (open-paren 177880 . 177881) (close-paren 177875 . 177876) (close-paren 177874 . 177875) (close-paren 177873 . 177874) (close-paren 177872 . 177873) (symbol 177843 . 177872) (close-paren 177841 . 177842) (symbol 177832 . 177841) (open-paren 177831 . 177832) (symbol 177829 . 177830) (open-paren 177828 . 177829) (symbol 177792 . 177812) (symbol 177790 . 177791) (open-paren 177789 . 177790) (symbol 177756 . 177776) (symbol 177751 . 177755) (open-paren 177750 . 177751) (close-paren 177742 . 177743) (symbol 177713 . 177742) (symbol 177707 . 177712) (open-paren 177706 . 177707) (symbol 177703 . 177705) (open-paren 177702 . 177703) (close-paren 177635 . 177636) (close-paren 177634 . 177635) (symbol 177631 . 177634) (close-paren 177629 . 177630) (symbol 177624 . 177629) (open-paren 177623 . 177624) (symbol 177616 . 177622) (open-paren 177615 . 177616) (close-paren 177606 . 177607) (symbol 177573 . 177606) (punctuation 177572 . 177573) (punctuation 177571 . 177572) (symbol 177551 . 177570) (open-paren 177550 . 177551) (symbol 177546 . 177549) (open-paren 177545 . 177546) (close-paren 177470 . 177471) (close-paren 177469 . 177470) (close-paren 177468 . 177469) (symbol 177467 . 177468) (close-paren 177465 . 177466) (symbol 177461 . 177465) (symbol 177455 . 177460) (open-paren 177454 . 177455) (symbol 177447 . 177453) (open-paren 177446 . 177447) (close-paren 177444 . 177445) (symbol 177441 . 177444) (symbol 177421 . 177440) (open-paren 177420 . 177421) (symbol 177416 . 177419) (open-paren 177415 . 177416) (close-paren 177409 . 177410) (close-paren 177408 . 177409) (symbol 177373 . 177408) (symbol 177320 . 177355) (open-paren 177319 . 177320) (punctuation 177318 . 177319) (symbol 177314 . 177317) (open-paren 177313 . 177314) (symbol 177306 . 177312) (open-paren 177305 . 177306) (close-paren 176898 . 176899) (close-paren 176897 . 176898) (symbol 176870 . 176897) (open-paren 176869 . 176870) (symbol 176851 . 176862) (symbol 176848 . 176850) (open-paren 176847 . 176848) (close-paren 176843 . 176844) (symbol 176826 . 176843) (symbol 176810 . 176825) (symbol 176781 . 176801) (symbol 176762 . 176780) (symbol 176731 . 176753) (symbol 176710 . 176730) (symbol 176679 . 176701) (symbol 176660 . 176678) (string 176648 . 176651) (symbol 176627 . 176647) (symbol 176599 . 176618) (symbol 176581 . 176598) (symbol 176547 . 176572) (symbol 176523 . 176546) (symbol 176513 . 176514) (symbol 176493 . 176512) (symbol 176488 . 176492) (open-paren 176487 . 176488) (close-paren 176417 . 176418) (symbol 176400 . 176417) (punctuation 176399 . 176400) (punctuation 176398 . 176399) (symbol 176372 . 176397) (punctuation 176371 . 176372) (symbol 176362 . 176370) (punctuation 176361 . 176362) (symbol 176357 . 176360) (open-paren 176356 . 176357) (close-paren 176306 . 176307) (symbol 176305 . 176306) (close-paren 176303 . 176304) (symbol 176277 . 176303) (punctuation 176276 . 176277) (symbol 176256 . 176275) (open-paren 176255 . 176256) (symbol 176251 . 176254) (open-paren 176250 . 176251) (close-paren 176179 . 176180) (symbol 176178 . 176179) (close-paren 176176 . 176177) (symbol 176148 . 176176) (punctuation 176147 . 176148) (symbol 176127 . 176146) (open-paren 176126 . 176127) (symbol 176122 . 176125) (open-paren 176121 . 176122) (close-paren 175998 . 175999) (symbol 175982 . 175998) (punctuation 175981 . 175982) (punctuation 175980 . 175981) (close-paren 175978 . 175979) (symbol 175957 . 175978) (punctuation 175956 . 175957) (symbol 175936 . 175955) (open-paren 175935 . 175936) (symbol 175931 . 175934) (open-paren 175930 . 175931) (close-paren 175926 . 175927) (symbol 175904 . 175926) (punctuation 175903 . 175904) (punctuation 175902 . 175903) (close-paren 175900 . 175901) (symbol 175873 . 175900) (punctuation 175872 . 175873) (symbol 175852 . 175871) (open-paren 175851 . 175852) (symbol 175847 . 175850) (open-paren 175846 . 175847) (close-paren 175842 . 175843) (symbol 175828 . 175842) (punctuation 175827 . 175828) (punctuation 175826 . 175827) (close-paren 175824 . 175825) (symbol 175805 . 175824) (punctuation 175804 . 175805) (symbol 175784 . 175803) (open-paren 175783 . 175784) (symbol 175779 . 175782) (open-paren 175778 . 175779) (close-paren 175774 . 175775) (symbol 175759 . 175774) (punctuation 175758 . 175759) (punctuation 175757 . 175758) (close-paren 175755 . 175756) (symbol 175739 . 175755) (punctuation 175738 . 175739) (symbol 175718 . 175737) (open-paren 175717 . 175718) (symbol 175713 . 175716) (open-paren 175712 . 175713) (close-paren 175708 . 175709) (symbol 175690 . 175708) (punctuation 175689 . 175690) (punctuation 175688 . 175689) (close-paren 175686 . 175687) (symbol 175663 . 175686) (punctuation 175662 . 175663) (symbol 175642 . 175661) (open-paren 175641 . 175642) (symbol 175637 . 175640) (open-paren 175636 . 175637) (close-paren 175632 . 175633) (symbol 175615 . 175632) (punctuation 175614 . 175615) (punctuation 175613 . 175614) (close-paren 175611 . 175612) (symbol 175589 . 175611) (punctuation 175588 . 175589) (symbol 175568 . 175587) (open-paren 175567 . 175568) (symbol 175563 . 175566) (open-paren 175562 . 175563) (close-paren 175558 . 175559) (symbol 175543 . 175558) (punctuation 175542 . 175543) (punctuation 175541 . 175542) (close-paren 175539 . 175540) (symbol 175519 . 175539) (punctuation 175518 . 175519) (symbol 175498 . 175517) (open-paren 175497 . 175498) (symbol 175493 . 175496) (open-paren 175492 . 175493) (close-paren 175488 . 175489) (close-paren 175487 . 175488) (number 175483 . 175487) (symbol 175463 . 175482) (symbol 175459 . 175462) (open-paren 175458 . 175459) (close-paren 175449 . 175450) (symbol 175430 . 175449) (punctuation 175429 . 175430) (symbol 175409 . 175428) (open-paren 175408 . 175409) (symbol 175404 . 175407) (open-paren 175403 . 175404) (close-paren 175399 . 175400) (symbol 175378 . 175399) (symbol 175359 . 175377) (symbol 175354 . 175358) (open-paren 175353 . 175354) (close-paren 175349 . 175350) (string 175347 . 175349) (symbol 175335 . 175346) (string 175279 . 175283) (symbol 175265 . 175278) (string 175240 . 175256) (symbol 175230 . 175239) (symbol 175213 . 175221) (punctuation 175212 . 175213) (symbol 175201 . 175211) (symbol 175196 . 175200) (open-paren 175195 . 175196) (close-paren 175191 . 175192) (symbol 175179 . 175191) (symbol 175165 . 175178) (open-paren 175164 . 175165) (close-paren 175160 . 175161) (symbol 175139 . 175160) (symbol 175122 . 175138) (open-paren 175121 . 175122) (close-paren 175117 . 175118) (symbol 175093 . 175117) (open-paren 175092 . 175093) (close-paren 175088 . 175089) (symbol 175067 . 175088) (open-paren 175066 . 175067) (close-paren 175062 . 175063) (symbol 175051 . 175062) (open-paren 175050 . 175051) (string 175006 . 175047) (close-paren 175002 . 175003) (open-paren 175001 . 175002) (symbol 174992 . 175000) (symbol 174986 . 174991) (open-paren 174985 . 174986) (close-paren 174870 . 174871) (symbol 174863 . 174870) (punctuation 174862 . 174863) (symbol 174854 . 174861) (open-paren 174853 . 174854) (close-paren 174851 . 174852) (symbol 174846 . 174851) (punctuation 174845 . 174846) (symbol 174837 . 174844) (open-paren 174836 . 174837) (close-paren 174833 . 174834) (close-paren 174832 . 174833) (symbol 174830 . 174832) (punctuation 174829 . 174830) (symbol 174821 . 174828) (open-paren 174820 . 174821) (symbol 174800 . 174817) (open-paren 174799 . 174800) (close-paren 174767 . 174768) (symbol 174757 . 174767) (punctuation 174756 . 174757) (symbol 174748 . 174755) (open-paren 174747 . 174748) (close-paren 174719 . 174720) (close-paren 174718 . 174719) (close-paren 174717 . 174718) (symbol 174714 . 174717) (symbol 174710 . 174713) (symbol 174704 . 174709) (symbol 174690 . 174703) (open-paren 174689 . 174690) (close-paren 174683 . 174684) (close-paren 174682 . 174683) (symbol 174679 . 174682) (symbol 174656 . 174678) (open-paren 174655 . 174656) (close-paren 174645 . 174646) (symbol 174642 . 174645) (symbol 174619 . 174641) (open-paren 174618 . 174619) (open-paren 174617 . 174618) (symbol 174613 . 174616) (open-paren 174612 . 174613) (string 174557 . 174609) (close-paren 174553 . 174554) (symbol 174550 . 174553) (symbol 174544 . 174549) (open-paren 174543 . 174544) (symbol 174525 . 174542) (symbol 174519 . 174524) (open-paren 174518 . 174519) (close-paren 174515 . 174516) (close-paren 174514 . 174515) (close-paren 174513 . 174514) (close-paren 174512 . 174513) (close-paren 174511 . 174512) (close-paren 174510 . 174511) (close-paren 174509 . 174510) (symbol 174503 . 174509) (symbol 174490 . 174502) (open-paren 174489 . 174490) (close-paren 174476 . 174477) (close-paren 174475 . 174476) (symbol 174469 . 174475) (symbol 174463 . 174468) (open-paren 174462 . 174463) (symbol 174456 . 174461) (symbol 174452 . 174455) (open-paren 174451 . 174452) (symbol 174446 . 174450) (open-paren 174445 . 174446) (close-paren 174434 . 174435) (close-paren 174433 . 174434) (close-paren 174432 . 174433) (symbol 174431 . 174432) (symbol 174425 . 174430) (symbol 174420 . 174424) (open-paren 174419 . 174420) (close-paren 174404 . 174405) (symbol 174394 . 174404) (symbol 174379 . 174393) (open-paren 174378 . 174379) (close-paren 174363 . 174364) (symbol 174353 . 174363) (symbol 174338 . 174352) (symbol 174335 . 174337) (open-paren 174334 . 174335) (open-paren 174333 . 174334) (close-paren 174263 . 174264) (close-paren 174262 . 174263) (symbol 174261 . 174262) (symbol 174255 . 174260) (symbol 174250 . 174254) (open-paren 174249 . 174250) (close-paren 174234 . 174235) (symbol 174222 . 174234) (symbol 174211 . 174221) (symbol 174193 . 174210) (open-paren 174192 . 174193) (close-paren 174177 . 174178) (close-paren 174176 . 174177) (symbol 174137 . 174140) (open-paren 174136 . 174137) (close-paren 174116 . 174117) (symbol 174085 . 174088) (open-paren 174084 . 174085) (symbol 174043 . 174065) (symbol 174039 . 174042) (open-paren 174038 . 174039) (open-paren 174037 . 174038) (symbol 173887 . 173891) (open-paren 173886 . 173887) (symbol 173870 . 173874) (open-paren 173869 . 173870) (close-paren 173797 . 173798) (close-paren 173796 . 173797) (symbol 173784 . 173796) (symbol 173762 . 173783) (open-paren 173761 . 173762) (symbol 173750 . 173760) (symbol 173745 . 173749) (open-paren 173744 . 173745) (close-paren 173735 . 173736) (symbol 173723 . 173735) (symbol 173704 . 173722) (open-paren 173703 . 173704) (close-paren 173692 . 173693) (symbol 173680 . 173692) (number 173678 . 173679) (symbol 173674 . 173677) (open-paren 173673 . 173674) (symbol 173670 . 173672) (open-paren 173669 . 173670) (symbol 173629 . 173663) (open-paren 173628 . 173629) (close-paren 173622 . 173623) (close-paren 173621 . 173622) (close-paren 173620 . 173621) (close-paren 173619 . 173620) (symbol 173614 . 173619) (open-paren 173613 . 173614) (close-paren 173580 . 173581) (close-paren 173579 . 173580) (symbol 173565 . 173579) (open-paren 173564 . 173565) (symbol 173549 . 173563) (symbol 173544 . 173548) (open-paren 173543 . 173544) (close-paren 173510 . 173511) (symbol 173491 . 173510) (open-paren 173490 . 173491) (symbol 173444 . 173458) (open-paren 173443 . 173444) (close-paren 173441 . 173442) (symbol 173436 . 173441) (open-paren 173435 . 173436) (symbol 173433 . 173434) (open-paren 173432 . 173433) (symbol 173425 . 173431) (close-paren 173413 . 173414) (close-paren 173412 . 173413) (close-paren 173411 . 173412) (symbol 173399 . 173411) (open-paren 173398 . 173399) (close-paren 173350 . 173351) (symbol 173341 . 173350) (open-paren 173340 . 173341) (symbol 173321 . 173339) (open-paren 173320 . 173321) (symbol 173279 . 173293) (open-paren 173278 . 173279) (symbol 173265 . 173277) (symbol 173260 . 173264) (open-paren 173259 . 173260) (close-paren 173253 . 173254) (close-paren 173252 . 173253) (symbol 173251 . 173252) (symbol 173224 . 173250) (open-paren 173223 . 173224) (symbol 173071 . 173076) (symbol 173052 . 173062) (symbol 173037 . 173043) (symbol 173014 . 173028) (symbol 172993 . 173005) (open-paren 172992 . 172993) (symbol 172988 . 172991) (open-paren 172987 . 172988) (close-paren 172983 . 172984) (symbol 172972 . 172983) (open-paren 172971 . 172972) (string 172916 . 172968) (close-paren 172912 . 172913) (open-paren 172911 . 172912) (symbol 172895 . 172910) (symbol 172889 . 172894) (open-paren 172888 . 172889) (close-paren 172885 . 172886) (close-paren 172884 . 172885) (close-paren 172883 . 172884) (close-paren 172882 . 172883) (close-paren 172881 . 172882) (close-paren 172880 . 172881) (string 172871 . 172880) (symbol 172860 . 172870) (open-paren 172859 . 172860) (close-paren 172844 . 172845) (close-paren 172843 . 172844) (number 172842 . 172843) (symbol 172829 . 172841) (open-paren 172828 . 172829) (close-paren 172811 . 172812) (symbol 172795 . 172811) (open-paren 172794 . 172795) (close-paren 172777 . 172778) (string 172769 . 172777) (symbol 172758 . 172768) (open-paren 172757 . 172758) (symbol 172752 . 172756) (open-paren 172751 . 172752) (close-paren 172736 . 172737) (number 172735 . 172736) (symbol 172722 . 172734) (open-paren 172721 . 172722) (close-paren 172706 . 172707) (symbol 172704 . 172706) (symbol 172691 . 172703) (open-paren 172690 . 172691) (symbol 172671 . 172676) (open-paren 172670 . 172671) (close-paren 172657 . 172658) (close-paren 172656 . 172657) (string 172647 . 172656) (symbol 172636 . 172646) (open-paren 172635 . 172636) (close-paren 172620 . 172621) (number 172619 . 172620) (symbol 172606 . 172618) (open-paren 172605 . 172606) (symbol 172586 . 172591) (open-paren 172585 . 172586) (symbol 172581 . 172584) (open-paren 172580 . 172581) (symbol 172558 . 172573) (open-paren 172557 . 172558) (symbol 172538 . 172552) (open-paren 172537 . 172538) (string 172433 . 172534) (close-paren 172429 . 172430) (open-paren 172428 . 172429) (symbol 172394 . 172427) (symbol 172385 . 172393) (open-paren 172384 . 172385) (close-paren 172381 . 172382) (close-paren 172380 . 172381) (close-paren 172379 . 172380) (close-paren 172378 . 172379) (symbol 172366 . 172378) (symbol 172338 . 172365) (symbol 172333 . 172337) (open-paren 172332 . 172333) (close-paren 172266 . 172267) (close-paren 172265 . 172266) (symbol 172245 . 172265) (symbol 172228 . 172244) (symbol 172223 . 172227) (open-paren 172222 . 172223) (symbol 172183 . 172211) (symbol 172180 . 172182) (open-paren 172179 . 172180) (close-paren 172153 . 172154) (close-paren 172152 . 172153) (close-paren 172151 . 172152) (close-paren 172150 . 172151) (close-paren 172149 . 172150) (symbol 172140 . 172149) (symbol 172127 . 172139) (symbol 172123 . 172126) (open-paren 172122 . 172123) (symbol 172107 . 172121) (open-paren 172106 . 172107) (close-paren 172086 . 172087) (close-paren 172085 . 172086) (symbol 172073 . 172085) (symbol 172068 . 172072) (open-paren 172067 . 172068) (symbol 172060 . 172066) (symbol 172057 . 172059) (open-paren 172056 . 172057) (symbol 172049 . 172055) (open-paren 172048 . 172049) (symbol 172029 . 172031) (symbol 172021 . 172028) (close-paren 172003 . 172004) (close-paren 172002 . 172003) (symbol 171990 . 172002) (symbol 171980 . 171989) (symbol 171975 . 171979) (symbol 171967 . 171974) (open-paren 171966 . 171967) (symbol 171959 . 171965) (symbol 171954 . 171958) (open-paren 171953 . 171954) (symbol 171934 . 171936) (close-paren 171916 . 171917) (symbol 171910 . 171916) (symbol 171905 . 171909) (open-paren 171904 . 171905) (symbol 171898 . 171903) (symbol 171866 . 171881) (symbol 171863 . 171865) (symbol 171858 . 171862) (symbol 171854 . 171857) (symbol 171834 . 171837) (symbol 171832 . 171833) (symbol 171825 . 171831) (symbol 171820 . 171824) (symbol 171815 . 171819) (open-paren 171814 . 171815) (close-paren 171736 . 171737) (close-paren 171735 . 171736) (close-paren 171734 . 171735) (close-paren 171733 . 171734) (symbol 171724 . 171733) (close-paren 171722 . 171723) (symbol 171719 . 171722) (symbol 171712 . 171718) (open-paren 171711 . 171712) (symbol 171698 . 171710) (open-paren 171697 . 171698) (symbol 171684 . 171696) (symbol 171679 . 171683) (open-paren 171678 . 171679) (symbol 171664 . 171665) (open-paren 171663 . 171664) (close-paren 171577 . 171578) (close-paren 171576 . 171577) (number 171575 . 171576) (symbol 171562 . 171574) (symbol 171557 . 171561) (open-paren 171556 . 171557) (close-paren 171542 . 171543) (close-paren 171541 . 171542) (symbol 171538 . 171541) (symbol 171534 . 171537) (open-paren 171533 . 171534) (symbol 171528 . 171532) (open-paren 171527 . 171528) (open-paren 171526 . 171527) (close-paren 171447 . 171448) (close-paren 171446 . 171447) (number 171445 . 171446) (symbol 171432 . 171444) (symbol 171427 . 171431) (open-paren 171426 . 171427) (close-paren 171412 . 171413) (symbol 171409 . 171412) (symbol 171405 . 171408) (open-paren 171404 . 171405) (open-paren 171403 . 171404) (close-paren 171317 . 171318) (close-paren 171316 . 171317) (number 171315 . 171316) (symbol 171302 . 171314) (symbol 171297 . 171301) (open-paren 171296 . 171297) (close-paren 171282 . 171283) (close-paren 171281 . 171282) (symbol 171272 . 171281) (symbol 171268 . 171271) (open-paren 171267 . 171268) (symbol 171262 . 171266) (open-paren 171261 . 171262) (open-paren 171260 . 171261) (close-paren 171187 . 171188) (close-paren 171186 . 171187) (symbol 171183 . 171186) (symbol 171170 . 171182) (symbol 171165 . 171169) (open-paren 171164 . 171165) (close-paren 171124 . 171125) (close-paren 171123 . 171124) (close-paren 171122 . 171123) (symbol 171110 . 171122) (symbol 171082 . 171109) (symbol 171079 . 171081) (open-paren 171078 . 171079) (symbol 171074 . 171077) (open-paren 171073 . 171074) (symbol 170994 . 170997) (symbol 170944 . 170976) (symbol 170940 . 170943) (open-paren 170939 . 170940) (open-paren 170938 . 170939) (symbol 170777 . 170781) (open-paren 170776 . 170777) (close-paren 170764 . 170765) (close-paren 170763 . 170764) (symbol 170754 . 170763) (symbol 170743 . 170753) (symbol 170736 . 170742) (open-paren 170735 . 170736) (symbol 170731 . 170734) (symbol 170726 . 170730) (open-paren 170725 . 170726) (close-paren 170635 . 170636) (close-paren 170634 . 170635) (close-paren 170633 . 170634) (close-paren 170632 . 170633) (symbol 170623 . 170632) (symbol 170610 . 170622) (symbol 170603 . 170609) (open-paren 170602 . 170603) (symbol 170563 . 170575) (symbol 170558 . 170562) (open-paren 170557 . 170558) (symbol 170527 . 170536) (symbol 170522 . 170526) (open-paren 170521 . 170522) (close-paren 170505 . 170506) (close-paren 170504 . 170505) (symbol 170492 . 170504) (symbol 170468 . 170491) (open-paren 170467 . 170468) (close-paren 170447 . 170448) (symbol 170424 . 170447) (open-paren 170423 . 170424) (symbol 170420 . 170422) (open-paren 170419 . 170420) (symbol 170416 . 170418) (open-paren 170415 . 170416) (close-paren 170322 . 170323) (close-paren 170321 . 170322) (close-paren 170320 . 170321) (close-paren 170319 . 170320) (symbol 170318 . 170319) (punctuation 170317 . 170318) (close-paren 170315 . 170316) (symbol 170306 . 170315) (symbol 170294 . 170305) (symbol 170287 . 170293) (open-paren 170286 . 170287) (symbol 170281 . 170285) (open-paren 170280 . 170281) (symbol 170242 . 170253) (symbol 170237 . 170241) (open-paren 170236 . 170237) (symbol 170206 . 170215) (symbol 170201 . 170205) (open-paren 170200 . 170201) (symbol 170174 . 170185) (symbol 170171 . 170173) (open-paren 170170 . 170171) (close-paren 170078 . 170079) (close-paren 170077 . 170078) (close-paren 170076 . 170077) (symbol 170067 . 170076) (symbol 170056 . 170066) (symbol 170049 . 170055) (open-paren 170048 . 170049) (symbol 170037 . 170047) (symbol 170032 . 170036) (open-paren 170031 . 170032) (symbol 170021 . 170030) (symbol 170016 . 170020) (open-paren 170015 . 170016) (close-paren 170003 . 170004) (close-paren 170002 . 170003) (close-paren 170001 . 170002) (symbol 170000 . 170001) (punctuation 169999 . 170000) (symbol 169989 . 169998) (symbol 169984 . 169988) (open-paren 169983 . 169984) (symbol 169974 . 169982) (open-paren 169973 . 169974) (symbol 169963 . 169972) (symbol 169958 . 169962) (open-paren 169957 . 169958) (close-paren 169875 . 169876) (close-paren 169874 . 169875) (symbol 169865 . 169874) (symbol 169861 . 169864) (symbol 169856 . 169860) (open-paren 169855 . 169856) (close-paren 169841 . 169842) (symbol 169832 . 169841) (symbol 169828 . 169831) (symbol 169821 . 169827) (open-paren 169820 . 169821) (symbol 169813 . 169819) (open-paren 169812 . 169813) (close-paren 169800 . 169801) (close-paren 169799 . 169800) (close-paren 169798 . 169799) (close-paren 169797 . 169798) (symbol 169783 . 169797) (open-paren 169782 . 169783) (symbol 169778 . 169781) (symbol 169773 . 169777) (open-paren 169772 . 169773) (close-paren 169748 . 169749) (close-paren 169747 . 169748) (close-paren 169746 . 169747) (symbol 169740 . 169746) (symbol 169572 . 169574) (open-paren 169571 . 169572) (close-paren 169535 . 169536) (symbol 169512 . 169517) (open-paren 169511 . 169512) (symbol 169507 . 169510) (open-paren 169506 . 169507) (symbol 169500 . 169505) (open-paren 169499 . 169500) (close-paren 169475 . 169476) (close-paren 169474 . 169475) (symbol 169460 . 169474) (open-paren 169459 . 169460) (symbol 169452 . 169458) (symbol 169447 . 169451) (open-paren 169446 . 169447) (close-paren 169422 . 169423) (symbol 169403 . 169422) (open-paren 169402 . 169403) (close-paren 169378 . 169379) (symbol 169362 . 169378) (open-paren 169361 . 169362) (symbol 169324 . 169338) (open-paren 169323 . 169324) (symbol 169319 . 169322) (symbol 169314 . 169318) (open-paren 169313 . 169314) (close-paren 169164 . 169165) (close-paren 169163 . 169164) (close-paren 169162 . 169163) (symbol 169153 . 169162) (symbol 169149 . 169152) (symbol 169144 . 169148) (open-paren 169143 . 169144) (close-paren 169127 . 169128) (symbol 169118 . 169127) (symbol 169114 . 169117) (symbol 169107 . 169113) (open-paren 169106 . 169107) (symbol 169099 . 169105) (open-paren 169098 . 169099) (close-paren 169084 . 169085) (close-paren 169083 . 169084) (symbol 169080 . 169083) (symbol 169068 . 169079) (symbol 169063 . 169067) (open-paren 169062 . 169063) (close-paren 169044 . 169045) (close-paren 169043 . 169044) (close-paren 169042 . 169043) (symbol 169025 . 169042) (open-paren 169024 . 169025) (symbol 169020 . 169023) (open-paren 169019 . 169020) (close-paren 168996 . 168997) (close-paren 168995 . 168996) (symbol 168983 . 168995) (symbol 168960 . 168982) (open-paren 168959 . 168960) (symbol 168921 . 168933) (symbol 168918 . 168920) (open-paren 168917 . 168918) (symbol 168913 . 168916) (open-paren 168912 . 168913) (symbol 168909 . 168911) (open-paren 168908 . 168909) (symbol 168892 . 168895) (symbol 168887 . 168891) (open-paren 168886 . 168887) (close-paren 168874 . 168875) (close-paren 168873 . 168874) (close-paren 168872 . 168873) (close-paren 168871 . 168872) (close-paren 168870 . 168871) (symbol 168845 . 168857) (symbol 168840 . 168844) (open-paren 168839 . 168840) (close-paren 168809 . 168810) (symbol 168637 . 168651) (open-paren 168636 . 168637) (symbol 168633 . 168635) (open-paren 168632 . 168633) (close-paren 168537 . 168538) (symbol 168523 . 168537) (open-paren 168522 . 168523) (symbol 168490 . 168495) (open-paren 168489 . 168490) (close-paren 168465 . 168466) (symbol 168446 . 168465) (open-paren 168445 . 168446) (close-paren 168421 . 168422) (symbol 168405 . 168421) (open-paren 168404 . 168405) (close-paren 168380 . 168381) (close-paren 168379 . 168380) (symbol 168367 . 168379) (open-paren 168366 . 168367) (symbol 168356 . 168365) (open-paren 168355 . 168356) (symbol 168318 . 168332) (open-paren 168317 . 168318) (symbol 168313 . 168316) (symbol 168308 . 168312) (open-paren 168307 . 168308) (close-paren 167999 . 168000) (close-paren 167998 . 167999) (close-paren 167997 . 167998) (symbol 167988 . 167997) (symbol 167984 . 167987) (symbol 167979 . 167983) (open-paren 167978 . 167979) (close-paren 167962 . 167963) (symbol 167953 . 167962) (symbol 167949 . 167952) (symbol 167942 . 167948) (open-paren 167941 . 167942) (symbol 167934 . 167940) (open-paren 167933 . 167934) (close-paren 167919 . 167920) (symbol 167903 . 167919) (symbol 167899 . 167902) (symbol 167894 . 167898) (open-paren 167893 . 167894) (symbol 167877 . 167880) (symbol 167872 . 167876) (open-paren 167871 . 167872) (close-paren 167859 . 167860) (close-paren 167858 . 167859) (close-paren 167857 . 167858) (close-paren 167856 . 167857) (close-paren 167855 . 167856) (symbol 167841 . 167855) (open-paren 167840 . 167841) (close-paren 167812 . 167813) (string 167803 . 167812) (symbol 167784 . 167802) (open-paren 167783 . 167784) (close-paren 167755 . 167756) (symbol 167732 . 167741) (open-paren 167731 . 167732) (close-paren 167703 . 167704) (symbol 167702 . 167703) (string 167618 . 167637) (symbol 167600 . 167617) (open-paren 167599 . 167600) (symbol 167594 . 167598) (open-paren 167593 . 167594) (close-paren 167567 . 167568) (close-paren 167566 . 167567) (symbol 167554 . 167566) (open-paren 167553 . 167554) (symbol 167543 . 167552) (open-paren 167542 . 167543) (close-paren 167516 . 167517) (symbol 167514 . 167516) (symbol 167501 . 167513) (open-paren 167500 . 167501) (symbol 167460 . 167475) (open-paren 167459 . 167460) (symbol 167422 . 167436) (open-paren 167421 . 167422) (symbol 167417 . 167420) (symbol 167412 . 167416) (open-paren 167411 . 167412) (close-paren 167212 . 167213) (symbol 167203 . 167212) (close-paren 167185 . 167186) (close-paren 167184 . 167185) (symbol 167168 . 167184) (close-paren 167141 . 167142) (close-paren 167140 . 167141) (symbol 167110 . 167123) (symbol 167105 . 167109) (open-paren 167104 . 167105) (close-paren 167075 . 167076) (symbol 167056 . 167075) (open-paren 167055 . 167056) (close-paren 167026 . 167027) (symbol 167010 . 167026) (open-paren 167009 . 167010) (close-paren 166980 . 166981) (symbol 166961 . 166980) (open-paren 166960 . 166961) (symbol 166918 . 166932) (open-paren 166917 . 166918) (symbol 166915 . 166916) (open-paren 166914 . 166915) (symbol 166879 . 166891) (symbol 166874 . 166878) (open-paren 166873 . 166874) (symbol 166868 . 166872) (open-paren 166867 . 166868) (symbol 166773 . 166778) (open-paren 166772 . 166773) (symbol 166749 . 166763) (open-paren 166748 . 166749) (close-paren 166742 . 166743) (close-paren 166741 . 166742) (symbol 166740 . 166741) (symbol 166723 . 166739) (symbol 166718 . 166722) (open-paren 166717 . 166718) (symbol 166680 . 166708) (symbol 166677 . 166679) (open-paren 166676 . 166677) (close-paren 166604 . 166605) (symbol 166592 . 166604) (symbol 166571 . 166583) (symbol 166549 . 166562) (symbol 166529 . 166540) (symbol 166508 . 166520) (symbol 166493 . 166499) (symbol 166481 . 166484) (symbol 166463 . 166472) (close-paren 166453 . 166454) (close-paren 166452 . 166453) (close-paren 166451 . 166452) (close-paren 166450 . 166451) (close-paren 166449 . 166450) (symbol 166444 . 166449) (open-paren 166443 . 166444) (close-paren 166441 . 166442) (symbol 166432 . 166441) (open-paren 166431 . 166432) (symbol 166419 . 166430) (open-paren 166418 . 166419) (symbol 166416 . 166417) (number 166415 . 166416) (open-paren 166414 . 166415) (close-paren 166373 . 166374) (number 166372 . 166373) (symbol 166359 . 166371) (open-paren 166358 . 166359) (symbol 166319 . 166333) (open-paren 166318 . 166319) (symbol 166305 . 166317) (open-paren 166304 . 166305) (close-paren 166225 . 166226) (symbol 166209 . 166225) (symbol 166188 . 166208) (open-paren 166187 . 166188) (close-paren 166177 . 166178) (close-paren 166176 . 166177) (symbol 166158 . 166176) (open-paren 166157 . 166158) (symbol 166146 . 166156) (open-paren 166145 . 166146) (open-paren 166144 . 166145) (symbol 166140 . 166143) (open-paren 166139 . 166140) (string 165841 . 166136) (close-paren 165837 . 165838) (symbol 165825 . 165837) (symbol 165814 . 165824) (open-paren 165813 . 165814) (symbol 165795 . 165812) (symbol 165789 . 165794) (open-paren 165788 . 165789) (close-paren 165785 . 165786) (close-paren 165784 . 165785) (close-paren 165783 . 165784) (symbol 165778 . 165783) (open-paren 165777 . 165778) (close-paren 165771 . 165772) (string 165766 . 165771) (symbol 165747 . 165765) (open-paren 165746 . 165747) (close-paren 165740 . 165741) (symbol 165723 . 165740) (open-paren 165722 . 165723) (symbol 165703 . 165717) (open-paren 165702 . 165703) (string 165590 . 165699) (close-paren 165586 . 165587) (open-paren 165585 . 165586) (symbol 165570 . 165584) (symbol 165561 . 165569) (open-paren 165560 . 165561) (close-paren 165557 . 165558) (close-paren 165556 . 165557) (close-paren 165555 . 165556) (close-paren 165554 . 165555) (string 165541 . 165554) (symbol 165530 . 165540) (open-paren 165529 . 165530) (symbol 165507 . 165522) (open-paren 165506 . 165507) (close-paren 165500 . 165501) (string 165495 . 165500) (symbol 165476 . 165494) (open-paren 165475 . 165476) (close-paren 165469 . 165470) (close-paren 165468 . 165469) (symbol 165456 . 165468) (open-paren 165455 . 165456) (symbol 165445 . 165454) (open-paren 165444 . 165445) (close-paren 165438 . 165439) (symbol 165422 . 165438) (open-paren 165421 . 165422) (close-paren 165415 . 165416) (symbol 165396 . 165415) (open-paren 165395 . 165396) (symbol 165376 . 165390) (open-paren 165375 . 165376) (close-paren 165371 . 165372) (open-paren 165370 . 165371) (symbol 165346 . 165369) (symbol 165337 . 165345) (open-paren 165336 . 165337) (close-paren 165333 . 165334) (close-paren 165332 . 165333) (close-paren 165331 . 165332) (close-paren 165330 . 165331) (close-paren 165329 . 165330) (open-paren 165328 . 165329) (charquote 165327 . 165328) (symbol 165326 . 165327) (close-paren 165324 . 165325) (symbol 165313 . 165324) (open-paren 165312 . 165313) (symbol 165309 . 165311) (open-paren 165308 . 165309) (close-paren 165295 . 165296) (string 165290 . 165295) (symbol 165270 . 165289) (open-paren 165269 . 165270) (close-paren 165256 . 165257) (symbol 165254 . 165256) (symbol 165241 . 165253) (open-paren 165240 . 165241) (symbol 165223 . 165228) (open-paren 165222 . 165223) (close-paren 165211 . 165212) (symbol 165209 . 165211) (close-paren 165207 . 165208) (symbol 165196 . 165207) (open-paren 165195 . 165196) (symbol 165192 . 165194) (open-paren 165191 . 165192) (close-paren 165180 . 165181) (close-paren 165179 . 165180) (symbol 165167 . 165179) (number 165165 . 165166) (symbol 165161 . 165164) (open-paren 165160 . 165161) (close-paren 165158 . 165159) (close-paren 165157 . 165158) (symbol 165152 . 165157) (open-paren 165151 . 165152) (symbol 165149 . 165150) (number 165148 . 165149) (open-paren 165147 . 165148) (symbol 165144 . 165146) (open-paren 165143 . 165144) (symbol 165139 . 165142) (open-paren 165138 . 165139) (close-paren 165132 . 165133) (symbol 165116 . 165132) (open-paren 165115 . 165116) (close-paren 165109 . 165110) (symbol 165090 . 165109) (open-paren 165089 . 165090) (symbol 165070 . 165084) (open-paren 165069 . 165070) (close-paren 165065 . 165066) (symbol 165053 . 165065) (open-paren 165052 . 165053) (symbol 165028 . 165051) (symbol 165019 . 165027) (open-paren 165018 . 165019) (close-paren 164790 . 164791) (close-paren 164789 . 164790) (close-paren 164788 . 164789) (close-paren 164787 . 164788) (close-paren 164786 . 164787) (symbol 164757 . 164786) (open-paren 164756 . 164757) (symbol 164734 . 164748) (open-paren 164733 . 164734) (close-paren 164726 . 164727) (close-paren 164725 . 164726) (close-paren 164724 . 164725) (symbol 164695 . 164724) (open-paren 164694 . 164695) (close-paren 164652 . 164653) (close-paren 164651 . 164652) (symbol 164646 . 164651) (close-paren 164644 . 164645) (symbol 164639 . 164644) (open-paren 164638 . 164639) (symbol 164636 . 164637) (open-paren 164635 . 164636) (symbol 164631 . 164634) (open-paren 164630 . 164631) (close-paren 164616 . 164617) (close-paren 164615 . 164616) (symbol 164613 . 164615) (symbol 164600 . 164612) (open-paren 164599 . 164600) (symbol 164593 . 164598) (open-paren 164592 . 164593) (symbol 164588 . 164591) (open-paren 164587 . 164588) (symbol 164565 . 164579) (open-paren 164564 . 164565) (symbol 164553 . 164558) (symbol 164544 . 164547) (open-paren 164543 . 164544) (close-paren 164537 . 164538) (close-paren 164536 . 164537) (close-paren 164535 . 164536) (symbol 164523 . 164535) (number 164521 . 164522) (symbol 164517 . 164520) (open-paren 164516 . 164517) (symbol 164510 . 164515) (open-paren 164509 . 164510) (open-paren 164508 . 164509) (symbol 164504 . 164507) (open-paren 164503 . 164504) (string 164440 . 164500) (close-paren 164436 . 164437) (symbol 164424 . 164436) (open-paren 164423 . 164424) (symbol 164400 . 164422) (symbol 164394 . 164399) (open-paren 164393 . 164394) (close-paren 164390 . 164391) (close-paren 164389 . 164390) (close-paren 164388 . 164389) (string 164385 . 164388) (symbol 164362 . 164384) (symbol 164355 . 164361) (open-paren 164354 . 164355) (symbol 164343 . 164353) (open-paren 164342 . 164343) (close-paren 164338 . 164339) (symbol 164323 . 164338) (open-paren 164322 . 164323) (close-paren 164318 . 164319) (close-paren 164317 . 164318) (symbol 164305 . 164317) (open-paren 164304 . 164305) (symbol 164294 . 164303) (open-paren 164293 . 164294) (close-paren 164289 . 164290) (open-paren 164288 . 164289) (symbol 164258 . 164287) (symbol 164249 . 164257) (open-paren 164248 . 164249) (close-paren 164245 . 164246) (close-paren 164244 . 164245) (close-paren 164243 . 164244) (close-paren 164242 . 164243) (string 164235 . 164242) (symbol 164224 . 164234) (open-paren 164223 . 164224) (close-paren 164215 . 164216) (symbol 164200 . 164215) (open-paren 164199 . 164200) (close-paren 164191 . 164192) (close-paren 164190 . 164191) (symbol 164178 . 164190) (open-paren 164177 . 164178) (symbol 164167 . 164176) (open-paren 164166 . 164167) (symbol 164145 . 164159) (open-paren 164144 . 164145) (symbol 164124 . 164139) (open-paren 164123 . 164124) (string 164049 . 164120) (close-paren 164045 . 164046) (open-paren 164044 . 164045) (symbol 164026 . 164043) (symbol 164017 . 164025) (open-paren 164016 . 164017) (close-paren 164013 . 164014) (close-paren 164012 . 164013) (close-paren 164011 . 164012) (symbol 163997 . 164011) (open-paren 163996 . 163997) (close-paren 163990 . 163991) (symbol 163971 . 163990) (open-paren 163970 . 163971) (close-paren 163964 . 163965) (close-paren 163963 . 163964) (symbol 163960 . 163963) (symbol 163950 . 163959) (open-paren 163949 . 163950) (symbol 163937 . 163940) (symbol 163934 . 163936) (open-paren 163933 . 163934) (symbol 163914 . 163928) (open-paren 163913 . 163914) (string 163789 . 163910) (close-paren 163785 . 163786) (symbol 163782 . 163785) (symbol 163772 . 163781) (open-paren 163771 . 163772) (symbol 163752 . 163770) (symbol 163743 . 163751) (open-paren 163742 . 163743) (close-paren 163739 . 163740) (close-paren 163738 . 163739) (close-paren 163737 . 163738) (number 163736 . 163737) (symbol 163720 . 163735) (open-paren 163719 . 163720) (symbol 163713 . 163718) (open-paren 163712 . 163713) (close-paren 163708 . 163709) (symbol 163697 . 163708) (open-paren 163696 . 163697) (string 163646 . 163693) (close-paren 163642 . 163643) (open-paren 163641 . 163642) (symbol 163625 . 163640) (symbol 163619 . 163624) (open-paren 163618 . 163619) (close-paren 163615 . 163616) (close-paren 163614 . 163615) (close-paren 163613 . 163614) (symbol 163611 . 163613) (symbol 163595 . 163610) (open-paren 163594 . 163595) (symbol 163588 . 163593) (open-paren 163587 . 163588) (close-paren 163583 . 163584) (symbol 163572 . 163583) (open-paren 163571 . 163572) (string 163520 . 163568) (close-paren 163516 . 163517) (open-paren 163515 . 163516) (symbol 163498 . 163514) (symbol 163492 . 163497) (open-paren 163491 . 163492) (close-paren 163488 . 163489) (close-paren 163487 . 163488) (close-paren 163486 . 163487) (close-paren 163485 . 163486) (symbol 163479 . 163485) (symbol 163464 . 163478) (open-paren 163463 . 163464) (symbol 163446 . 163456) (symbol 163439 . 163445) (open-paren 163438 . 163439) (close-paren 163432 . 163433) (close-paren 163431 . 163432) (close-paren 163430 . 163431) (close-paren 163429 . 163430) (number 163428 . 163429) (close-paren 163405 . 163406) (close-paren 163404 . 163405) (symbol 163390 . 163404) (open-paren 163389 . 163390) (number 163387 . 163388) (symbol 163385 . 163386) (open-paren 163384 . 163385) (close-paren 163359 . 163360) (string 163353 . 163359) (symbol 163342 . 163352) (open-paren 163341 . 163342) (symbol 163338 . 163340) (open-paren 163337 . 163338) (close-paren 163316 . 163317) (symbol 163313 . 163316) (symbol 163303 . 163312) (open-paren 163302 . 163303) (symbol 163268 . 163282) (open-paren 163267 . 163268) (symbol 163260 . 163266) (open-paren 163259 . 163260) (close-paren 163248 . 163249) (close-paren 163247 . 163248) (symbol 163244 . 163247) (symbol 163230 . 163243) (open-paren 163229 . 163230) (symbol 163218 . 163228) (open-paren 163217 . 163218) (close-paren 163206 . 163207) (close-paren 163205 . 163206) (symbol 163193 . 163205) (number 163191 . 163192) (symbol 163187 . 163190) (open-paren 163186 . 163187) (symbol 163182 . 163185) (open-paren 163181 . 163182) (open-paren 163180 . 163181) (symbol 163175 . 163179) (open-paren 163174 . 163175) (string 163117 . 163171) (close-paren 163113 . 163114) (symbol 163101 . 163113) (open-paren 163100 . 163101) (symbol 163081 . 163099) (symbol 163075 . 163080) (open-paren 163074 . 163075) (close-paren 163071 . 163072) (close-paren 163070 . 163071) (close-paren 163069 . 163070) (close-paren 163068 . 163069) (close-paren 163067 . 163068) (number 163066 . 163067) (symbol 163064 . 163065) (open-paren 163063 . 163064) (close-paren 163054 . 163055) (symbol 163038 . 163054) (symbol 163021 . 163037) (open-paren 163020 . 163021) (close-paren 163010 . 163011) (close-paren 163009 . 163010) (close-paren 163008 . 163009) (close-paren 163007 . 163008) (symbol 162993 . 163007) (open-paren 162992 . 162993) (close-paren 162980 . 162981) (close-paren 162979 . 162980) (string 162974 . 162979) (symbol 162955 . 162973) (open-paren 162954 . 162955) (close-paren 162940 . 162941) (symbol 162928 . 162940) (open-paren 162927 . 162928) (symbol 162901 . 162914) (symbol 162894 . 162900) (open-paren 162893 . 162894) (symbol 162881 . 162882) (open-paren 162880 . 162881) (close-paren 162869 . 162870) (close-paren 162868 . 162869) (close-paren 162867 . 162868) (close-paren 162866 . 162867) (symbol 162808 . 162809) (open-paren 162807 . 162808) (close-paren 162787 . 162788) (close-paren 111498 . 111499) (symbol 111466 . 111482) (open-paren 111465 . 111466) (close-paren 5127 . 5128) (symbol 4972 . 4988) (open-paren 4971 . 4972) (symbol 605 . 606))
    )
   )
  )
